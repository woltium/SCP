/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2024-11-10 16:52:11.109562
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74;
x0=IKsin(j[2]);
x1=IKcos(j[3]);
x2=IKcos(j[4]);
x3=IKcos(j[2]);
x4=IKsin(j[4]);
x5=IKcos(j[6]);
x6=IKcos(j[5]);
x7=IKsin(j[6]);
x8=IKsin(j[3]);
x9=IKcos(j[1]);
x10=IKsin(j[5]);
x11=IKsin(j[1]);
x12=IKsin(j[0]);
x13=IKcos(j[0]);
x14=((0.0825)*x0);
x15=((1.0)*x10);
x16=((0.707453562289658)*x5);
x17=((1.0)*x6);
x18=((1.0)*x9);
x19=((0.1065)*x11);
x20=((1.0)*x3);
x21=((0.7067598299307)*x5);
x22=((0.7067598299307)*x7);
x23=((0.707453562289658)*x7);
x24=((0.0825)*x8);
x25=(x0*x8);
x26=(x3*x4);
x27=(x0*x4);
x28=(x1*x11);
x29=(x3*x9);
x30=((-1.0)*x10);
x31=((-1.0)*x6);
x32=(x3*x8);
x33=(x11*x8);
x34=(x1*x9);
x35=(x0*x2);
x36=((0.0825)*x1*x3);
x37=((0.088)*x32);
x38=(x1*x35);
x39=(x15*x25);
x40=(x18*x32);
x41=((0.1065)*x25*x6);
x42=((1.0)*x11*x27);
x43=(x38+x26);
x44=(((x1*x27))+(((-1.0)*x2*x20)));
x45=(((x1*x29))+x33);
x46=((((-1.0)*x40))+x28);
x47=((((-1.0)*x18*x8))+((x28*x3)));
x48=(x41+x14);
x49=((((0.1065)*x26))+(((0.1065)*x38)));
x50=((((0.088)*x26))+(((0.088)*x38)));
x51=((((-1.0)*x20*x33))+(((-1.0)*x1*x18)));
x52=(x10*x46);
x53=(x2*x47);
x54=(x2*x45);
x55=(x10*x51);
x56=((((0.384)*x25))+((x1*x14))+(((0.088)*x10*x25)));
x57=(((x35*x9))+((x4*x45)));
x58=((((-1.0)*x18*x27))+x54);
x59=((((-1.0)*x39))+((x43*x6)));
x60=((((-1.0)*x42))+x53);
x61=(((x11*x35))+((x4*x47)));
x62=((((-1.0)*x17*x43))+x39);
x63=(x6*x60);
x64=(x52+((x58*x6)));
x65=(((x6*(((((-1.0)*x28))+x40))))+((x10*x58)));
x66=(((x22*x44))+((x21*x59)));
x67=(x55+x63);
x68=(((x31*x58))+((x30*x46)));
x69=(((x23*x62))+((x16*x44)));
x70=(x68*x7);
x71=(((x23*x44))+((x16*x59))+((x21*x44))+((x22*x62)));
IkReal x75=(x29*x8);
IkReal x76=((0.0825)*x29);
IkReal x77=(x27*x9);
x72=((((0.384)*x28))+((x11*(((0.316)+(((-1.0)*x24))))))+((x10*(((((0.088)*x28))+(((-0.1065)*x77))+(((-0.088)*x75))+(((0.1065)*x54))))))+(((-0.384)*x75))+x76+(((-1.0)*x1*x76))+((x6*(((((-1.0)*x1*x19))+(((-0.088)*x77))+(((0.088)*x54))+(((0.1065)*x75)))))));
x73=((((-1.0)*x16*x57))+(((-1.0)*x23*x68))+((x21*x64))+((x22*x57)));
x74=(((x16*x64))+((x22*x68))+((x21*x57))+((x23*x57)));
eerot[0]=(((x12*((x69+(((-1.0)*x66))))))+((x13*x73)));
eerot[1]=((((-1.0)*x12*x71))+((x13*x74)));
eerot[2]=(((x12*(((((-1.0)*x15*x43))+(((-1.0)*x17*x25))))))+((x13*x65)));
eetrans[0]=(((x12*(((((-1.0)*x15*x49))+(((-1.0)*x48))+x56+(((-1.0)*x17*x50))))))+((x13*x72)));
eerot[3]=(((x13*((x66+(((-1.0)*x69))))))+((x12*x73)));
eerot[4]=(((x12*x74))+((x13*x71)));
eerot[5]=(((x12*x65))+((x13*((((x10*x43))+((x25*x6)))))));
eetrans[1]=(((x13*((((x50*x6))+((x10*x49))+x48+(((-1.0)*x56))))))+((x12*x72)));
eerot[6]=(((x23*((((x31*x60))+((x30*x51))))))+((x16*x61))+(((-1.0)*x21*x67))+(((-1.0)*x22*x61)));
IkReal x78=((1.0)*x61);
eerot[7]=((((-1.0)*x16*x67))+(((-1.0)*x21*x78))+(((-1.0)*x23*x78))+(((-1.0)*x22*(((((-1.0)*x15*x51))+(((-1.0)*x17*x60)))))));
eerot[8]=(((x10*((x42+(((-1.0)*x53))))))+((x51*x6)));
IkReal x79=((0.0825)*x3);
eetrans[2]=((0.333)+((x6*(((((-0.1065)*x34))+(((-1.0)*x19*x32))))))+((x10*(((((-0.1065)*x53))+((x19*x27))))))+((x28*x79))+(((-1.0)*x11*x79))+(((0.384)*x11*x32))+((x10*((((x11*x37))+(((0.088)*x34))))))+(((-1.0)*x24*x9))+(((0.384)*x34))+((x6*(((((0.088)*x11*x27))+(((-0.088)*x53))))))+(((0.316)*x9)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API const int* GetFreeIndices() { static const int freeindices[] = {0}; return freeindices; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j0,cj0,sj0,htj0,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij0[2], _nj0;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij0[0] = -1; _ij0[1] = -1; _nj0 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]), htj0=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

IkReal x80=IKsin(j0);
IkReal x81=IKcos(j0);
new_r00=((((0.707453562289658)*r11*x80))+(((0.707453562289658)*r01*x81))+(((0.7067598299307)*r00*x81))+(((0.7067598299307)*r10*x80)));
IkReal x82=IKcos(j0);
IkReal x83=IKsin(j0);
new_r01=((((-0.707453562289658)*r00*x82))+(((0.7067598299307)*r01*x82))+(((-0.707453562289658)*r10*x83))+(((0.7067598299307)*r11*x83)));
new_r02=(((r12*(IKsin(j0))))+((r02*(IKcos(j0)))));
IkReal x84=IKsin(j0);
IkReal x85=IKcos(j0);
new_px=((((-0.1065)*r12*x84))+(((-0.1065)*r02*x85))+((py*x84))+((px*x85)));
new_r10=((((-0.707453562289658)*r21))+(((-0.7067598299307)*r20)));
new_r11=((((0.707453562289658)*r20))+(((-0.7067598299307)*r21)));
new_r12=((-1.0)*r22);
new_py=((0.333)+(((-1.0)*pz))+(((0.1065)*r22)));
IkReal x86=IKcos(j0);
IkReal x87=IKsin(j0);
new_r20=((((0.707453562289658)*r11*x86))+(((-0.707453562289658)*r01*x87))+(((0.7067598299307)*r10*x86))+(((-0.7067598299307)*r00*x87)));
IkReal x88=IKsin(j0);
IkReal x89=IKcos(j0);
new_r21=((((-0.7067598299307)*r01*x88))+(((0.707453562289658)*r00*x88))+(((-0.707453562289658)*r10*x89))+(((0.7067598299307)*r11*x89)));
new_r22=((((-1.0)*r02*(IKsin(j0))))+((r12*(IKcos(j0)))));
IkReal x90=IKsin(j0);
IkReal x91=IKcos(j0);
new_pz=((((-0.1065)*r12*x91))+(((-1.0)*px*x90))+((py*x91))+(((0.1065)*r02*x90)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x92=((1.0)*px);
IkReal x93=((1.0)*pz);
IkReal x94=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x94))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x93)));
rxp0_2=((((-1.0)*r10*x92))+((py*r00)));
rxp1_0=((((-1.0)*r21*x94))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x93)));
rxp1_2=((((-1.0)*r11*x92))+((py*r01)));
rxp2_0=((((-1.0)*r22*x94))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x93)));
rxp2_2=((((-1.0)*r12*x92))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x95=((0.176)*npy);
IkReal x96=((0.088)*r20);
IkReal x97=((0.088)*r21);
IkReal x98=((-0.088)*r21);
IkReal x99=((-0.176)*npx);
IkReal x100=((-1.0)*npz);
IkReal x101=((-1.0)*rxp1_2);
IkReal x102=((-0.088)*r20);
IkReal x103=((-1.0)*r20);
IkReal x104=((-1.0)*npx);
IkReal x105=((-1.0)*rxp2_2);
IkReal x106=((-1.0)*r21);
matrixinvcoeffs[0]=x98;
matrixinvcoeffs[1]=x95;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=x103;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=npx;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=((-1.0)*rxp0_2);
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x98;
matrixinvcoeffs[19]=x95;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=r20;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x104;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=rxp0_2;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x96;
matrixinvcoeffs[33]=x99;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=x106;
matrixinvcoeffs[42]=0;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=npy;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x101;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x96;
matrixinvcoeffs[51]=x99;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=r21;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=((-1.0)*npy);
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=rxp1_2;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0.088;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=r22;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x100;
matrixinvcoeffs[76]=0;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=rxp2_2;
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0.088;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=r22;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=x100;
matrixinvcoeffs[93]=0;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=x101;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=0;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x102;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x101;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x102;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x103;
matrixinvcoeffs[133]=x104;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=rxp0_2;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=0;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x98;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x103;
matrixinvcoeffs[151]=x104;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x98;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=r22;
matrixinvcoeffs[165]=npz;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=x105;
matrixinvcoeffs[171]=0.088;
matrixinvcoeffs[172]=0;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=0;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=r22;
matrixinvcoeffs[183]=npz;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0.088;
matrixinvcoeffs[189]=x105;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=0;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=x106;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=x96;
matrixinvcoeffs[203]=npy;
matrixinvcoeffs[204]=0;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x101;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=x106;
matrixinvcoeffs[218]=0;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=npy;
matrixinvcoeffs[221]=x96;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=x101;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=r20;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=x97;
matrixinvcoeffs[235]=x104;
matrixinvcoeffs[236]=0;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=r20;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=x104;
matrixinvcoeffs[253]=x97;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=rxp0_2;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_5=matrixinvcoeffs[84], gclwh4_8=matrixinvcoeffs[132], gclwh4_10=matrixinvcoeffs[164], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_7=matrixinvcoeffs[117], gclwh5_9=matrixinvcoeffs[149], gclwh5_12=matrixinvcoeffs[197], gclwh5_13=matrixinvcoeffs[213], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_3=matrixinvcoeffs[54], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_8=matrixinvcoeffs[134], gclwh6_10=matrixinvcoeffs[166], gclwh6_11=matrixinvcoeffs[182], gclwh6_14=matrixinvcoeffs[230], gclwh7_0=matrixinvcoeffs[7], gclwh7_1=matrixinvcoeffs[23], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_9=matrixinvcoeffs[151], gclwh7_12=matrixinvcoeffs[199], gclwh7_13=matrixinvcoeffs[215], gclwh7_15=matrixinvcoeffs[247], gclwh8_2=matrixinvcoeffs[40], gclwh8_3=matrixinvcoeffs[56], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_8=matrixinvcoeffs[136], gclwh8_10=matrixinvcoeffs[168], gclwh8_11=matrixinvcoeffs[184], gclwh8_14=matrixinvcoeffs[232], gclwh9_0=matrixinvcoeffs[9], gclwh9_1=matrixinvcoeffs[25], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_9=matrixinvcoeffs[153], gclwh9_12=matrixinvcoeffs[201], gclwh9_13=matrixinvcoeffs[217], gclwh9_15=matrixinvcoeffs[249], gclwh10_2=matrixinvcoeffs[42], gclwh10_3=matrixinvcoeffs[58], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_8=matrixinvcoeffs[138], gclwh10_10=matrixinvcoeffs[170], gclwh10_11=matrixinvcoeffs[186], gclwh10_14=matrixinvcoeffs[234], gclwh11_0=matrixinvcoeffs[11], gclwh11_1=matrixinvcoeffs[27], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_9=matrixinvcoeffs[155], gclwh11_12=matrixinvcoeffs[203], gclwh11_13=matrixinvcoeffs[219], gclwh11_15=matrixinvcoeffs[251], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_5=matrixinvcoeffs[92], gclwh12_8=matrixinvcoeffs[140], gclwh12_10=matrixinvcoeffs[172], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_7=matrixinvcoeffs[125], gclwh13_9=matrixinvcoeffs[157], gclwh13_12=matrixinvcoeffs[205], gclwh13_13=matrixinvcoeffs[221], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_5=matrixinvcoeffs[94], gclwh14_8=matrixinvcoeffs[142], gclwh14_10=matrixinvcoeffs[174], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_7=matrixinvcoeffs[127], gclwh15_9=matrixinvcoeffs[159], gclwh15_12=matrixinvcoeffs[207], gclwh15_13=matrixinvcoeffs[223], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x107=pz*pz;
IkReal x108=pp*pp;
IkReal x109=r22*r22;
IkReal x110=((0.176)*rxp2_2);
IkReal x111=((2.0)*pz);
IkReal x112=(pp*r20);
IkReal x113=(gclwh11_1*r22);
IkReal x114=((0.462)*pz);
IkReal x115=(gclwh15_1*npx);
IkReal x116=(gclwh8_14*r20);
IkReal x117=((0.007744)*r22);
IkReal x118=((0.00127776)*r22);
IkReal x119=((0.001788864)*r20);
IkReal x120=(npz*pz);
IkReal x121=(pp*r21);
IkReal x122=(pp*r22);
IkReal x123=(gclwh10_3*npz);
IkReal x124=((0.088)*r22);
IkReal x125=(npx*pz);
IkReal x126=((0.003734590464)*r21);
IkReal x127=(gclwh10_11*pz);
IkReal x128=(gclwh14_2*pz);
IkReal x129=((0.007744)*pz);
IkReal x130=((0.111232)*rxp1_2);
IkReal x131=((0.011968)*rxp0_2);
IkReal x132=(gclwh12_14*r21);
IkReal x133=((0.0054208)*r20);
IkReal x134=((0.040656)*rxp0_2);
IkReal x135=((0.176)*pz);
IkReal x136=(gclwh4_3*pp);
IkReal x137=((0.176)*r22);
IkReal x138=(gclwh4_14*r22);
IkReal x139=((0.015488)*pz);
IkReal x140=(gclwh6_3*npy);
IkReal x141=(npy*pz);
IkReal x142=((0.02904)*rxp0_2);
IkReal x143=((1.0)*pz);
IkReal x144=((0.000526592)*r22);
IkReal x145=((0.007744)*r20);
IkReal x146=((0.00127776)*r20);
IkReal x147=(gclwh8_3*r20);
IkReal x148=((0.00018666912)*r21);
IkReal x149=(gclwh5_0*pz);
IkReal x150=((0.02904)*pz);
IkReal x151=((0.1232)*rxp1_2);
IkReal x152=((0.1232)*pz);
IkReal x153=((0.011968)*rxp1_2);
IkReal x154=(npy*r22);
IkReal x155=(gclwh12_3*npy);
IkReal x156=((0.00127776)*r21);
IkReal x157=((0.1232)*rxp0_2);
IkReal x158=((0.011968)*pz);
IkReal x159=(gclwh9_1*rxp1_2);
IkReal x160=(gclwh5_1*pp);
IkReal x161=((0.176)*pp);
IkReal x162=(gclwh13_1*rxp0_2);
IkReal x163=((0.111232)*rxp0_2);
IkReal x164=((0.004894208)*r21);
IkReal x165=(npy*pp);
IkReal x166=(gclwh15_1*r20);
IkReal x167=(gclwh13_1*r21);
IkReal x168=((0.004894208)*r22);
IkReal x169=((0.000526592)*r20);
IkReal x170=(gclwh12_3*rxp0_2);
IkReal x171=(gclwh8_3*rxp1_2);
IkReal x172=((0.015488)*r22);
IkReal x173=(gclwh7_15*r21);
IkReal x174=((0.176)*rxp1_2);
IkReal x175=((0.007744)*r21);
IkReal x176=((0.176)*rxp0_2);
IkReal x177=(gclwh5_1*pz);
IkReal x178=((0.111232)*pz);
IkReal x179=(gclwh4_3*r22);
IkReal x180=(gclwh7_1*rxp0_2);
IkReal x181=(gclwh8_3*npx);
IkReal x182=(gclwh14_3*npx);
IkReal x183=((0.0054208)*r22);
IkReal x184=(gclwh14_14*rxp1_2);
IkReal x185=(gclwh15_15*rxp1_2);
IkReal x186=((0.02904)*rxp1_2);
IkReal x187=(gclwh6_3*rxp0_2);
IkReal x188=(gclwh1_3*r20);
IkReal x189=(gclwh10_3*r22);
IkReal x190=((0.084877056)*pz);
IkReal x191=((0.004894208)*r20);
IkReal x192=(gclwh5_1*r22);
IkReal x193=((0.0054208)*r21);
IkReal x194=(gclwh4_2*pz);
IkReal x195=(gclwh4_3*pz);
IkReal x196=(gclwh11_1*pp);
IkReal x197=(npx*pp);
IkReal x198=((0.964512)*pz);
IkReal x199=((0.040656)*pz);
IkReal x200=((0.003734590464)*r20);
IkReal x201=(gclwh14_3*rxp1_2);
IkReal x202=((0.000681472)*r22);
IkReal x203=((0.000526592)*r21);
IkReal x204=(gclwh9_1*r20);
IkReal x205=(gclwh3_3*r21);
IkReal x206=(gclwh14_3*r20);
IkReal x207=(gclwh15_1*rxp1_2);
IkReal x208=((0.001788864)*r21);
IkReal x209=(gclwh8_8*x112);
IkReal x210=(gclwh6_8*x175);
IkReal x211=(gclwh4_8*x135);
IkReal x212=(gclwh10_8*x117);
IkReal x213=(gclwh12_8*x176);
IkReal x214=(gclwh8_8*x145);
IkReal x215=(gclwh14_8*x174);
IkReal x216=(gclwh9_9*x112);
IkReal x217=(gclwh5_9*x135);
IkReal x218=(gclwh7_9*x175);
IkReal x219=(gclwh13_9*x176);
IkReal x220=(gclwh11_9*x117);
IkReal x221=(gclwh9_9*x145);
IkReal x222=(gclwh15_9*x174);
IkReal x223=(gclwh4_8*x117);
IkReal x224=(gclwh8_8*x174);
IkReal x225=(gclwh12_8*x175);
IkReal x226=(gclwh14_8*x112);
IkReal x227=(gclwh6_8*x176);
IkReal x228=(gclwh4_8*x122);
IkReal x229=(gclwh10_8*x135);
IkReal x230=(gclwh14_8*x145);
IkReal x231=((0.000681472)*x109);
IkReal x232=((0.33)*x141);
IkReal x233=((2.0)*x107);
IkReal x234=((1.0)*x108);
IkReal x235=(r20*x202);
IkReal x236=((0.176)*x107);
IkReal x237=(r21*x202);
IkReal x238=(r21*x108);
IkReal x239=(gclwh6_3*x238);
IkReal x240=(gclwh6_2*r21*x129);
IkReal x241=(x116*x202);
IkReal x242=(x108*x189);
IkReal x243=(gclwh6_8*npy*x111);
IkReal x244=(gclwh4_2*x236);
IkReal x245=(gclwh12_14*rxp0_2*x172);
IkReal x246=(gclwh10_14*x231);
IkReal x247=(gclwh8_2*pz*x112);
IkReal x248=(x172*x184);
IkReal x249=(gclwh10_8*npz*x111);
IkReal x250=(x161*x170);
IkReal x251=(x161*x201);
IkReal x252=(x128*x174);
IkReal x253=(x135*x136);
IkReal x254=(gclwh12_2*rxp0_2*x135);
IkReal x255=((1.0)*gclwh6_8*x121);
IkReal x256=((1.0)*gclwh10_8*x122);
IkReal x257=(gclwh8_2*r20*x129);
IkReal x258=(gclwh8_8*npx*x111);
IkReal x259=(gclwh6_14*x237);
IkReal x260=(gclwh10_2*pz*x117);
IkReal x261=(x138*x139);
IkReal x262=(gclwh5_0*x236);
IkReal x263=(gclwh7_1*x238);
IkReal x264=(gclwh5_15*r22*x139);
IkReal x265=(x173*x202);
IkReal x266=(gclwh7_0*r21*x129);
IkReal x267=(gclwh11_9*npz*x111);
IkReal x268=(gclwh7_9*npy*x111);
IkReal x269=(x161*x207);
IkReal x270=(x108*x113);
IkReal x271=(x161*x162);
IkReal x272=(gclwh9_0*pz*x112);
IkReal x273=(gclwh11_15*x231);
IkReal x274=(gclwh9_9*npx*x111);
IkReal x275=(gclwh13_0*rxp0_2*x135);
IkReal x276=(gclwh9_15*x235);
IkReal x277=(gclwh11_0*pz*x117);
IkReal x278=((1.0)*gclwh7_9*x121);
IkReal x279=(gclwh13_15*rxp0_2*x172);
IkReal x280=((1.0)*gclwh11_9*x122);
IkReal x281=(x172*x185);
IkReal x282=(gclwh15_0*rxp1_2*x135);
IkReal x283=(gclwh9_0*r20*x129);
IkReal x284=(x135*x160);
IkReal x285=(gclwh14_14*x235);
IkReal x286=(x112*x128);
IkReal x287=(gclwh12_3*x238);
IkReal x288=(gclwh1_2*pz*x112);
IkReal x289=(gclwh1_2*r20*x129);
IkReal x290=(gclwh3_2*pz*x121);
IkReal x291=(gclwh12_8*npy*x111);
IkReal x292=(gclwh6_2*rxp0_2*x135);
IkReal x293=(gclwh3_2*r21*x129);
IkReal x294=(gclwh8_2*rxp1_2*x135);
IkReal x295=(x117*x194);
IkReal x296=(gclwh12_2*r21*x129);
IkReal x297=(x122*x194);
IkReal x298=(gclwh10_2*x236);
IkReal x299=(gclwh10_14*r22*x139);
IkReal x300=(gclwh10_3*pp*x135);
IkReal x301=(gclwh8_14*rxp1_2*x172);
IkReal x302=((1.0)*gclwh12_8*x121);
IkReal x303=(x132*x202);
IkReal x304=(x161*x171);
IkReal x305=(x161*x187);
IkReal x306=(gclwh6_14*rxp0_2*x172);
IkReal x307=(gclwh14_8*npx*x111);
IkReal x308=(x128*x145);
IkReal x309=(gclwh4_8*npz*x111);
IkReal x310=(gclwh4_14*x231);
IkReal x311=((0.088)*pp*x109);
IkReal x312=(pp*x111*x181);
IkReal x313=(gclwh6_2*npy*x233);
IkReal x314=(gclwh8_14*x125*x137);
IkReal x315=(gclwh10_14*x311);
IkReal x316=(gclwh6_14*x121*x124);
IkReal x317=(gclwh10_2*npz*x233);
IkReal x318=(gclwh10_2*x122*x143);
IkReal x319=(gclwh10_14*x120*x137);
IkReal x320=(gclwh8_14*x112*x124);
IkReal x321=(gclwh6_14*x135*x154);
IkReal x322=(pp*x111*x123);
IkReal x323=(pp*x111*x140);
IkReal x324=(gclwh6_2*x121*x143);
IkReal x325=(x147*x234);
IkReal x326=(gclwh8_2*npx*x233);
IkReal x327=(gclwh7_15*x135*x154);
IkReal x328=(gclwh9_1*x111*x197);
IkReal x329=(gclwh11_15*x120*x137);
IkReal x330=(gclwh11_0*npz*x233);
IkReal x331=(gclwh9_15*x112*x124);
IkReal x332=(gclwh7_0*npy*x233);
IkReal x333=(gclwh11_0*x122*x143);
IkReal x334=(x204*x234);
IkReal x335=(gclwh7_15*x121*x124);
IkReal x336=(npz*x111*x196);
IkReal x337=(gclwh11_15*x311);
IkReal x338=(gclwh9_15*x125*x137);
IkReal x339=(gclwh9_0*npx*x233);
IkReal x340=(gclwh7_1*x111*x165);
IkReal x341=(gclwh7_0*x121*x143);
IkReal x342=(gclwh12_2*npy*x233);
IkReal x343=(npz*x111*x136);
IkReal x344=(gclwh4_14*x120*x137);
IkReal x345=(gclwh3_3*x111*x165);
IkReal x346=(gclwh14_14*x125*x137);
IkReal x347=(pp*x111*x182);
IkReal x348=(gclwh1_3*x111*x197);
IkReal x349=(gclwh12_14*x121*x124);
IkReal x350=(gclwh3_2*npy*x233);
IkReal x351=(gclwh12_2*x121*x143);
IkReal x352=(gclwh1_2*npx*x233);
IkReal x353=(gclwh12_14*x135*x154);
IkReal x354=(x205*x234);
IkReal x355=(gclwh14_14*x112*x124);
IkReal x356=(gclwh4_2*npz*x233);
IkReal x357=(gclwh4_14*x311);
IkReal x358=(x179*x234);
IkReal x359=(pp*x111*x155);
IkReal x360=(gclwh14_2*npx*x233);
IkReal x361=(x188*x234);
IkReal x362=(x206*x234);
IkReal x363=(x332+x331+x330+x327+x328+x329+x216+x217+x218+x265+x264+x267+x266+x263+x262+x269+x268+x272+x270+x271);
IkReal x364=(x315+x314+x317+x316+x313+x312+x210+x211+x250+x251+x239+x209+x243+x242+x241+x240+x247+x246+x245+x244+x249+x248);
IkReal x365=(x324+x325+x326+x320+x321+x322+x323+x319+x318+x212+x213+x214+x215+x258+x259+x254+x255+x256+x257+x252+x253+x261+x260);
IkReal x366=(x339+x338+x333+x337+x336+x335+x334+x340+x341+x219+x221+x220+x222+x276+x277+x274+x275+x273+x278+x279+x284+x283+x282+x281+x280);
IkReal x367=(x342+x343+x346+x347+x344+x345+x348+x349+x229+x228+x223+x225+x224+x227+x226+x298+x290+x291+x292+x293+x294+x295+x296+x297+x289+x288+x287+x286+x285);
IkReal x368=(x110+x308+x309+x306+x307+x304+x305+x302+x303+x300+x301+x351+x350+x353+x352+x355+x354+x357+x356+x359+x358+x310+x360+x361+x362+x230+x299);
op[0]=(((gclwh14_14*x151))+(((0.7)*gclwh10_5*x122))+(((-1.0)*gclwh4_5*x152))+((gclwh8_5*x133))+(((-1.0)*gclwh6_14*x193))+(((-1.4)*gclwh10_5*x120))+((gclwh10_5*x183))+(((-1.4)*gclwh6_14*x141))+(((0.7)*gclwh6_14*x121))+(((-1.0)*gclwh6_5*x193))+(((-1.0)*gclwh4_14*x152))+((gclwh10_14*x183))+((gclwh12_5*x157))+(((1.4)*gclwh8_5*x125))+(((-1.4)*gclwh6_5*x141))+(((1.4)*gclwh8_14*x125))+(((0.7)*gclwh10_14*x122))+(((-0.7)*gclwh8_14*x112))+(((-1.4)*gclwh10_14*x120))+(((-0.7)*gclwh8_5*x112))+(((0.0054208)*x116))+(((0.7)*gclwh6_5*x121))+((gclwh12_14*x157))+((gclwh14_5*x151)));
op[1]=((((-0.084877056)*x170))+((x140*x198))+(((-0.474512)*gclwh10_3*x122))+(((-1.0)*x365))+(((-0.49)*gclwh6_3*x121))+(((-0.084877056)*x201))+x364+((gclwh6_3*x126))+(((-0.003734590464)*x189))+(((-0.003734590464)*x147))+(((-0.964512)*gclwh8_3*x125))+(((0.49)*gclwh8_3*x112))+(((0.964512)*gclwh10_3*x120))+((gclwh4_3*x190)));
op[2]=(((gclwh6_14*x232))+(((0.632)*gclwh6_11*x121))+((gclwh6_10*x164))+(((-1.0)*gclwh6_11*x164))+(((-1.0)*gclwh10_5*x118))+(((0.632)*gclwh8_10*x112))+(((-0.165)*gclwh10_5*x122))+(((-0.165)*gclwh6_5*x121))+((gclwh4_5*x150))+(((1.264)*gclwh8_11*x125))+(((-1.0)*gclwh14_5*x186))+(((-0.165)*gclwh6_14*x121))+(((-1.0)*gclwh12_5*x142))+(((-0.632)*gclwh10_10*x122))+(((-1.0)*gclwh14_10*x130))+(((0.33)*gclwh10_5*x120))+(((-1.0)*gclwh8_5*x146))+(((-1.0)*gclwh10_10*x168))+(((0.33)*gclwh10_14*x120))+(((-0.33)*gclwh8_14*x125))+(((-1.0)*gclwh8_10*x191))+(((-1.264)*gclwh6_11*x141))+((gclwh14_11*x130))+(((0.165)*gclwh8_5*x112))+((gclwh4_10*x178))+(((-1.0)*gclwh12_10*x163))+((gclwh8_11*x191))+(((-1.0)*gclwh10_14*x118))+(((1.264)*gclwh10_10*x120))+(((-0.632)*gclwh6_10*x121))+(((-1.0)*gclwh4_11*x178))+((gclwh12_11*x163))+(((-0.632)*gclwh8_11*x112))+(((-1.0)*gclwh12_14*x142))+((gclwh6_14*x156))+(((-1.264)*gclwh8_10*x125))+((gclwh6_5*x156))+(((-0.165)*gclwh10_14*x122))+(((-0.33)*gclwh8_5*x125))+((gclwh4_14*x150))+(((-1.264)*gclwh10_11*x120))+(((0.165)*gclwh8_14*x112))+(((1.264)*gclwh6_10*x141))+(((0.632)*gclwh10_11*x122))+((gclwh10_11*x168))+(((-0.02904)*x184))+(((-0.00127776)*x116))+((gclwh6_5*x232)));
op[3]=((((0.001788864)*x189))+((x114*x181))+((gclwh12_3*x134))+(((-1.0)*x114*x140))+(((0.040656)*x201))+(((-1.0)*gclwh6_3*x208))+((gclwh8_3*x119))+(((-0.231)*gclwh8_3*x112))+(((-1.0)*x114*x123))+(((0.231)*gclwh10_3*x122))+(((-0.040656)*x195))+(((0.231)*gclwh6_3*x121)));
op[4]=((((-1.0)*gclwh10_11*x118))+(((0.33)*gclwh10_11*x120))+(((0.068)*gclwh6_5*x121))+(((0.000526592)*x116))+((gclwh14_14*x153))+(((0.165)*gclwh6_10*x121))+(((-0.165)*gclwh10_11*x122))+(((-1.0)*gclwh4_5*x158))+(((0.33)*gclwh8_10*x125))+((gclwh10_14*x144))+((gclwh8_10*x146))+(((0.165)*gclwh8_11*x112))+(((0.136)*gclwh8_14*x125))+(((-1.0)*gclwh6_14*x203))+(((0.068)*gclwh10_5*x122))+(((-1.0)*gclwh6_5*x203))+(((0.165)*gclwh10_10*x122))+(((-0.165)*gclwh6_11*x121))+((gclwh10_5*x144))+(((-1.0)*gclwh14_11*x186))+(((-1.0)*gclwh4_14*x158))+(((0.068)*gclwh6_14*x121))+(((-0.33)*gclwh10_10*x120))+((gclwh8_5*x169))+(((-1.0)*gclwh12_11*x142))+(((-1.0)*gclwh6_10*x156))+((gclwh10_10*x118))+((gclwh12_5*x131))+(((-1.0)*gclwh6_10*x232))+(((-0.136)*gclwh6_14*x141))+(((-1.0)*gclwh8_11*x146))+(((0.136)*gclwh8_5*x125))+((gclwh14_10*x186))+((gclwh4_11*x150))+((gclwh6_11*x232))+(((-0.33)*gclwh8_11*x125))+(((-1.0)*gclwh4_10*x150))+(((-0.068)*gclwh8_14*x112))+(((-0.136)*gclwh10_5*x120))+(((-0.136)*gclwh10_14*x120))+(((-0.068)*gclwh8_5*x112))+(((-0.165)*gclwh8_10*x112))+(((0.068)*gclwh10_14*x122))+((gclwh12_10*x142))+(((-0.136)*gclwh6_5*x141))+((gclwh6_11*x156))+((gclwh14_5*x153))+((gclwh12_14*x131)));
op[5]=((((0.04821)*pz*x140))+(((-0.00018666912)*x189))+(((0.00424248)*x195))+(((-1.0)*x365))+(((0.04821)*gclwh10_3*x120))+((gclwh6_3*x148))+(((-0.00018666912)*x147))+(((-0.00424248)*x201))+x364+(((-0.031849)*gclwh6_3*x121))+(((-0.00424248)*x170))+(((-0.016361)*gclwh10_3*x122))+(((-0.04821)*gclwh8_3*x125))+(((0.031849)*gclwh8_3*x112)));
op[6]=((((0.964512)*gclwh7_1*x141))+(((-0.964512)*gclwh9_1*x125))+(((-0.084877056)*x162))+((gclwh7_1*x126))+(((-0.474512)*pp*x113))+(((-1.0)*gclwh9_1*x200))+(((0.964512)*gclwh11_1*x120))+(((0.49)*gclwh9_1*x112))+(((-1.0)*x366))+(((-0.084877056)*x207))+x363+(((-0.003734590464)*x113))+(((0.084877056)*x177))+(((-0.49)*gclwh7_1*x121)));
op[7]=((((-1.4)*gclwh7_7*x141))+(((0.7)*gclwh11_7*x122))+(((-1.0)*gclwh15_15*x151))+(((-1.0)*gclwh7_7*x193))+(((-1.0)*gclwh9_15*x133))+(((1.4)*gclwh9_7*x125))+(((-1.4)*gclwh11_7*x120))+(((-1.0)*gclwh5_7*x152))+(((-0.7)*gclwh7_15*x121))+(((-1.4)*gclwh9_15*x125))+(((0.7)*gclwh9_15*x112))+(((-0.7)*gclwh11_15*x122))+((gclwh11_7*x183))+(((-0.7)*gclwh9_7*x112))+((gclwh9_7*x133))+(((1.4)*gclwh11_15*x120))+(((1.4)*gclwh7_15*x141))+(((-1.0)*gclwh13_15*x157))+(((0.0054208)*x173))+((gclwh5_15*x152))+((gclwh13_7*x157))+(((0.7)*gclwh7_7*x121))+(((-1.0)*gclwh11_15*x183))+((gclwh15_7*x151)));
op[8]=((((0.231)*pp*x113))+(((0.040656)*x207))+(((-1.0)*gclwh7_1*npy*x114))+((gclwh13_1*x134))+((gclwh9_1*x119))+(((-0.231)*gclwh9_1*x112))+(((0.231)*gclwh7_1*x121))+(((-1.0)*gclwh7_1*x208))+(((-1.0)*gclwh11_1*npz*x114))+(((-0.040656)*x177))+(((0.001788864)*x113))+((gclwh9_1*npx*x114)));
op[9]=((((1.264)*gclwh11_13*x120))+(((-1.0)*gclwh5_15*x150))+(((-0.165)*gclwh9_15*x112))+(((-0.632)*gclwh7_13*x121))+((gclwh11_15*x118))+(((-0.632)*gclwh7_12*x121))+(((0.632)*gclwh9_13*x112))+(((1.264)*gclwh7_13*x141))+((gclwh9_15*x146))+((gclwh5_7*x150))+(((-0.632)*gclwh11_13*x122))+(((0.165)*gclwh7_15*x121))+((gclwh7_7*x156))+(((0.165)*gclwh11_15*x122))+(((-0.632)*gclwh11_12*x122))+(((-1.0)*gclwh13_13*x163))+(((0.33)*gclwh11_7*x120))+(((-0.165)*gclwh7_7*x121))+(((-1.0)*gclwh15_12*x130))+(((-0.33)*gclwh11_15*x120))+((gclwh7_13*x164))+(((-1.0)*gclwh13_7*x142))+(((-1.0)*gclwh9_12*x191))+(((0.33)*gclwh9_15*x125))+((gclwh7_12*x164))+(((-1.0)*gclwh15_13*x130))+(((-1.0)*gclwh9_13*x191))+(((0.632)*gclwh9_12*x112))+(((-1.264)*gclwh9_13*x125))+(((-1.0)*gclwh9_7*x146))+((gclwh5_12*x178))+(((1.264)*gclwh7_12*x141))+((gclwh5_13*x178))+(((-1.0)*gclwh13_12*x163))+((gclwh13_15*x142))+(((0.165)*gclwh9_7*x112))+(((-1.0)*gclwh15_7*x186))+(((-1.0)*gclwh11_13*x168))+(((-1.0)*gclwh7_15*x232))+(((-1.0)*gclwh11_7*x118))+(((-1.0)*gclwh11_12*x168))+(((-1.264)*gclwh9_12*x125))+(((1.264)*gclwh11_12*x120))+(((-0.165)*gclwh11_7*x122))+(((0.02904)*x185))+(((-0.33)*gclwh9_7*x125))+(((-1.0)*gclwh7_15*x156))+((gclwh7_7*x232)));
op[10]=((((-0.00018666912)*x113))+(((-0.016361)*pp*x113))+(((-1.0)*x366))+(((-0.04821)*gclwh9_1*x125))+(((0.00424248)*x177))+(((-0.00424248)*x207))+(((0.04821)*gclwh11_1*x120))+x363+(((0.031849)*gclwh9_1*x112))+(((-0.00018666912)*x204))+(((-0.00424248)*x162))+(((-0.031849)*gclwh7_1*x121))+(((0.04821)*gclwh7_1*x141))+((gclwh7_1*x148)));
op[11]=(((gclwh15_13*x186))+(((0.165)*gclwh11_12*x122))+(((0.165)*gclwh7_12*x121))+(((-1.0)*gclwh15_15*x153))+((gclwh15_12*x186))+(((0.165)*gclwh7_13*x121))+(((0.136)*gclwh7_15*x141))+(((0.136)*gclwh11_15*x120))+(((-1.0)*gclwh5_12*x150))+(((-1.0)*gclwh5_13*x150))+(((-0.136)*gclwh9_15*x125))+(((-0.165)*gclwh9_13*x112))+(((-0.068)*gclwh7_15*x121))+(((0.068)*gclwh11_7*x122))+((gclwh13_13*x142))+(((-1.0)*gclwh7_12*x232))+(((-0.33)*gclwh11_12*x120))+(((0.068)*gclwh7_7*x121))+(((-1.0)*gclwh5_7*x158))+(((-0.068)*gclwh9_7*x112))+((gclwh9_7*x169))+(((-1.0)*gclwh7_13*x232))+((gclwh9_12*x146))+(((-1.0)*gclwh7_13*x156))+(((-0.068)*gclwh11_15*x122))+(((-0.165)*gclwh9_12*x112))+(((-1.0)*gclwh9_15*x169))+((gclwh13_7*x131))+(((0.165)*gclwh11_13*x122))+(((0.068)*gclwh9_15*x112))+(((-1.0)*gclwh7_12*x156))+(((-0.33)*gclwh11_13*x120))+(((-0.136)*gclwh7_7*x141))+((gclwh9_13*x146))+(((-1.0)*gclwh11_15*x144))+((gclwh11_7*x144))+(((0.000526592)*x173))+(((-1.0)*gclwh7_7*x203))+((gclwh13_12*x142))+(((0.136)*gclwh9_7*x125))+((gclwh11_12*x118))+(((0.33)*gclwh9_12*x125))+((gclwh5_15*x158))+(((-0.136)*gclwh11_7*x120))+((gclwh11_13*x118))+(((-1.0)*gclwh13_15*x131))+(((0.33)*gclwh9_13*x125))+((gclwh15_7*x153)));
op[12]=((((-1.4)*gclwh12_5*x141))+(((-1.4)*gclwh12_14*x141))+(((0.7)*gclwh12_5*x121))+(((-0.7)*gclwh4_14*x122))+(((1.4)*gclwh14_5*x125))+(((1.4)*gclwh14_14*x125))+(((-1.0)*gclwh6_14*x157))+(((-0.7)*gclwh14_14*x112))+(((0.7)*gclwh12_14*x121))+(((-1.0)*gclwh8_5*x151))+(((-1.0)*gclwh10_14*x152))+(((-0.7)*gclwh14_5*x112))+(((-1.0)*gclwh10_5*x152))+((gclwh14_14*x133))+(((1.4)*gclwh4_5*x120))+(((-1.0)*gclwh8_14*x151))+(((-0.0054208)*x138))+(((-0.0054208)*x132))+(((-0.7)*gclwh4_5*x122))+(((1.4)*gclwh4_14*x120))+(((-1.0)*gclwh4_5*x183))+(((-1.0)*gclwh12_5*x193))+(((-1.0)*gclwh6_5*x157))+((gclwh14_5*x133)));
op[13]=((-0.49)+(((0.49)*gclwh14_3*x112))+(((0.474512)*gclwh4_3*x122))+((gclwh12_3*x126))+(((-0.964512)*gclwh14_3*x125))+(((-1.0)*x368))+((gclwh3_3*x126))+(((0.474512)*gclwh1_3*x112))+(((-0.964512)*gclwh1_3*x125))+(((0.474512)*gclwh3_3*x121))+x367+(((-0.964512)*gclwh4_3*x120))+(((0.964512)*gclwh12_3*x141))+(((-0.964512)*gclwh3_3*x141))+((gclwh10_3*x190))+(((0.084877056)*x187))+(((0.084877056)*x171))+(((-0.49)*gclwh12_3*x121))+(((0.003734590464)*x179))+(((0.003734590464)*x188))+(((-1.0)*gclwh14_3*x200)));
op[14]=((((-0.632)*gclwh4_11*x122))+(((0.00127776)*x132))+((gclwh4_14*x118))+((gclwh6_10*x163))+((gclwh12_10*x164))+(((-1.0)*gclwh6_11*x163))+(((-0.33)*gclwh14_14*x125))+((gclwh12_14*x232))+((gclwh10_14*x150))+(((0.165)*gclwh4_14*x122))+(((-0.33)*gclwh4_14*x120))+(((1.264)*gclwh12_10*x141))+(((-0.33)*gclwh4_5*x120))+(((-1.0)*gclwh8_11*x130))+(((-1.0)*gclwh14_14*x146))+((gclwh8_5*x186))+((gclwh10_5*x150))+(((-1.0)*gclwh12_11*x164))+((gclwh10_10*x178))+(((-0.165)*gclwh12_14*x121))+(((-0.111232)*x127))+(((0.165)*gclwh4_5*x122))+(((-1.0)*gclwh14_10*x191))+(((-1.264)*gclwh14_10*x125))+(((0.165)*gclwh14_5*x112))+((gclwh12_5*x156))+((gclwh8_14*x186))+(((-1.264)*gclwh12_11*x141))+(((-0.165)*gclwh12_5*x121))+(((0.165)*gclwh14_14*x112))+(((-0.632)*gclwh14_11*x112))+((gclwh4_10*x168))+(((-0.632)*gclwh12_10*x121))+(((-1.0)*gclwh4_11*x168))+(((0.632)*gclwh4_10*x122))+(((-1.264)*gclwh4_10*x120))+(((0.632)*gclwh14_10*x112))+(((-0.33)*gclwh14_5*x125))+(((0.632)*gclwh12_11*x121))+((gclwh14_11*x191))+((gclwh8_10*x130))+(((1.264)*gclwh14_11*x125))+(((1.264)*gclwh4_11*x120))+((gclwh6_14*x142))+((gclwh6_5*x142))+((gclwh12_5*x232))+((gclwh4_5*x118))+(((-1.0)*gclwh14_5*x146)));
op[15]=((0.231)+(((-0.231)*gclwh1_3*x112))+((gclwh1_3*npx*x114))+((gclwh3_3*npy*x114))+((x114*x182))+(((-1.0)*x114*x155))+(((-0.231)*gclwh4_3*x122))+(((-1.0)*gclwh1_3*x119))+(((-1.0)*gclwh12_3*x208))+((gclwh14_3*x119))+(((-0.001788864)*x205))+(((-1.0)*gclwh6_3*x134))+(((0.231)*gclwh12_3*x121))+(((-0.231)*gclwh3_3*x121))+((gclwh4_3*npz*x114))+(((-1.0)*gclwh10_3*x199))+(((-0.001788864)*x179))+(((-0.040656)*x171))+(((-0.231)*gclwh14_3*x112)));
op[16]=((((-0.165)*gclwh12_11*x121))+((gclwh6_11*x142))+((gclwh14_5*x169))+(((-0.136)*gclwh12_14*x141))+(((-1.0)*gclwh4_10*x118))+(((-1.0)*gclwh4_5*x144))+(((0.165)*gclwh14_11*x112))+(((-0.068)*gclwh4_14*x122))+(((-0.136)*gclwh12_5*x141))+(((0.068)*gclwh12_14*x121))+(((-0.165)*gclwh14_10*x112))+(((-0.068)*gclwh14_5*x112))+(((0.165)*gclwh4_11*x122))+(((0.33)*gclwh14_10*x125))+(((-0.33)*gclwh14_11*x125))+((gclwh14_14*x169))+(((-1.0)*gclwh8_5*x153))+(((-1.0)*gclwh6_5*x131))+(((0.33)*gclwh4_10*x120))+(((-1.0)*gclwh10_14*x158))+(((0.136)*gclwh14_5*x125))+(((0.068)*gclwh12_5*x121))+(((-1.0)*gclwh10_10*x150))+(((-1.0)*gclwh14_11*x146))+((gclwh4_11*x118))+(((-1.0)*gclwh10_5*x158))+(((-1.0)*gclwh6_10*x142))+(((-0.068)*gclwh4_5*x122))+(((-1.0)*gclwh8_10*x186))+(((-1.0)*gclwh8_14*x153))+(((0.136)*gclwh4_14*x120))+(((-1.0)*gclwh12_10*x232))+(((-1.0)*gclwh6_14*x131))+(((0.165)*gclwh12_10*x121))+((gclwh12_11*x232))+((gclwh8_11*x186))+(((-1.0)*gclwh12_5*x203))+((gclwh12_11*x156))+(((0.02904)*x127))+(((0.136)*gclwh14_14*x125))+(((0.136)*gclwh4_5*x120))+(((-0.000526592)*x132))+(((-0.000526592)*x138))+(((-0.165)*gclwh4_10*x122))+(((-1.0)*gclwh12_10*x156))+(((-0.33)*gclwh4_11*x120))+(((-0.068)*gclwh14_14*x112))+((gclwh14_10*x146)));
op[17]=((-0.031849)+(((-0.031849)*gclwh12_3*x121))+(((0.031849)*gclwh14_3*x112))+(((-1.0)*x368))+(((0.00424248)*x171))+(((-0.04821)*gclwh1_3*x125))+(((0.00424248)*x187))+(((0.00018666912)*x188))+(((0.016361)*gclwh4_3*x122))+x367+(((0.00018666912)*x179))+(((0.04821)*gclwh12_3*x141))+(((-0.00018666912)*x206))+(((0.00424248)*gclwh10_3*pz))+((gclwh3_3*x148))+(((0.016361)*gclwh1_3*x112))+(((0.016361)*gclwh3_3*x121))+((gclwh12_3*x148))+(((-0.04821)*gclwh3_3*x141))+(((-0.04821)*gclwh4_3*x120))+(((-0.04821)*gclwh14_3*x125)));
op[18]=((-0.49)+((gclwh11_15*r22*x139))+(((-1.0)*gclwh2_0*r21*x129))+((gclwh2_0*npy*x233))+((gclwh5_15*x311))+(((-1.0)*gclwh15_0*npx*x233))+(((-1.0)*x192*x234))+(((0.49)*gclwh15_1*x112))+(((-1.0)*x115*x198))+(((0.964512)*gclwh0_1*x125))+((pp*x111*x115))+((x117*x149))+((gclwh5_9*x122))+(((-1.0)*x159*x161))+((gclwh0_1*r20*x108))+(((-1.0)*x161*x180))+(((-1.0)*gclwh13_9*x121))+(((0.964512)*gclwh13_1*x141))+(((-0.474512)*gclwh0_1*x112))+((gclwh13_9*npy*x111))+((gclwh13_0*npy*x233))+((x122*x149))+(((-0.49)*gclwh13_1*x121))+(((-1.0)*x166*x234))+((gclwh13_1*x126))+((gclwh7_15*rxp0_2*x172))+(((-1.0)*gclwh15_9*npx*x111))+((gclwh7_0*rxp0_2*x135))+((gclwh11_9*x135))+(((-1.0)*gclwh5_9*npz*x111))+(((-1.0)*gclwh0_1*x200))+((gclwh5_9*x117))+(((0.964512)*gclwh2_1*x141))+(((-0.003734590464)*x166))+((gclwh13_15*x237))+((gclwh9_9*x174))+x110+((gclwh13_15*x135*x154))+((gclwh13_0*r21*x129))+((gclwh15_0*pz*x112))+((gclwh5_15*x231))+(((-0.964512)*gclwh5_1*x120))+((gclwh9_0*rxp1_2*x135))+((gclwh15_15*x112*x124))+(((-1.0)*gclwh2_1*x111*x165))+((gclwh13_9*x175))+((gclwh2_1*x238))+((gclwh11_1*x190))+(((-1.0)*gclwh5_0*npz*x233))+(((0.084877056)*x159))+(((-1.0)*gclwh15_9*x145))+(((-1.0)*gclwh0_1*x111*x197))+((x108*x167))+((gclwh11_0*x236))+((npz*x111*x160))+(((-1.0)*gclwh13_1*x111*x165))+(((0.084877056)*x180))+((gclwh0_0*npx*x233))+(((-1.0)*gclwh15_15*x235))+((gclwh7_9*x176))+((gclwh9_15*rxp1_2*x172))+(((-1.0)*gclwh13_0*x121*x143))+(((-1.0)*gclwh15_15*x125*x137))+(((-0.474512)*gclwh2_1*x121))+(((-1.0)*gclwh0_0*r20*x129))+(((-1.0)*gclwh2_0*x121*x143))+(((-1.0)*gclwh2_1*x126))+(((-1.0)*gclwh5_15*x120*x137))+(((-1.0)*gclwh0_0*x112*x143))+((gclwh15_9*x112))+(((-1.0)*gclwh15_0*r20*x129))+(((-1.0)*gclwh13_15*x121*x124))+(((0.474512)*gclwh5_1*x122))+(((0.003734590464)*x192))+(((-1.0)*x135*x196)));
op[19]=((((-0.7)*gclwh13_15*x121))+((gclwh9_15*x151))+(((-1.0)*gclwh7_7*x157))+((gclwh7_15*x157))+(((-0.7)*gclwh15_7*x112))+(((-1.4)*gclwh13_7*x141))+(((0.7)*gclwh15_15*x112))+(((0.7)*gclwh5_15*x122))+((gclwh15_7*x133))+((gclwh11_15*x152))+(((1.4)*gclwh5_7*x120))+(((-1.4)*gclwh15_15*x125))+(((-1.0)*gclwh13_7*x193))+(((-1.0)*gclwh5_7*x183))+(((-1.0)*gclwh11_7*x152))+((gclwh13_15*x193))+(((-1.0)*gclwh15_15*x133))+((gclwh5_15*x183))+(((-1.0)*gclwh9_7*x151))+(((-0.7)*gclwh5_7*x122))+(((1.4)*gclwh15_7*x125))+(((-1.4)*gclwh5_15*x120))+(((0.7)*gclwh13_7*x121))+(((1.4)*gclwh13_15*x141)));
op[20]=((0.231)+((gclwh0_1*x119))+(((0.231)*gclwh0_1*x112))+(((-1.0)*gclwh7_1*x134))+((x114*x115))+((gclwh5_1*npz*x114))+(((-1.0)*gclwh0_1*npx*x114))+(((-1.0)*gclwh13_1*npy*x114))+(((-0.231)*gclwh5_1*x122))+((gclwh15_1*x119))+((gclwh2_1*x208))+(((-0.001788864)*x192))+(((-0.040656)*x159))+(((-1.0)*gclwh11_1*x199))+(((-0.001788864)*x167))+(((0.231)*gclwh13_1*x121))+(((-1.0)*gclwh2_1*npy*x114))+(((0.231)*gclwh2_1*x121))+(((-0.231)*gclwh15_1*x112)));
IkReal x369=pz*pz;
IkReal x370=pp*pp;
IkReal x371=r22*r22;
IkReal x372=((0.015488)*r20);
IkReal x373=(pp*r20);
IkReal x374=(npz*pz);
IkReal x375=((0.136)*gclwh10_14);
IkReal x376=(pp*r21);
IkReal x377=(gclwh13_15*r22);
IkReal x378=((0.00255552)*r22);
IkReal x379=(npx*pz);
IkReal x380=((2.0)*gclwh9_9);
IkReal x381=((1.4)*gclwh9_15);
IkReal x382=((0.176)*r22);
IkReal x383=((0.00127776)*r22);
IkReal x384=(gclwh2_0*pz);
IkReal x385=((0.007744)*r21);
IkReal x386=(gclwh8_2*rxp1_2);
IkReal x387=((0.352)*pz);
IkReal x388=((0.030976)*r20);
IkReal x389=((0.05808)*rxp1_2);
IkReal x390=(npy*pz);
IkReal x391=(gclwh15_15*r20);
IkReal x392=((0.030976)*r21);
IkReal x393=((0.023936)*rxp0_2);
IkReal x394=((0.011894784)*r21);
IkReal x395=(gclwh11_7*pz);
IkReal x396=(pp*r22);
IkReal x397=((2.0)*gclwh5_9);
IkReal x398=((0.33)*gclwh10_14);
IkReal x399=((2.0)*gclwh6_8);
IkReal x400=((0.05808)*pz);
IkReal x401=((2.0)*pp);
IkReal x402=(gclwh8_14*r20);
IkReal x403=((0.176)*pz);
IkReal x404=(gclwh14_14*r20);
IkReal x405=(gclwh15_1*r20);
IkReal x406=((0.015488)*r22);
IkReal x407=(gclwh4_14*pz);
IkReal x408=((0.000526592)*r22);
IkReal x409=(gclwh11_15*pz);
IkReal x410=((1.0)*pz);
IkReal x411=((0.704)*rxp1_2);
IkReal x412=(gclwh5_15*pz);
IkReal x413=(gclwh8_3*r20);
IkReal x414=((0.007744)*pz);
IkReal x415=(gclwh8_2*r20);
IkReal x416=((0.000681472)*r21);
IkReal x417=((0.030976)*r22);
IkReal x418=((0.00127776)*r21);
IkReal x419=((0.111232)*rxp0_2);
IkReal x420=((0.00255552)*r21);
IkReal x421=((0.704)*rxp0_2);
IkReal x422=(gclwh15_7*r20);
IkReal x423=((0.0054208)*r20);
IkReal x424=((0.1232)*rxp0_2);
IkReal x425=(gclwh9_15*r20);
IkReal x426=(gclwh12_14*rxp0_2);
IkReal x427=((0.007744)*r22);
IkReal x428=((0.352)*rxp0_2);
IkReal x429=((0.136)*gclwh15_15);
IkReal x430=((1.4)*gclwh8_14);
IkReal x431=(gclwh14_11*rxp1_2);
IkReal x432=(gclwh9_1*r20);
IkReal x433=((0.704)*pz);
IkReal x434=((0.000526592)*r21);
IkReal x435=((0.001053184)*r21);
IkReal x436=((2.0)*gclwh15_9);
IkReal x437=((0.111232)*rxp1_2);
IkReal x438=(gclwh12_3*rxp0_2);
IkReal x439=((0.02904)*rxp1_2);
IkReal x440=(gclwh5_0*pz);
IkReal x441=(gclwh15_13*r20);
IkReal x442=((1.4)*gclwh11_15);
IkReal x443=((0.004894208)*r21);
IkReal x444=(gclwh14_14*rxp1_2);
IkReal x445=((0.02904)*rxp0_2);
IkReal x446=((0.270336)*pz);
IkReal x447=((0.0054208)*r21);
IkReal x448=(gclwh4_14*r22);
IkReal x449=((1.4)*gclwh7_15);
IkReal x450=((0.352)*rxp1_2);
IkReal x451=((0.011894784)*r20);
IkReal x452=((0.111232)*pz);
IkReal x453=((0.015488)*r21);
IkReal x454=(gclwh0_1*r20);
IkReal x455=((0.00018666912)*r21);
IkReal x456=((0.33)*gclwh6_14);
IkReal x457=(gclwh15_12*r20);
IkReal x458=((0.136)*gclwh8_14);
IkReal x459=(gclwh15_0*rxp1_2);
IkReal x460=((0.0054208)*r22);
IkReal x461=((0.00127776)*r20);
IkReal x462=(gclwh15_15*rxp1_2);
IkReal x463=((0.011894784)*r22);
IkReal x464=((0.176)*rxp1_2);
IkReal x465=((0.136)*gclwh13_15);
IkReal x466=((0.05808)*rxp0_2);
IkReal x467=((0.2464)*rxp1_2);
IkReal x468=(gclwh5_1*r22);
IkReal x469=(gclwh0_0*r20);
IkReal x470=((0.136)*gclwh6_14);
IkReal x471=(gclwh12_2*rxp0_2);
IkReal x472=((0.011968)*rxp1_2);
IkReal x473=(gclwh14_2*rxp1_2);
IkReal x474=((0.02904)*pz);
IkReal x475=((2.0)*gclwh11_9);
IkReal x476=((0.136)*gclwh5_15);
IkReal x477=((0.011968)*rxp0_2);
IkReal x478=(gclwh10_14*pz);
IkReal x479=(gclwh14_3*rxp1_2);
IkReal x480=((0.33)*gclwh8_14);
IkReal x481=(gclwh13_0*rxp0_2);
IkReal x482=((0.33)*gclwh13_15);
IkReal x483=((0.2464)*rxp0_2);
IkReal x484=(gclwh6_14*r22);
IkReal x485=((2.0)*gclwh10_8);
IkReal x486=((0.003734590464)*r22);
IkReal x487=((0.0108416)*r21);
IkReal x488=(gclwh4_3*pz);
IkReal x489=((2.0)*gclwh8_8);
IkReal x490=((0.088)*r22);
IkReal x491=((0.33)*gclwh15_15);
IkReal x492=(gclwh9_0*rxp1_2);
IkReal x493=((0.00255552)*r20);
IkReal x494=((0.007744)*r20);
IkReal x495=((0.1232)*rxp1_2);
IkReal x496=((0.023936)*rxp1_2);
IkReal x497=((2.0)*gclwh7_9);
IkReal x498=((0.33)*gclwh5_15);
IkReal x499=((0.000681472)*r22);
IkReal x500=((0.270336)*rxp0_2);
IkReal x501=((0.1232)*pz);
IkReal x502=((0.004894208)*r22);
IkReal x503=(gclwh10_14*r22);
IkReal x504=((1.4)*gclwh6_14);
IkReal x505=((2.0)*gclwh13_9);
IkReal x506=(gclwh10_3*r22);
IkReal x507=(gclwh11_15*r22);
IkReal x508=(gclwh6_3*r21);
IkReal x509=((0.176)*rxp0_2);
IkReal x510=((0.004894208)*r20);
IkReal x511=(gclwh5_15*r22);
IkReal x512=((1.4)*gclwh10_14);
IkReal x513=(gclwh12_8*x428);
IkReal x514=(gclwh8_8*x372);
IkReal x515=(gclwh14_8*x450);
IkReal x516=(gclwh10_8*x406);
IkReal x517=(gclwh5_9*x387);
IkReal x518=(gclwh7_9*x453);
IkReal x519=(gclwh14_8*x372);
IkReal x520=(gclwh12_8*x453);
IkReal x521=(gclwh8_8*x450);
IkReal x522=(gclwh4_8*x406);
IkReal x523=(gclwh10_8*x387);
IkReal x524=(gclwh6_8*x428);
IkReal x525=(gclwh7_9*x428);
IkReal x526=(gclwh5_9*x406);
IkReal x527=(gclwh13_9*x453);
IkReal x528=(gclwh11_9*x387);
IkReal x529=(gclwh9_9*x450);
IkReal x530=(gclwh15_9*x372);
IkReal x531=(gclwh10_8*x427);
IkReal x532=(gclwh10_8*x396);
IkReal x533=(gclwh6_8*x376);
IkReal x534=(gclwh12_8*x509);
IkReal x535=(gclwh8_8*x494);
IkReal x536=(gclwh14_8*x464);
IkReal x537=(gclwh6_8*x385);
IkReal x538=(gclwh4_8*x403);
IkReal x539=((2.0)*x369);
IkReal x540=((1.0)*x370);
IkReal x541=(pp*x509);
IkReal x542=((0.000681472)*x371);
IkReal x543=(r22*x370);
IkReal x544=(r21*x370);
IkReal x545=((0.176)*x369);
IkReal x546=(x396*x485);
IkReal x547=(x376*x399);
IkReal x548=((4.0)*gclwh8_8*x379);
IkReal x549=((4.0)*gclwh7_9*x390);
IkReal x550=((4.0)*gclwh11_9*x374);
IkReal x551=(x373*x380);
IkReal x552=((4.0)*gclwh4_8*x374);
IkReal x553=((2.0)*gclwh12_8*x376);
IkReal x554=((4.0)*gclwh14_8*x379);
IkReal x555=((2.0)*gclwh4_8*x396);
IkReal x556=((2.0)*gclwh14_8*x373);
IkReal x557=((4.0)*gclwh12_8*x390);
IkReal x558=((4.0)*gclwh13_9*x390);
IkReal x559=(x373*x436);
IkReal x560=(x396*x397);
IkReal x561=((4.0)*gclwh15_9*x379);
IkReal x562=(x376*x505);
IkReal x563=((4.0)*gclwh5_9*x374);
IkReal x564=(x370*x508);
IkReal x565=(gclwh6_2*pz*x385);
IkReal x566=(x402*x499);
IkReal x567=(x370*x506);
IkReal x568=(gclwh4_2*x545);
IkReal x569=(x406*x426);
IkReal x570=(x379*x489);
IkReal x571=(gclwh10_14*x542);
IkReal x572=(gclwh8_2*pz*x373);
IkReal x573=(x406*x444);
IkReal x574=((0.176)*pp*x438);
IkReal x575=(gclwh14_3*pp*x464);
IkReal x576=(x403*x473);
IkReal x577=(gclwh4_3*pp*x403);
IkReal x578=(x403*x471);
IkReal x579=(x390*x399);
IkReal x580=(x414*x415);
IkReal x581=(x416*x484);
IkReal x582=((1.0)*gclwh8_8*x373);
IkReal x583=(gclwh10_2*r22*x414);
IkReal x584=(x374*x485);
IkReal x585=(x406*x407);
IkReal x586=((0.088)*pp*x371);
IkReal x587=(gclwh8_3*x379*x401);
IkReal x588=(gclwh6_2*npy*x539);
IkReal x589=(gclwh8_14*x379*x382);
IkReal x590=(gclwh10_14*x586);
IkReal x591=((0.088)*x376*x484);
IkReal x592=(gclwh10_2*npz*x539);
IkReal x593=(gclwh10_2*x396*x410);
IkReal x594=(gclwh10_14*x374*x382);
IkReal x595=(gclwh8_14*x373*x490);
IkReal x596=(gclwh6_14*x382*x390);
IkReal x597=(gclwh10_3*x374*x401);
IkReal x598=(gclwh6_3*x390*x401);
IkReal x599=(gclwh6_2*x376*x410);
IkReal x600=(x413*x540);
IkReal x601=(gclwh8_2*npx*x539);
IkReal x602=(x530+x562+x563+x561);
IkReal x603=(x553+x552+x554+x519);
IkReal x604=(((x373*x489))+(((4.0)*gclwh6_8*x390))+((gclwh4_8*x387))+(((4.0)*gclwh10_8*x374))+((gclwh6_8*x453)));
IkReal x605=(x551+x550+x549+x518+x517);
IkReal x606=(((gclwh11_9*x406))+((x396*x475))+((gclwh13_9*x428))+((gclwh15_9*x450))+(((4.0)*gclwh9_9*x379))+((x376*x497))+((gclwh9_9*x372)));
IkReal x607=(x546+x547+x548+x516+x515+x514+x513);
IkReal x608=(x557+x556+x555+x522+x523+x520+x521+x524);
IkReal x609=(x559+x558+x526+x527+x525+x528+x529+x560);
IkReal x610=(x537+x538+x579+x578+x577+x576+x580+x581+x582+x583+x584+x585+x597+x596+x595+x594+x593+x599+x598+x601+x600);
IkReal x611=(x531+x533+x532+x535+x534+x536+x575+x574+x571+x570+x573+x572+x568+x569+x566+x567+x564+x565+x587+x588+x589+x592+x591+x590);
op[21]=((((0.33)*gclwh13_7*x390))+(((-1.0)*gclwh7_15*x445))+(((-0.632)*gclwh13_13*x376))+(((-0.165)*gclwh13_7*x376))+((x374*x498))+(((-0.33)*gclwh15_7*x379))+(((-0.632)*gclwh13_12*x376))+((gclwh5_7*x383))+(((0.00127776)*x391))+(((-1.264)*gclwh15_12*x379))+((gclwh9_7*x439))+(((-1.0)*gclwh5_15*x383))+(((-0.004894208)*x457))+((gclwh9_13*x437))+(((-1.264)*gclwh15_13*x379))+(((0.165)*gclwh5_7*x396))+(((-0.004894208)*x441))+((x379*x491))+(((-1.0)*gclwh9_15*x439))+(((0.632)*gclwh5_13*x396))+(((0.165)*gclwh13_15*x376))+(((-1.0)*x390*x482))+(((-0.165)*gclwh15_15*x373))+(((0.632)*gclwh5_12*x396))+(((-1.264)*gclwh5_12*x374))+(((0.632)*gclwh15_13*x373))+(((1.264)*gclwh13_12*x390))+((gclwh13_13*x443))+(((-0.33)*gclwh5_7*x374))+(((-1.0)*gclwh13_15*x418))+(((1.264)*gclwh13_13*x390))+((gclwh7_7*x445))+(((-1.264)*gclwh5_13*x374))+(((0.632)*gclwh15_12*x373))+(((0.165)*gclwh15_7*x373))+((gclwh5_13*x502))+((gclwh7_13*x419))+((gclwh5_12*x502))+((gclwh13_7*x418))+((gclwh7_12*x419))+(((-0.02904)*x409))+((gclwh11_12*x452))+((gclwh11_13*x452))+(((-0.165)*gclwh5_15*x396))+(((0.02904)*x395))+(((-0.00127776)*x422))+((gclwh13_12*x443))+((gclwh9_12*x437)));
op[22]=((-0.031849)+(((-1.0)*gclwh13_9*x376))+((gclwh15_0*pz*x373))+((gclwh9_15*rxp1_2*x406))+((gclwh11_9*x403))+((gclwh13_1*x544))+((gclwh7_0*rxp0_2*x403))+(((-1.0)*gclwh11_1*pp*x403))+(((-1.0)*gclwh5_15*x374*x382))+((gclwh5_15*x542))+((gclwh13_1*x455))+((x396*x440))+(((0.176)*rxp2_2))+(((0.04821)*gclwh13_1*x390))+(((0.00424248)*gclwh11_1*pz))+((gclwh13_0*pz*x385))+(((0.00424248)*gclwh7_1*rxp0_2))+((gclwh15_15*x373*x490))+(((0.00018666912)*x468))+(((-0.00018666912)*x405))+(((-0.016361)*gclwh2_1*x376))+(((-1.0)*gclwh5_0*npz*x539))+(((0.016361)*gclwh5_1*x396))+(((-1.0)*gclwh7_1*x541))+(((-1.0)*x379*x436))+((gclwh5_1*x374*x401))+(((-0.016361)*gclwh0_1*x373))+((gclwh13_9*x385))+(((-1.0)*x405*x540))+(((-0.031849)*gclwh13_1*x376))+(((-1.0)*gclwh0_1*x379*x401))+((gclwh9_9*x464))+((gclwh11_0*x545))+((gclwh15_9*x373))+(((-1.0)*gclwh13_0*x376*x410))+(((-1.0)*gclwh13_1*x390*x401))+(((-1.0)*x384*x385))+(((0.04821)*gclwh2_1*x390))+((gclwh15_1*x379*x401))+(((0.031849)*gclwh15_1*x373))+(((0.176)*x377*x390))+(((-0.00018666912)*x454))+((x403*x492))+(((-1.0)*gclwh9_1*pp*x464))+((gclwh2_1*x544))+((x406*x409))+(((-1.0)*gclwh2_1*x390*x401))+(((-1.0)*gclwh15_15*x379*x382))+(((-1.0)*x414*x469))+(((-1.0)*x376*x384))+((gclwh7_9*x509))+(((-1.0)*x391*x499))+(((0.04821)*gclwh0_1*x379))+(((-1.0)*x374*x397))+(((-1.0)*x468*x540))+(((-0.04821)*gclwh15_1*x379))+((gclwh2_0*npy*x539))+(((-0.088)*x376*x377))+(((0.00424248)*gclwh9_1*rxp1_2))+((gclwh5_0*r22*x414))+((gclwh0_0*npx*x539))+(((-1.0)*gclwh0_0*x373*x410))+((gclwh5_9*x396))+((gclwh13_0*npy*x539))+((gclwh5_9*x427))+((x390*x505))+((gclwh7_15*rxp0_2*x406))+(((-1.0)*gclwh15_9*x494))+(((-1.0)*gclwh15_0*npx*x539))+((gclwh5_15*x586))+(((-1.0)*gclwh15_0*r20*x414))+((x370*x454))+(((-0.04821)*gclwh5_1*x374))+(((-1.0)*gclwh2_1*x455))+((x377*x416)));
op[23]=((((-0.165)*gclwh5_13*x396))+((gclwh7_15*x477))+(((0.068)*gclwh5_15*x396))+(((0.165)*gclwh13_13*x376))+(((-0.165)*gclwh5_12*x396))+(((-0.33)*gclwh13_13*x390))+(((-1.0)*x379*x429))+((gclwh13_15*x434))+(((-0.000526592)*x391))+(((0.00127776)*x457))+(((0.00127776)*x441))+(((-0.068)*gclwh13_15*x376))+(((-0.165)*gclwh15_13*x373))+(((0.33)*gclwh5_12*x374))+(((-0.068)*gclwh5_7*x396))+(((-0.136)*gclwh13_7*x390))+(((-1.0)*gclwh7_7*x477))+(((0.165)*gclwh13_12*x376))+(((-1.0)*gclwh5_12*x383))+(((0.33)*gclwh5_13*x374))+(((-1.0)*gclwh9_7*x472))+(((-0.011968)*x395))+(((0.33)*gclwh15_12*x379))+(((0.068)*gclwh15_15*x373))+(((-1.0)*gclwh13_12*x418))+(((-0.165)*gclwh15_12*x373))+(((-1.0)*gclwh5_13*x383))+(((0.33)*gclwh15_13*x379))+(((0.136)*gclwh5_7*x374))+(((-0.068)*gclwh15_7*x373))+(((-1.0)*gclwh7_13*x445))+((gclwh5_15*x408))+(((0.011968)*x409))+(((-1.0)*gclwh7_12*x445))+(((-1.0)*gclwh9_12*x439))+(((0.000526592)*x422))+(((-1.0)*gclwh11_13*x474))+(((-1.0)*x374*x476))+(((0.136)*gclwh15_7*x379))+(((-0.33)*gclwh13_12*x390))+(((-1.0)*gclwh13_7*x434))+(((-1.0)*gclwh5_7*x408))+(((-1.0)*gclwh11_12*x474))+(((0.068)*gclwh13_7*x376))+(((-1.0)*gclwh13_13*x418))+(((-1.0)*gclwh9_13*x439))+((gclwh9_15*x472))+((x390*x465)));
op[24]=(x604+(((-1.0)*x607)));
op[25]=((((-0.0108416)*x503))+(((-1.0)*x376*x504))+(((-0.0108416)*x402))+(((-0.2464)*x426))+(((0.2464)*x407))+(((2.8)*gclwh10_14*x374))+(((-2.8)*gclwh8_14*x379))+(((-0.2464)*x444))+((gclwh6_14*x487))+(((2.8)*gclwh6_14*x390))+(((-1.0)*x396*x512))+((x373*x430)));
op[26]=((-0.1904)+(((4.0)*gclwh8_4*x373))+(((-4.0)*gclwh6_4*x376))+(((-4.0)*gclwh10_4*x396))+(((-1.0)*gclwh8_4*x388))+(((-1.0)*gclwh10_4*x417))+(((-1.0)*gclwh12_4*x421))+((gclwh6_4*x392))+(((8.0)*gclwh10_4*x374))+(((-1.0)*gclwh14_4*x411))+(((8.0)*gclwh6_4*x390))+((gclwh4_4*x433))+(((-8.0)*gclwh8_4*x379)));
op[27]=(((gclwh14_14*x389))+(((3.072)*gclwh10_2*x374))+(((-0.66)*gclwh10_14*x374))+((gclwh6_2*x394))+(((-1.0)*x373*x480))+(((-0.270336)*x473))+(((-0.270336)*x471))+((x396*x398))+((gclwh4_2*x446))+((gclwh10_14*x378))+(((-1.536)*gclwh6_2*x376))+(((-1.0)*gclwh6_14*x420))+(((1.536)*gclwh8_2*x373))+(((-1.536)*gclwh10_2*x396))+((x376*x456))+(((3.072)*gclwh6_2*x390))+(((0.05808)*x426))+(((-1.0)*gclwh10_2*x463))+(((-0.011894784)*x415))+(((0.00255552)*x402))+(((-0.66)*gclwh6_14*x390))+(((0.66)*gclwh8_14*x379))+(((-1.0)*gclwh4_14*x400))+(((-3.072)*gclwh8_2*x379)));
op[28]=((0.04488)+x607+(((-1.0)*x604)));
op[29]=((((-0.023936)*x407))+(((0.33)*gclwh6_2*x376))+(((-1.0)*gclwh6_2*x420))+(((0.66)*gclwh8_2*x379))+((gclwh12_2*x466))+(((0.33)*gclwh10_2*x396))+(((-0.272)*gclwh6_14*x390))+((x375*x396))+((gclwh10_2*x378))+(((0.001053184)*x402))+(((-1.0)*gclwh6_14*x435))+((x376*x470))+((gclwh14_2*x389))+(((0.272)*gclwh8_14*x379))+(((-1.0)*x373*x458))+(((-0.66)*gclwh6_2*x390))+(((0.023936)*x444))+(((-0.66)*gclwh10_2*x374))+(((0.00255552)*x415))+(((-1.0)*gclwh4_2*x400))+(((0.001053184)*x503))+(((-0.33)*gclwh8_2*x373))+(((-0.272)*gclwh10_14*x374))+((gclwh12_14*x393)));
op[30]=((((-0.0108416)*x507))+((x373*x381))+(((0.2464)*x412))+(((-1.0)*x376*x449))+(((2.8)*gclwh11_15*x374))+(((-1.0)*gclwh13_15*x483))+((gclwh7_15*x487))+(((2.8)*gclwh7_15*x390))+(((-0.0108416)*x425))+(((-0.2464)*x462))+(((-1.0)*x396*x442))+(((-2.8)*gclwh9_15*x379)));
op[31]=(x606+(((-1.0)*x605)));
op[32]=((((-0.33)*gclwh9_15*x373))+(((3.072)*gclwh7_0*x390))+((gclwh13_15*x466))+(((-0.270336)*x459))+(((-3.072)*gclwh9_0*x379))+(((0.33)*gclwh11_15*x396))+((gclwh7_0*x394))+(((1.536)*gclwh9_0*x373))+(((0.270336)*x440))+(((3.072)*gclwh11_0*x374))+(((-1.0)*gclwh9_0*x451))+(((-0.66)*gclwh7_15*x390))+(((-1.0)*gclwh11_0*x463))+(((-1.536)*gclwh7_0*x376))+(((-0.270336)*x481))+(((0.66)*gclwh9_15*x379))+(((-1.0)*gclwh5_15*x400))+((gclwh11_15*x378))+(((-1.536)*gclwh11_0*x396))+((gclwh15_15*x389))+(((-0.66)*gclwh11_15*x374))+(((0.00255552)*x425))+(((0.33)*gclwh7_15*x376))+(((-1.0)*gclwh7_15*x420)));
op[33]=((-0.1904)+(((8.0)*gclwh11_6*x374))+(((-1.0)*gclwh15_6*x411))+((gclwh7_6*x392))+(((-4.0)*gclwh11_6*x396))+(((4.0)*gclwh9_6*x373))+((gclwh5_6*x433))+(((-8.0)*gclwh9_6*x379))+(((-1.0)*gclwh11_6*x417))+(((-4.0)*gclwh7_6*x376))+(((-1.0)*gclwh13_6*x421))+(((8.0)*gclwh7_6*x390))+(((-1.0)*gclwh9_6*x388)));
op[34]=((((-0.023936)*x412))+((gclwh15_0*x389))+(((-1.0)*gclwh7_15*x435))+((gclwh13_0*x466))+(((0.66)*gclwh9_0*x379))+(((0.33)*gclwh11_0*x396))+((gclwh11_0*x378))+(((-0.33)*gclwh9_0*x373))+(((-1.0)*gclwh7_0*x420))+(((-0.272)*gclwh11_15*x374))+(((0.136)*gclwh7_15*x376))+(((0.33)*gclwh7_0*x376))+(((0.272)*gclwh9_15*x379))+(((-1.0)*gclwh5_0*x400))+(((-0.66)*gclwh11_0*x374))+((gclwh9_0*x493))+((gclwh13_15*x393))+(((0.001053184)*x425))+(((-0.272)*gclwh7_15*x390))+(((-0.136)*gclwh9_15*x373))+(((-0.66)*gclwh7_0*x390))+(((0.001053184)*x507))+(((0.023936)*x462))+(((0.136)*gclwh11_15*x396)));
op[35]=((0.04488)+x605+(((-1.0)*x606)));
op[36]=((-0.98)+x608+(((-1.0)*x603)));
op[37]=((((2.8)*gclwh12_14*x390))+(((1.4)*gclwh4_14*x396))+(((-0.0108416)*x404))+((gclwh12_14*x487))+((gclwh8_14*x467))+((gclwh6_14*x483))+(((-2.8)*gclwh14_14*x379))+(((0.2464)*x478))+(((-1.4)*gclwh12_14*x376))+(((1.4)*gclwh14_14*x373))+(((0.0108416)*x448))+(((-2.8)*gclwh4_14*x374)));
op[38]=((0.462)+((gclwh12_4*x392))+(((4.0)*gclwh4_4*x396))+(((4.0)*gclwh14_4*x373))+((gclwh8_4*x411))+((gclwh10_4*x433))+((gclwh6_4*x421))+(((8.0)*gclwh12_4*x390))+(((-4.0)*gclwh12_4*x376))+(((-1.0)*gclwh14_4*x388))+(((-8.0)*gclwh4_4*x374))+(((-8.0)*gclwh14_4*x379))+((gclwh4_4*x417)));
op[39]=((((0.270336)*x386))+((gclwh4_2*x463))+(((-3.072)*gclwh14_2*x379))+(((0.66)*gclwh4_14*x374))+((gclwh10_2*x446))+(((1.536)*gclwh4_2*x396))+(((-0.33)*gclwh4_14*x396))+(((-1.0)*gclwh8_14*x389))+(((-1.0)*gclwh12_14*x420))+(((0.66)*gclwh14_14*x379))+((gclwh6_2*x500))+(((0.33)*gclwh12_14*x376))+(((-1.0)*gclwh4_14*x378))+((gclwh3_2*x394))+((gclwh1_2*x451))+(((-1.536)*gclwh12_2*x376))+(((1.536)*gclwh3_2*x376))+(((3.072)*gclwh12_2*x390))+(((-0.66)*gclwh12_14*x390))+(((-3.072)*gclwh3_2*x390))+(((-1.0)*gclwh14_2*x451))+(((0.00255552)*x404))+(((1.536)*gclwh1_2*x373))+(((-3.072)*gclwh4_2*x374))+((gclwh12_2*x394))+(((1.536)*gclwh14_2*x373))+(((-0.33)*gclwh14_14*x373))+(((-1.0)*gclwh6_14*x466))+(((-3.072)*gclwh1_2*x379))+(((-1.0)*gclwh10_14*x400)));
op[40]=((-0.045202)+x603+(((-1.0)*x608)));
op[41]=((((-1.0)*gclwh8_14*x496))+(((-1.0)*gclwh6_2*x466))+(((-0.136)*gclwh14_14*x373))+(((-1.0)*gclwh12_2*x420))+(((0.66)*gclwh1_2*x379))+(((0.136)*gclwh12_14*x376))+(((0.272)*gclwh14_14*x379))+(((0.272)*gclwh4_14*x374))+((gclwh14_2*x493))+(((-1.0)*gclwh10_2*x400))+(((-1.0)*gclwh3_2*x420))+(((-0.66)*gclwh12_2*x390))+(((-1.0)*gclwh1_2*x493))+(((-0.001053184)*x448))+(((-0.33)*gclwh4_2*x396))+(((0.001053184)*x404))+(((0.66)*gclwh14_2*x379))+(((0.66)*gclwh3_2*x390))+(((0.33)*gclwh12_2*x376))+(((-0.33)*gclwh3_2*x376))+(((-0.33)*gclwh14_2*x373))+(((0.66)*gclwh4_2*x374))+(((-1.0)*gclwh12_14*x435))+(((-1.0)*gclwh4_2*x378))+(((-0.023936)*x478))+(((-0.272)*gclwh12_14*x390))+(((-0.136)*gclwh4_14*x396))+(((-0.05808)*x386))+(((-0.33)*gclwh1_2*x373))+(((-1.0)*gclwh6_14*x393)));
op[42]=((((-1.4)*gclwh13_15*x376))+(((2.8)*gclwh13_15*x390))+(((0.0108416)*x511))+(((0.2464)*x409))+(((-0.0108416)*x391))+((gclwh7_15*x483))+(((-2.8)*gclwh5_15*x374))+(((-2.8)*gclwh15_15*x379))+(((1.4)*gclwh5_15*x396))+(((1.4)*gclwh15_15*x373))+((gclwh9_15*x467))+((gclwh13_15*x487)));
op[43]=((0.98)+x602+(((-1.0)*x609)));
op[44]=((((-1.0)*gclwh5_15*x378))+(((-1.0)*gclwh0_0*x451))+(((-1.0)*gclwh15_0*x451))+(((0.66)*gclwh15_15*x379))+(((1.536)*gclwh15_0*x373))+(((-1.536)*gclwh13_0*x376))+(((-1.0)*gclwh7_15*x466))+(((-1.0)*x373*x491))+((gclwh7_0*x500))+((gclwh11_0*x446))+((gclwh5_0*x463))+((gclwh13_0*x394))+(((0.00255552)*x391))+(((-3.072)*gclwh5_0*x374))+(((-1.0)*gclwh13_15*x420))+(((-3.072)*gclwh15_0*x379))+(((3.072)*gclwh0_0*x379))+(((-1.0)*gclwh2_0*x394))+(((-1.0)*gclwh11_15*x400))+(((-1.536)*gclwh0_0*x373))+((x376*x482))+(((-1.0)*x396*x498))+(((-0.66)*gclwh13_15*x390))+(((3.072)*npy*x384))+(((-1.0)*gclwh9_15*x389))+(((-1.536)*gclwh2_0*x376))+(((0.66)*gclwh5_15*x374))+(((0.270336)*x492))+(((1.536)*gclwh5_0*x396))+(((3.072)*gclwh13_0*x390)));
op[45]=((-0.462)+(((4.0)*gclwh15_6*x373))+(((4.0)*gclwh5_6*x396))+((gclwh7_6*x421))+(((8.0)*gclwh13_6*x390))+(((-8.0)*gclwh15_6*x379))+((gclwh5_6*x417))+((gclwh13_6*x392))+(((-8.0)*gclwh5_6*x374))+(((-1.0)*gclwh15_6*x388))+(((-4.0)*gclwh13_6*x376))+((gclwh11_6*x433))+((gclwh9_6*x411)));
op[46]=((((-1.0)*gclwh7_15*x393))+(((-0.001053184)*x511))+(((-1.0)*gclwh11_0*x400))+(((-0.66)*gclwh0_0*x379))+(((-0.023936)*x409))+(((-1.0)*gclwh9_15*x496))+(((-1.0)*gclwh7_0*x466))+(((0.33)*gclwh2_0*x376))+(((-1.0)*gclwh5_0*x378))+(((0.00255552)*x469))+(((0.272)*gclwh15_15*x379))+(((-1.0)*x373*x429))+(((-1.0)*x396*x476))+(((-1.0)*gclwh13_0*x420))+(((-1.0)*gclwh9_0*x389))+(((0.33)*gclwh0_0*x373))+(((-0.33)*gclwh5_0*x396))+((gclwh2_0*x420))+((x376*x465))+(((-0.272)*gclwh13_15*x390))+(((0.66)*gclwh15_0*x379))+(((-0.33)*gclwh15_0*x373))+(((-1.0)*gclwh13_15*x435))+(((0.001053184)*x391))+(((-0.66)*gclwh13_0*x390))+(((0.272)*gclwh5_15*x374))+((gclwh15_0*x493))+(((-0.66)*npy*x384))+(((0.33)*gclwh13_0*x376))+(((0.66)*gclwh5_0*x374)));
op[47]=((0.045202)+x609+(((-1.0)*x602)));
op[48]=((((-1.4)*gclwh6_5*x390))+(((-1.0)*gclwh6_5*x447))+(((-0.0054208)*x402))+(((-1.0)*gclwh10_14*x460))+(((-1.0)*x379*x430))+(((-1.0)*gclwh12_14*x424))+((gclwh8_5*x423))+(((0.7)*gclwh10_5*x396))+((gclwh12_5*x424))+(((-1.0)*gclwh4_5*x501))+(((-0.7)*gclwh6_14*x376))+(((0.7)*gclwh6_5*x376))+((gclwh6_14*x447))+((gclwh10_5*x460))+(((-1.4)*gclwh10_5*x374))+(((-0.1232)*x444))+(((0.1232)*x407))+(((-0.7)*gclwh10_14*x396))+((x374*x512))+((gclwh14_5*x495))+(((1.4)*gclwh8_5*x379))+((x390*x504))+(((-0.7)*gclwh8_5*x373))+(((0.7)*gclwh8_14*x373)));
op[49]=((((-0.474512)*gclwh10_3*x396))+(((-0.084877056)*x479))+(((-0.964512)*gclwh8_3*x379))+(((0.49)*gclwh8_3*x373))+(((0.003734590464)*x508))+(((-1.0)*gclwh10_3*x486))+(((-0.003734590464)*x413))+(((-0.084877056)*x438))+(((0.964512)*gclwh10_3*x374))+(((-1.0)*x610))+(((0.964512)*gclwh6_3*x390))+x611+(((-0.49)*gclwh6_3*x376))+(((0.084877056)*x488)));
op[50]=(((gclwh8_10*x510))+(((-1.0)*gclwh8_5*x461))+(((-1.264)*gclwh6_11*x390))+(((-0.165)*gclwh8_14*x373))+((gclwh12_10*x419))+(((-1.264)*gclwh6_10*x390))+(((0.165)*gclwh6_14*x376))+(((0.33)*gclwh10_5*x374))+((gclwh10_10*x502))+(((-1.0)*gclwh10_5*x383))+(((0.165)*gclwh8_5*x373))+(((-1.264)*gclwh10_10*x374))+((x379*x480))+(((-0.165)*gclwh6_5*x376))+(((1.264)*gclwh8_11*x379))+(((0.111232)*x431))+((gclwh8_11*x510))+((gclwh10_11*x502))+(((-1.0)*gclwh14_5*x439))+(((-1.0)*gclwh4_10*x452))+(((-1.0)*gclwh6_14*x418))+(((0.165)*gclwh10_14*x396))+(((-1.0)*gclwh12_5*x445))+(((-1.0)*gclwh6_11*x443))+(((0.00127776)*x402))+((gclwh14_14*x439))+(((-1.0)*x390*x456))+(((-0.165)*gclwh10_5*x396))+(((-0.632)*gclwh8_11*x373))+((gclwh4_5*x474))+((gclwh14_10*x437))+(((-0.632)*gclwh8_10*x373))+(((-1.0)*x374*x398))+(((0.632)*gclwh10_11*x396))+(((-1.0)*gclwh6_10*x443))+(((0.632)*gclwh10_10*x396))+((gclwh10_14*x383))+(((0.02904)*x426))+(((-0.33)*gclwh8_5*x379))+(((-0.02904)*x407))+(((0.632)*gclwh6_10*x376))+(((0.33)*gclwh6_5*x390))+(((0.632)*gclwh6_11*x376))+((gclwh12_11*x419))+(((-1.264)*gclwh10_11*x374))+((gclwh6_5*x418))+(((-1.0)*gclwh4_11*x452))+(((1.264)*gclwh8_10*x379)));
op[51]=((((-0.040656)*x488))+(((-0.231)*gclwh8_3*x373))+(((-0.001788864)*x508))+(((0.040656)*x479))+(((-0.462)*gclwh10_3*x374))+(((0.001788864)*x413))+(((0.231)*gclwh10_3*x396))+(((-0.462)*gclwh6_3*x390))+(((0.231)*gclwh6_3*x376))+(((0.040656)*x438))+(((0.001788864)*x506))+(((0.462)*gclwh8_3*x379)));
op[52]=((((-1.0)*gclwh10_11*x383))+(((-0.136)*gclwh10_5*x374))+(((-0.165)*gclwh10_11*x396))+(((0.068)*gclwh8_14*x373))+((gclwh6_11*x418))+((gclwh14_5*x472))+((gclwh10_5*x408))+(((-0.33)*gclwh8_11*x379))+(((0.33)*gclwh10_11*x374))+(((0.33)*gclwh6_11*x390))+(((-0.136)*gclwh6_5*x390))+(((0.165)*gclwh8_10*x373))+(((-1.0)*gclwh12_11*x445))+(((0.33)*gclwh10_10*x374))+(((-1.0)*gclwh8_10*x461))+(((-0.165)*gclwh6_10*x376))+(((-0.068)*gclwh8_5*x373))+(((0.000526592)*gclwh8_5*r20))+((gclwh6_14*x434))+(((-1.0)*gclwh8_11*x461))+(((-0.011968)*gclwh4_5*pz))+(((-1.0)*gclwh12_10*x445))+(((0.011968)*x407))+(((-0.068)*gclwh10_14*x396))+(((0.165)*gclwh8_11*x373))+(((-0.165)*gclwh6_11*x376))+((gclwh6_10*x418))+(((-0.33)*gclwh8_10*x379))+(((-0.068)*gclwh6_14*x376))+(((0.136)*gclwh8_5*x379))+((x390*x470))+(((-1.0)*gclwh10_10*x383))+(((0.068)*gclwh10_5*x396))+(((-1.0)*x379*x458))+((gclwh12_5*x477))+((x374*x375))+(((-0.000526592)*x402))+((gclwh4_11*x474))+(((-0.011968)*x426))+(((-0.165)*gclwh10_10*x396))+(((0.068)*gclwh6_5*x376))+(((0.33)*gclwh6_10*x390))+(((-1.0)*gclwh6_5*x434))+(((-0.011968)*x444))+((gclwh4_10*x474))+(((-0.02904)*x431))+(((-1.0)*gclwh14_10*x439))+(((-1.0)*gclwh10_14*x408)));
op[53]=((((0.031849)*gclwh8_3*x373))+(((-0.00018666912)*x413))+(((-0.00424248)*x479))+(((-0.00018666912)*x506))+(((0.00424248)*x488))+(((-0.016361)*gclwh10_3*x396))+(((-0.031849)*gclwh6_3*x376))+(((0.04821)*gclwh6_3*x390))+(((-1.0)*x610))+x611+(((0.04821)*gclwh10_3*x374))+(((-0.04821)*gclwh8_3*x379))+((gclwh6_3*x455))+(((-0.00424248)*x438)));
op[54]=((((-1.0)*x425*x499))+(((-1.0)*gclwh9_0*npx*x539))+((gclwh13_1*x541))+((gclwh7_9*x376))+(((-1.0)*gclwh7_1*x390*x401))+((gclwh7_0*npy*x539))+((gclwh7_0*pz*x385))+(((-1.0)*x390*x497))+((gclwh9_9*x494))+((gclwh11_9*x396))+(((-1.0)*gclwh9_15*x379*x382))+((gclwh7_15*r22*x416))+(((-0.964512)*gclwh9_1*x379))+(((-0.015488)*rxp0_2*x377))+(((-1.0)*gclwh11_1*x374*x401))+((gclwh15_1*pp*x464))+((gclwh11_15*x374*x382))+((gclwh11_9*x427))+((gclwh13_9*x509))+((gclwh5_0*x545))+(((-1.0)*gclwh5_1*pp*x403))+(((0.084877056)*gclwh5_1*pz))+(((0.964512)*gclwh7_1*x390))+(((0.49)*gclwh9_1*x373))+(((-0.474512)*gclwh11_1*x396))+((x406*x412))+(((-1.0)*gclwh11_1*x486))+((gclwh9_1*x379*x401))+(((-1.0)*x432*x540))+((gclwh9_15*x373*x490))+(((-1.0)*gclwh11_0*x396*x410))+((x379*x380))+((gclwh15_9*x464))+(((-0.49)*gclwh7_1*x376))+(((-0.003734590464)*x432))+(((-1.0)*gclwh11_15*x586))+(((-1.0)*x403*x459))+((gclwh7_1*x544))+(((-1.0)*gclwh7_0*x376*x410))+(((-1.0)*x403*x481))+(((0.003734590464)*gclwh7_1*r21))+(((-1.0)*gclwh5_9*x403))+(((-1.0)*x374*x475))+(((-1.0)*gclwh9_0*r20*x414))+((gclwh9_0*pz*x373))+(((-1.0)*x406*x462))+((gclwh11_1*x543))+(((0.964512)*gclwh11_1*x374))+(((-1.0)*gclwh7_15*x376*x490))+(((-0.084877056)*gclwh15_1*rxp1_2))+((gclwh11_0*npz*x539))+(((-1.0)*gclwh7_9*x385))+(((-0.084877056)*gclwh13_1*rxp0_2))+(((-1.0)*gclwh11_15*x542))+((gclwh7_15*x382*x390))+(((-1.0)*gclwh9_9*x373))+(((-1.0)*gclwh11_0*r22*x414)));
op[55]=(((gclwh11_7*x460))+(((-1.0)*gclwh7_15*x447))+(((-1.0)*gclwh7_7*x447))+(((0.1232)*x462))+(((-0.7)*gclwh9_7*x373))+(((0.7)*gclwh7_15*x376))+(((-1.0)*x374*x442))+((gclwh9_7*x423))+(((-1.4)*gclwh7_7*x390))+(((0.7)*gclwh11_15*x396))+((gclwh11_15*x460))+((gclwh15_7*x495))+(((-1.0)*gclwh5_7*x501))+((gclwh13_7*x424))+((gclwh9_15*x423))+((x379*x381))+(((-1.0)*x390*x449))+(((1.4)*gclwh9_7*x379))+(((-0.7)*gclwh9_15*x373))+(((0.7)*gclwh11_7*x396))+(((-1.4)*gclwh11_7*x374))+(((0.7)*gclwh7_7*x376))+((gclwh13_15*x424))+(((-0.1232)*x412)));
IkReal x612=pz*pz;
IkReal x613=pp*pp;
IkReal x614=r22*r22;
IkReal x615=((0.176)*rxp2_2);
IkReal x616=(pp*r20);
IkReal x617=(pp*r21);
IkReal x618=((0.088)*r22);
IkReal x619=((0.001788864)*r22);
IkReal x620=(npx*pz);
IkReal x621=((0.007744)*r22);
IkReal x622=(npz*pz);
IkReal x623=(gclwh7_1*rxp0_2);
IkReal x624=((0.00127776)*r22);
IkReal x625=((0.111232)*pz);
IkReal x626=(npy*pz);
IkReal x627=((0.000526592)*r20);
IkReal x628=((0.003734590464)*r21);
IkReal x629=(gclwh11_7*pz);
IkReal x630=(gclwh8_10*rxp1_2);
IkReal x631=(gclwh12_14*r21);
IkReal x632=((0.001788864)*r20);
IkReal x633=(gclwh14_14*r20);
IkReal x634=(gclwh6_3*rxp0_2);
IkReal x635=(gclwh15_1*r20);
IkReal x636=((0.176)*r22);
IkReal x637=((0.02904)*rxp0_2);
IkReal x638=((0.02904)*pz);
IkReal x639=(pp*r22);
IkReal x640=((0.00018666912)*r22);
IkReal x641=((0.00127776)*r20);
IkReal x642=((0.00018666912)*r21);
IkReal x643=((0.015488)*r22);
IkReal x644=(gclwh9_15*rxp1_2);
IkReal x645=(gclwh5_0*pz);
IkReal x646=((0.1232)*rxp1_2);
IkReal x647=((0.00127776)*r21);
IkReal x648=((0.111232)*rxp0_2);
IkReal x649=(gclwh15_15*rxp1_2);
IkReal x650=((0.007744)*r20);
IkReal x651=((0.1232)*pz);
IkReal x652=((1.0)*pz);
IkReal x653=((0.011968)*rxp0_2);
IkReal x654=((0.176)*rxp1_2);
IkReal x655=((0.000681472)*r22);
IkReal x656=(gclwh15_15*r20);
IkReal x657=((0.011968)*pz);
IkReal x658=((0.0054208)*r22);
IkReal x659=((2.0)*pp);
IkReal x660=((0.176)*rxp0_2);
IkReal x661=((0.004894208)*r21);
IkReal x662=((0.000526592)*r22);
IkReal x663=((0.004894208)*r22);
IkReal x664=((0.00424248)*rxp1_2);
IkReal x665=(gclwh9_12*rxp1_2);
IkReal x666=(gclwh6_14*rxp0_2);
IkReal x667=((0.0054208)*r20);
IkReal x668=((0.000526592)*r21);
IkReal x669=(gclwh11_1*pz);
IkReal x670=((0.007744)*r21);
IkReal x671=((0.176)*pp);
IkReal x672=((0.00018666912)*r20);
IkReal x673=((0.004894208)*r20);
IkReal x674=(gclwh15_0*pz);
IkReal x675=((0.02904)*rxp1_2);
IkReal x676=(gclwh13_15*r21);
IkReal x677=((0.111232)*rxp1_2);
IkReal x678=((0.176)*pz);
IkReal x679=((0.011968)*rxp1_2);
IkReal x680=((0.001788864)*r21);
IkReal x681=(gclwh5_1*pz);
IkReal x682=(gclwh5_1*r22);
IkReal x683=((0.0054208)*r21);
IkReal x684=(gclwh4_3*r22);
IkReal x685=(gclwh4_2*pz);
IkReal x686=(gclwh9_0*pz);
IkReal x687=(gclwh10_3*pz);
IkReal x688=(gclwh13_1*rxp0_2);
IkReal x689=((0.003734590464)*r20);
IkReal x690=((0.084877056)*rxp1_2);
IkReal x691=((0.1232)*rxp0_2);
IkReal x692=((0.040656)*rxp1_2);
IkReal x693=(gclwh12_8*x617);
IkReal x694=(gclwh14_8*x650);
IkReal x695=(gclwh4_8*x621);
IkReal x696=(gclwh8_8*x654);
IkReal x697=(gclwh12_8*x670);
IkReal x698=(gclwh6_8*x660);
IkReal x699=(gclwh10_8*x678);
IkReal x700=(gclwh15_9*x650);
IkReal x701=(gclwh13_9*x617);
IkReal x702=(gclwh13_9*x670);
IkReal x703=(gclwh11_9*x678);
IkReal x704=(gclwh7_9*x660);
IkReal x705=(gclwh5_9*x621);
IkReal x706=(gclwh9_9*x654);
IkReal x707=(pz*x670);
IkReal x708=((2.0)*x612);
IkReal x709=(pz*x650);
IkReal x710=((0.176)*x612);
IkReal x711=((0.000681472)*x614);
IkReal x712=((1.0)*x613);
IkReal x713=(r21*x613);
IkReal x714=(x633*x655);
IkReal x715=(gclwh14_2*pz*x616);
IkReal x716=(gclwh12_3*x713);
IkReal x717=(gclwh1_2*pz*x616);
IkReal x718=(gclwh1_2*x709);
IkReal x719=(gclwh3_2*pz*x617);
IkReal x720=(gclwh6_2*pz*x660);
IkReal x721=(gclwh3_2*x707);
IkReal x722=(gclwh8_2*pz*x654);
IkReal x723=((2.0)*gclwh14_8*x620);
IkReal x724=(x621*x685);
IkReal x725=((2.0)*gclwh4_8*x622);
IkReal x726=(gclwh12_2*x707);
IkReal x727=(x639*x685);
IkReal x728=(gclwh10_2*x710);
IkReal x729=(gclwh10_14*pz*x643);
IkReal x730=((1.0)*gclwh14_8*x616);
IkReal x731=(x671*x687);
IkReal x732=(gclwh8_14*rxp1_2*x643);
IkReal x733=(x631*x655);
IkReal x734=((2.0)*gclwh12_8*x626);
IkReal x735=(gclwh8_3*pp*x654);
IkReal x736=(x634*x671);
IkReal x737=(x643*x666);
IkReal x738=(gclwh14_2*x709);
IkReal x739=((1.0)*gclwh4_8*x639);
IkReal x740=(gclwh4_14*x711);
IkReal x741=((2.0)*gclwh15_9*x620);
IkReal x742=(x655*x676);
IkReal x743=((2.0)*gclwh5_9*x622);
IkReal x744=(x616*x674);
IkReal x745=(gclwh13_1*x713);
IkReal x746=(gclwh7_15*rxp0_2*x643);
IkReal x747=(x639*x645);
IkReal x748=(gclwh5_15*x711);
IkReal x749=(x643*x644);
IkReal x750=(gclwh7_0*pz*x660);
IkReal x751=(x621*x645);
IkReal x752=(gclwh13_0*x707);
IkReal x753=(gclwh11_0*x710);
IkReal x754=(gclwh2_1*x713);
IkReal x755=(gclwh11_15*pz*x643);
IkReal x756=(x654*x686);
IkReal x757=(gclwh0_1*r20*x613);
IkReal x758=(x655*x656);
IkReal x759=((1.0)*gclwh5_9*x639);
IkReal x760=((2.0)*gclwh13_9*x626);
IkReal x761=(gclwh0_0*x709);
IkReal x762=(x669*x671);
IkReal x763=(gclwh9_1*pp*x654);
IkReal x764=(gclwh2_0*x707);
IkReal x765=(x623*x671);
IkReal x766=(x650*x674);
IkReal x767=((1.0)*gclwh15_9*x616);
IkReal x768=(r20*x712);
IkReal x769=((0.088)*pp*x614);
IkReal x770=(gclwh12_2*npy*x708);
IkReal x771=(gclwh4_3*x622*x659);
IkReal x772=(gclwh4_14*x622*x636);
IkReal x773=(gclwh3_3*x626*x659);
IkReal x774=(gclwh14_14*x620*x636);
IkReal x775=(gclwh14_3*x620*x659);
IkReal x776=(gclwh1_3*x620*x659);
IkReal x777=(gclwh12_14*x617*x618);
IkReal x778=(gclwh3_2*npy*x708);
IkReal x779=(gclwh12_2*x617*x652);
IkReal x780=(gclwh1_2*npx*x708);
IkReal x781=(gclwh12_14*x626*x636);
IkReal x782=(gclwh3_3*r21*x712);
IkReal x783=(gclwh14_14*x616*x618);
IkReal x784=(gclwh4_2*npz*x708);
IkReal x785=(gclwh4_14*x769);
IkReal x786=(x684*x712);
IkReal x787=(gclwh12_3*x626*x659);
IkReal x788=(gclwh14_2*npx*x708);
IkReal x789=(gclwh1_3*x768);
IkReal x790=(gclwh14_3*x768);
IkReal x791=(gclwh0_0*npx*x708);
IkReal x792=(gclwh2_0*npy*x708);
IkReal x793=(gclwh13_15*x626*x636);
IkReal x794=(gclwh13_0*npy*x708);
IkReal x795=(gclwh5_1*x622*x659);
IkReal x796=(gclwh15_15*x616*x618);
IkReal x797=(gclwh5_15*x769);
IkReal x798=(gclwh15_1*x620*x659);
IkReal x799=(gclwh2_1*x626*x659);
IkReal x800=(gclwh13_15*x617*x618);
IkReal x801=(gclwh0_1*x620*x659);
IkReal x802=(gclwh15_15*x620*x636);
IkReal x803=(gclwh5_0*npz*x708);
IkReal x804=(gclwh5_15*x622*x636);
IkReal x805=(gclwh13_1*x626*x659);
IkReal x806=(x635*x712);
IkReal x807=(gclwh0_0*x616*x652);
IkReal x808=(gclwh2_0*x617*x652);
IkReal x809=(gclwh15_0*npx*x708);
IkReal x810=(x682*x712);
IkReal x811=(gclwh13_0*x617*x652);
IkReal x812=(x694+x693+x719+x718+x715+x714+x717+x716+x720+x721+x722+x723+x724+x725+x726+x727+x728+x773+x772+x771+x770+x777+x776+x775+x774);
IkReal x813=(x615+x700+x701+x755+x754+x757+x756+x751+x750+x753+x752+x746+x747+x744+x745+x742+x743+x741+x748+x749+x791+x793+x792+x795+x794+x797+x796+x798);
IkReal x814=(x702+x703+x706+x704+x705+x759+x758+x764+x765+x766+x767+x760+x761+x762+x763+x799+x810+x811+x809+x808+x805+x804+x807+x806+x801+x800+x803+x802);
IkReal x815=(x615+x695+x696+x697+x698+x699+x737+x736+x735+x734+x733+x732+x731+x730+x739+x738+x729+x740+x779+x778+x790+x782+x783+x780+x781+x786+x787+x784+x785+x788+x789);
op[56]=((((0.462)*gclwh9_1*x620))+((gclwh15_1*x692))+(((-0.462)*gclwh11_1*x622))+(((-0.462)*gclwh7_1*x626))+(((-0.040656)*x681))+(((0.231)*gclwh11_1*x639))+(((0.231)*gclwh7_1*x617))+((gclwh11_1*x619))+(((-1.0)*gclwh7_1*x680))+((gclwh9_1*x632))+(((-0.231)*gclwh9_1*x616))+(((0.040656)*x688)));
op[57]=((((-0.02904)*x649))+(((-0.632)*gclwh11_12*x639))+(((0.165)*gclwh9_7*x616))+(((-1.0)*gclwh15_12*x677))+((gclwh5_12*x625))+((gclwh5_15*x638))+(((-1.0)*gclwh15_7*x675))+((gclwh11_13*x663))+(((0.33)*gclwh7_15*x626))+(((-0.33)*gclwh9_15*x620))+(((-0.165)*gclwh7_7*x617))+(((-1.0)*gclwh11_15*x624))+(((-0.632)*gclwh9_13*x616))+(((0.632)*gclwh11_13*x639))+((gclwh7_12*x661))+((gclwh15_13*x677))+(((0.632)*gclwh7_13*x617))+(((-1.264)*gclwh7_13*x626))+(((0.165)*gclwh9_15*x616))+(((-1.0)*gclwh9_7*x641))+(((1.264)*gclwh11_12*x622))+(((1.264)*gclwh7_12*x626))+(((-1.0)*gclwh7_13*x661))+(((-1.0)*gclwh11_7*x624))+(((-0.165)*gclwh11_7*x639))+(((-1.0)*gclwh9_15*x641))+((gclwh9_13*x673))+((gclwh13_13*x648))+(((0.632)*gclwh9_12*x616))+((gclwh7_15*x647))+(((-1.0)*gclwh13_15*x637))+(((0.33)*gclwh11_15*x622))+(((-0.632)*gclwh7_12*x617))+(((1.264)*gclwh9_13*x620))+(((-0.33)*gclwh9_7*x620))+(((-1.264)*gclwh11_13*x622))+(((-1.264)*gclwh9_12*x620))+(((-1.0)*gclwh11_12*x663))+(((-0.165)*gclwh11_15*x639))+(((-0.165)*gclwh7_15*x617))+((gclwh5_7*x638))+((gclwh7_7*x647))+(((-1.0)*gclwh9_12*x673))+(((0.33)*gclwh7_7*x626))+(((0.33)*gclwh11_7*x622))+(((-1.0)*gclwh13_12*x648))+(((-1.0)*gclwh13_7*x637))+(((-1.0)*gclwh5_13*x625)));
op[58]=(((gclwh7_9*x617))+((gclwh9_9*x650))+(((-1.0)*gclwh13_15*rxp0_2*x643))+(((-1.0)*gclwh7_9*x670))+((x616*x686))+(((-1.0)*gclwh13_0*pz*x660))+((gclwh7_1*x642))+((gclwh9_15*x616*x618))+(((-1.0)*gclwh11_0*pz*x621))+(((-1.0)*gclwh9_15*x620*x636))+(((-1.0)*gclwh9_15*r20*x655))+((gclwh9_1*x620*x659))+((gclwh15_9*x654))+(((-1.0)*gclwh7_0*x617*x652))+(((-1.0)*gclwh11_0*x639*x652))+((gclwh13_9*x660))+(((-1.0)*gclwh11_15*x711))+(((-2.0)*gclwh11_9*x622))+(((-1.0)*x654*x674))+(((0.00424248)*x681))+(((2.0)*gclwh9_9*x620))+(((-1.0)*gclwh9_0*npx*x708))+(((-0.00424248)*x688))+((gclwh7_15*x626*x636))+((gclwh13_1*pp*x660))+(((-2.0)*gclwh7_9*x626))+(((-1.0)*gclwh9_1*x768))+(((-1.0)*gclwh9_1*x672))+(((-0.016361)*gclwh11_1*x639))+(((0.031849)*gclwh9_1*x616))+((gclwh11_0*npz*x708))+(((-1.0)*x650*x686))+((gclwh7_1*x713))+(((-0.04821)*gclwh9_1*x620))+((gclwh7_0*x707))+((gclwh7_15*r21*x655))+((gclwh5_0*x710))+((gclwh15_1*pp*x654))+(((-1.0)*gclwh11_1*x622*x659))+(((-1.0)*gclwh15_1*x664))+(((-1.0)*gclwh7_15*x617*x618))+((gclwh7_0*npy*x708))+(((0.04821)*gclwh7_1*x626))+(((-1.0)*x643*x649))+(((-0.031849)*gclwh7_1*x617))+(((-1.0)*gclwh11_15*x769))+(((-1.0)*gclwh11_1*x640))+((gclwh11_9*x621))+((gclwh5_15*pz*x643))+(((-1.0)*gclwh9_9*x616))+((gclwh11_9*x639))+(((-1.0)*gclwh7_1*x626*x659))+(((0.04821)*gclwh11_1*x622))+(((-1.0)*gclwh5_9*x678))+((gclwh11_15*x622*x636))+((gclwh11_1*r22*x613))+(((-1.0)*x671*x681)));
op[59]=(((gclwh5_13*x638))+(((-1.0)*gclwh5_15*x657))+(((-1.0)*gclwh15_13*x675))+(((0.33)*gclwh11_13*x622))+(((-0.068)*gclwh9_15*x616))+(((-1.0)*gclwh7_12*x647))+((gclwh15_7*x679))+(((0.068)*gclwh11_15*x639))+(((-1.0)*gclwh5_12*x638))+((gclwh13_15*x653))+(((-1.0)*gclwh7_7*x668))+(((-0.33)*gclwh11_12*x622))+(((0.136)*gclwh9_15*x620))+(((-1.0)*gclwh13_13*x637))+(((-0.165)*gclwh11_13*x639))+((gclwh9_7*x627))+(((-0.068)*gclwh9_7*x616))+(((0.011968)*x649))+(((-1.0)*gclwh11_13*x624))+(((0.136)*gclwh9_7*x620))+(((-0.33)*gclwh9_13*x620))+(((-0.33)*gclwh7_12*x626))+((gclwh15_12*x675))+((gclwh11_12*x624))+(((0.068)*gclwh7_15*x617))+(((0.165)*gclwh11_12*x639))+((gclwh11_15*x662))+((gclwh9_15*x627))+(((-0.165)*gclwh7_13*x617))+(((-0.136)*gclwh7_15*x626))+(((0.068)*gclwh11_7*x639))+((gclwh9_12*x641))+(((-0.136)*gclwh11_7*x622))+((gclwh7_13*x647))+((gclwh13_7*x653))+(((0.33)*gclwh9_12*x620))+((gclwh13_12*x637))+(((0.165)*gclwh7_12*x617))+(((-1.0)*gclwh5_7*x657))+(((-0.136)*gclwh7_7*x626))+((gclwh11_7*x662))+(((-0.165)*gclwh9_12*x616))+(((0.165)*gclwh9_13*x616))+(((0.33)*gclwh7_13*x626))+(((-0.136)*gclwh11_15*x622))+(((-1.0)*gclwh7_15*x668))+(((0.068)*gclwh7_7*x617))+(((-1.0)*gclwh9_13*x641)));
op[60]=((((-1.4)*gclwh4_14*x622))+(((-1.0)*gclwh10_5*x651))+(((0.7)*gclwh4_14*x639))+((gclwh4_14*x658))+(((-0.7)*gclwh4_5*x639))+(((-0.7)*gclwh12_14*x617))+((gclwh10_14*x651))+(((-1.4)*gclwh12_5*x626))+(((-1.0)*gclwh8_5*x646))+(((-1.0)*gclwh12_5*x683))+(((1.4)*gclwh4_5*x622))+(((-1.4)*gclwh14_14*x620))+(((-0.7)*gclwh14_5*x616))+(((-0.0054208)*x633))+(((-1.0)*gclwh4_5*x658))+(((0.1232)*x666))+((gclwh8_14*x646))+(((-1.0)*gclwh6_5*x691))+(((1.4)*gclwh12_14*x626))+(((1.4)*gclwh14_5*x620))+(((0.7)*gclwh14_14*x616))+((gclwh14_5*x667))+(((0.7)*gclwh12_5*x617))+(((0.0054208)*x631)));
op[61]=((0.49)+(((0.474512)*gclwh1_3*x616))+(((-0.964512)*gclwh3_3*x626))+(((0.49)*gclwh14_3*x616))+(((-1.0)*x815))+(((0.003734590464)*x684))+((gclwh8_3*x690))+(((0.474512)*gclwh3_3*x617))+(((0.964512)*gclwh12_3*x626))+(((-0.49)*gclwh12_3*x617))+((gclwh1_3*x689))+(((-0.964512)*gclwh4_3*x622))+((gclwh12_3*x628))+x812+(((0.474512)*gclwh4_3*x639))+(((0.084877056)*x687))+(((-0.964512)*gclwh14_3*x620))+(((-1.0)*gclwh14_3*x689))+(((-0.964512)*gclwh1_3*x620))+((gclwh3_3*x628))+(((0.084877056)*x634)));
op[62]=((((-1.0)*gclwh12_10*x661))+(((1.264)*gclwh4_10*x622))+(((1.264)*gclwh14_11*x620))+(((1.264)*gclwh14_10*x620))+(((-0.632)*gclwh14_10*x616))+(((-0.632)*gclwh4_11*x639))+(((-1.0)*gclwh6_11*x648))+(((0.632)*gclwh12_11*x617))+(((-1.0)*gclwh8_14*x675))+(((-0.00127776)*x631))+(((-0.165)*gclwh14_14*x616))+(((-0.165)*gclwh4_14*x639))+(((-0.33)*gclwh14_5*x620))+((gclwh6_5*x637))+(((-0.632)*gclwh14_11*x616))+(((0.632)*gclwh12_10*x617))+(((-0.632)*gclwh4_10*x639))+(((-1.0)*gclwh10_11*x625))+(((0.165)*gclwh14_5*x616))+(((-1.0)*gclwh4_11*x663))+(((0.165)*gclwh12_14*x617))+(((-0.33)*gclwh12_14*x626))+(((-0.111232)*x630))+(((-1.0)*gclwh8_11*x677))+((gclwh14_10*x673))+(((0.00127776)*x633))+((gclwh14_11*x673))+((gclwh4_5*x624))+(((1.264)*gclwh4_11*x622))+(((-1.264)*gclwh12_11*x626))+(((-1.0)*gclwh4_14*x624))+((gclwh12_5*x647))+(((-0.165)*gclwh12_5*x617))+(((-1.0)*gclwh4_10*x663))+((gclwh8_5*x675))+(((-1.0)*gclwh10_14*x638))+(((-1.0)*gclwh12_11*x661))+(((-1.0)*gclwh10_10*x625))+((gclwh10_5*x638))+(((-1.0)*gclwh14_5*x641))+(((-1.0)*gclwh6_14*x637))+(((0.33)*gclwh4_14*x622))+(((0.33)*gclwh14_14*x620))+(((0.165)*gclwh4_5*x639))+(((0.33)*gclwh12_5*x626))+(((-1.264)*gclwh12_10*x626))+(((-1.0)*gclwh6_10*x648))+(((-0.33)*gclwh4_5*x622)));
op[63]=((-0.231)+(((-0.462)*gclwh12_3*x626))+(((0.462)*gclwh4_3*x622))+(((-1.0)*gclwh4_3*x619))+(((-0.231)*gclwh4_3*x639))+(((0.462)*gclwh1_3*x620))+(((-1.0)*gclwh8_3*x692))+(((0.462)*gclwh14_3*x620))+(((-0.040656)*x687))+(((-0.231)*gclwh1_3*x616))+(((-1.0)*gclwh3_3*x680))+(((0.231)*gclwh12_3*x617))+(((-0.231)*gclwh14_3*x616))+(((-0.040656)*x634))+(((-1.0)*gclwh1_3*x632))+(((-0.231)*gclwh3_3*x617))+(((-1.0)*gclwh12_3*x680))+(((0.462)*gclwh3_3*x626))+((gclwh14_3*x632)));
op[64]=((((-0.165)*gclwh12_10*x617))+(((-0.33)*gclwh4_10*x622))+(((0.165)*gclwh4_11*x639))+(((-0.165)*gclwh12_11*x617))+(((-0.136)*gclwh12_5*x626))+(((-1.0)*gclwh10_5*x657))+(((0.068)*gclwh12_5*x617))+(((0.136)*gclwh14_5*x620))+(((-0.33)*gclwh14_10*x620))+(((-1.0)*gclwh6_5*x653))+(((0.33)*gclwh12_11*x626))+(((-0.068)*gclwh4_5*x639))+(((-0.33)*gclwh14_11*x620))+(((0.136)*gclwh12_14*x626))+((gclwh10_14*x657))+((gclwh8_14*x679))+((gclwh10_10*x638))+(((0.165)*gclwh14_11*x616))+((gclwh12_10*x647))+((gclwh10_11*x638))+(((0.165)*gclwh4_10*x639))+((gclwh4_10*x624))+((gclwh6_11*x637))+(((-1.0)*gclwh4_5*x662))+((gclwh8_11*x675))+((gclwh4_11*x624))+((gclwh4_14*x662))+(((-0.136)*gclwh4_14*x622))+(((-0.068)*gclwh14_5*x616))+((gclwh6_14*x653))+(((0.136)*gclwh4_5*x622))+(((-1.0)*gclwh14_14*x627))+(((0.165)*gclwh14_10*x616))+(((0.068)*gclwh14_14*x616))+(((0.000526592)*x631))+(((-1.0)*gclwh12_5*x668))+((gclwh14_5*x627))+(((-0.136)*gclwh14_14*x620))+(((-1.0)*gclwh8_5*x679))+(((0.33)*gclwh12_10*x626))+((gclwh12_11*x647))+(((-0.33)*gclwh4_11*x622))+((gclwh6_10*x637))+(((0.068)*gclwh4_14*x639))+(((-1.0)*gclwh14_10*x641))+(((-1.0)*gclwh14_11*x641))+(((-0.068)*gclwh12_14*x617))+(((0.02904)*x630)));
op[65]=((0.031849)+(((0.016361)*gclwh1_3*x616))+(((0.016361)*gclwh4_3*x639))+(((-0.04821)*gclwh4_3*x622))+((gclwh12_3*x642))+(((-0.04821)*gclwh1_3*x620))+(((0.00424248)*x687))+((gclwh1_3*x672))+(((-0.04821)*gclwh14_3*x620))+(((-1.0)*x815))+(((0.00424248)*x634))+((gclwh4_3*x640))+((gclwh8_3*x664))+(((-0.031849)*gclwh12_3*x617))+(((0.04821)*gclwh12_3*x626))+(((-0.04821)*gclwh3_3*x626))+x812+((gclwh3_3*x642))+(((0.031849)*gclwh14_3*x616))+(((0.016361)*gclwh3_3*x617))+(((-1.0)*gclwh14_3*x672)));
op[66]=((0.49)+(((-0.003734590464)*x635))+(((0.084877056)*x623))+(((0.964512)*gclwh13_1*x626))+((gclwh13_1*x628))+(((-1.0)*gclwh0_1*x689))+(((-0.474512)*gclwh0_1*x616))+(((0.964512)*gclwh2_1*x626))+(((-0.49)*gclwh13_1*x617))+(((0.474512)*gclwh5_1*x639))+((gclwh9_1*x690))+(((-1.0)*x814))+(((0.964512)*gclwh0_1*x620))+(((0.003734590464)*x682))+(((0.084877056)*x669))+(((-0.964512)*gclwh15_1*x620))+(((-0.964512)*gclwh5_1*x622))+(((0.49)*gclwh15_1*x616))+x813+(((-0.474512)*gclwh2_1*x617))+(((-1.0)*gclwh2_1*x628)));
op[67]=((((-1.0)*gclwh5_15*x658))+(((-1.4)*gclwh13_7*x626))+(((-1.0)*gclwh11_15*x651))+(((1.4)*gclwh5_15*x622))+(((-1.0)*gclwh9_7*x646))+(((0.7)*gclwh13_15*x617))+(((1.4)*gclwh5_7*x622))+(((0.7)*gclwh13_7*x617))+(((-0.7)*gclwh5_15*x639))+(((-0.7)*gclwh15_7*x616))+((gclwh15_7*x667))+(((-0.7)*gclwh5_7*x639))+(((-1.0)*gclwh5_7*x658))+(((-0.1232)*x644))+(((-1.4)*gclwh13_15*x626))+(((-0.0054208)*x676))+(((-1.0)*gclwh7_7*x691))+(((-1.0)*gclwh13_7*x683))+(((1.4)*gclwh15_15*x620))+(((0.0054208)*x656))+(((-1.0)*gclwh7_15*x691))+(((1.4)*gclwh15_7*x620))+(((-0.1232)*x629))+(((-0.7)*gclwh15_15*x616)));
op[68]=((-0.231)+(((0.462)*gclwh5_1*x622))+(((0.231)*gclwh2_1*x617))+((gclwh0_1*x632))+(((0.231)*gclwh13_1*x617))+(((0.462)*gclwh15_1*x620))+(((-0.231)*gclwh15_1*x616))+((gclwh15_1*x632))+(((-0.462)*gclwh13_1*x626))+(((-0.231)*gclwh5_1*x639))+(((0.231)*gclwh0_1*x616))+((gclwh2_1*x680))+(((-0.040656)*x623))+(((-1.0)*gclwh13_1*x680))+(((-1.0)*gclwh5_1*x619))+(((-0.462)*gclwh2_1*x626))+(((-1.0)*gclwh9_1*x692))+(((-0.040656)*x669))+(((-0.462)*gclwh0_1*x620)));
op[69]=((((0.33)*gclwh13_15*x626))+(((-1.264)*gclwh15_12*x620))+(((-1.264)*gclwh13_13*x626))+(((0.33)*gclwh13_7*x626))+(((-0.33)*gclwh15_7*x620))+(((-1.0)*gclwh15_12*x673))+((gclwh11_15*x638))+(((1.264)*gclwh13_12*x626))+((gclwh5_15*x624))+((gclwh13_12*x661))+(((-0.632)*gclwh5_13*x639))+(((0.165)*gclwh5_15*x639))+(((-1.0)*gclwh7_13*x648))+(((-0.165)*gclwh13_7*x617))+(((-1.0)*gclwh5_13*x663))+(((0.632)*gclwh13_13*x617))+(((0.165)*gclwh5_7*x639))+((gclwh15_13*x673))+((gclwh7_7*x637))+(((1.264)*gclwh15_13*x620))+(((-1.0)*gclwh11_13*x625))+(((1.264)*gclwh5_13*x622))+(((-0.632)*gclwh15_13*x616))+((gclwh11_12*x625))+(((-1.0)*gclwh9_13*x677))+(((-0.33)*gclwh15_15*x620))+((gclwh5_12*x663))+(((-1.264)*gclwh5_12*x622))+(((-1.0)*gclwh15_7*x641))+(((-1.0)*gclwh13_13*x661))+((gclwh13_7*x647))+(((-0.165)*gclwh13_15*x617))+(((0.632)*gclwh15_12*x616))+(((-0.632)*gclwh13_12*x617))+(((0.111232)*x665))+((gclwh7_12*x648))+(((0.02904)*x644))+(((-0.33)*gclwh5_15*x622))+(((0.632)*gclwh5_12*x639))+(((0.165)*gclwh15_15*x616))+((gclwh5_7*x624))+((gclwh13_15*x647))+(((-1.0)*gclwh15_15*x641))+(((0.02904)*x629))+((gclwh7_15*x637))+(((-0.33)*gclwh5_7*x622))+((gclwh9_7*x675))+(((0.165)*gclwh15_7*x616)));
op[70]=((0.031849)+((gclwh9_1*x664))+(((-1.0)*gclwh0_1*x672))+(((0.016361)*gclwh5_1*x639))+(((-1.0)*gclwh2_1*x642))+(((0.04821)*gclwh0_1*x620))+(((-1.0)*x814))+(((0.00424248)*x623))+(((-0.04821)*gclwh15_1*x620))+((gclwh13_1*x642))+(((0.04821)*gclwh13_1*x626))+(((-0.031849)*gclwh13_1*x617))+((gclwh5_1*x640))+(((-0.00018666912)*x635))+x813+(((0.031849)*gclwh15_1*x616))+(((0.00424248)*x669))+(((-0.04821)*gclwh5_1*x622))+(((-0.016361)*gclwh0_1*x616))+(((0.04821)*gclwh2_1*x626))+(((-0.016361)*gclwh2_1*x617)));
op[71]=((((-1.0)*gclwh5_12*x624))+(((-0.011968)*x644))+((gclwh5_13*x624))+(((0.136)*gclwh15_7*x620))+(((0.068)*gclwh13_7*x617))+(((-1.0)*gclwh11_15*x657))+(((0.136)*gclwh5_15*x622))+(((-1.0)*gclwh11_12*x638))+(((-0.068)*gclwh15_7*x616))+(((-0.165)*gclwh13_13*x617))+(((-0.33)*gclwh13_12*x626))+((gclwh15_15*x627))+(((0.068)*gclwh13_15*x617))+(((0.165)*gclwh15_13*x616))+((gclwh15_7*x627))+((gclwh11_13*x638))+(((0.165)*gclwh5_13*x639))+(((-0.02904)*x665))+(((-1.0)*gclwh15_13*x641))+(((-1.0)*gclwh13_7*x668))+(((-0.068)*gclwh5_7*x639))+(((-0.136)*gclwh13_15*x626))+(((0.165)*gclwh13_12*x617))+(((0.136)*gclwh15_15*x620))+((gclwh9_13*x675))+(((-0.068)*gclwh15_15*x616))+(((-0.33)*gclwh5_13*x622))+((gclwh13_13*x647))+(((0.136)*gclwh5_7*x622))+(((-0.165)*gclwh5_12*x639))+(((0.33)*gclwh13_13*x626))+(((-1.0)*gclwh7_7*x653))+(((0.33)*gclwh15_12*x620))+((gclwh7_13*x637))+(((-0.136)*gclwh13_7*x626))+(((-1.0)*gclwh5_15*x662))+(((0.33)*gclwh5_12*x622))+((gclwh15_12*x641))+(((-0.011968)*x629))+(((-0.33)*gclwh15_13*x620))+(((-1.0)*gclwh7_15*x653))+(((-1.0)*gclwh5_7*x662))+(((-1.0)*gclwh9_7*x679))+(((-1.0)*gclwh7_12*x637))+(((-0.165)*gclwh15_12*x616))+(((-0.068)*gclwh5_15*x639))+(((-1.0)*gclwh13_12*x647))+(((-1.0)*gclwh13_15*x668)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16], j4array[16], cj4array[16], sj4array[16];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ij2 += 3)
{
IkReal htj2 = zeror[ij2+0], htj3 = zeror[ij2+1], htj4 = zeror[ij2+2];
if(isnan(htj2)||isnan(htj3)||isnan(htj4)){
continue;
}
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
j4array[numsolutions]=((2.0)*(atan(htj4)));
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x816=htj2*htj2;
CheckValue<IkReal> x817=IKPowWithIntegerCheck(((1.0)+x816),-1);
if(!x817.valid){
continue;
}
cj2array[numsolutions]=((x817.value)*(((1.0)+(((-1.0)*x816)))));
CheckValue<IkReal> x818=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x818.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x818.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x819=htj3*htj3;
CheckValue<IkReal> x820=IKPowWithIntegerCheck(((1.0)+x819),-1);
if(!x820.valid){
continue;
}
cj3array[numsolutions]=((x820.value)*(((1.0)+(((-1.0)*x819)))));
CheckValue<IkReal> x821=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x821.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x821.value));
}
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x822=htj4*htj4;
CheckValue<IkReal> x823=IKPowWithIntegerCheck(((1.0)+x822),-1);
if(!x823.valid){
continue;
}
cj4array[numsolutions]=((x823.value)*(((1.0)+(((-1.0)*x822)))));
CheckValue<IkReal> x824=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x824.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x824.value));
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j2valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj2 = 16;
_nj3 = 1;
_nj4 = 1;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
_ij4[0] = 0; _ij4[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( !j2valid[iij2] ) { continue; }
if( IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij2]-cj3array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij2]-sj3array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(cj4array[ij2]-cj4array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij2]-sj4array[iij2]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j2valid[iij2]=false; _ij2[1] = iij2; _ij3[1] = 0; _ij4[1] = 0;  break; 
}
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

    j3 = j3array[ij2]; cj3 = cj3array[ij2]; sj3 = sj3array[ij2];

    j4 = j4array[ij2]; cj4 = cj4array[ij2]; sj4 = sj4array[ij2];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+3, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+5, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+4, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    // sort roots hoping that it solution indices become more robust to slight change in coeffs
    std::sort(roots, roots+6, ComplexLess<IkReal>());

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && (abs(imag(roots[i])-imag(roots[j])) < 0.002 || abs(imag(roots[i])+imag(roots[j])) < 0.002) && abs(imag(roots[i])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j6eval[2];
j6eval[0]=((r20*r20)+(r21*r21));
j6eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
IkReal x825=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x825);
rxp1_0=(pz*r11);
rxp1_1=(r01*x825);
j5eval[0]=r22;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x826=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x826);
rxp1_0=(pz*r11);
rxp1_1=(r01*x826);
j5eval[0]=cj4;
j5eval[1]=r22;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x829=IKPowWithIntegerCheck(r22,-1);
if(!x829.valid){
continue;
}
IkReal x827=x829.value;
IkReal x828=(sj2*x827);
CheckValue<IkReal> x830=IKPowWithIntegerCheck(cj4,-1);
if(!x830.valid){
continue;
}
if( IKabs((cj3*x828*(x830.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj3*x828)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj3*x828*(x830.value)))+IKsqr((sj3*x828))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((cj3*x828*(x830.value)), (sj3*x828));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x831=IKsin(j5);
IkReal x832=((1.0)*r22*x831);
evalcond[0]=(cj2+(((-1.0)*sj4*x832)));
evalcond[1]=(((r22*(IKcos(j5))))+(((-1.0)*sj2*sj3)));
evalcond[2]=((((-1.0)*cj4*x832))+((cj3*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[6+1], zeror[6];
int numroots;
IkReal j6evalpoly[1];
IkReal x833=sj2*sj2;
IkReal x834=((16.0)*cj5);
IkReal x835=(r02*sj5);
IkReal x836=((8.0)*cj5);
IkReal x837=(cj3*sj2*sj4);
IkReal x838=(r12*sj4*sj5);
IkReal x839=(cj3*cj4*sj2);
IkReal x840=((4.0)*cj2*sj2*sj3);
IkReal x841=(cj5*r12*x833);
IkReal x842=(r11*sj5*x833);
IkReal x843=((4.0)*r10*sj5*x833);
IkReal x844=((4.0)*r01*x839);
IkReal x845=((12.0)*x841);
IkReal x846=((4.0)*x841);
IkReal x847=(cj2*r11*sj2*sj3*sj4);
IkReal x848=(cj2*cj4*r10*sj2*sj3);
IkReal x849=(cj4*r11*x840);
IkReal x850=((12.0)*x835*x837);
IkReal x851=((4.0)*cj5*r00*x837);
IkReal x852=((4.0)*x835*x837);
IkReal x853=(cj5*r10*sj4*x840);
IkReal x854=((12.0)*cj2*sj2*sj3*x838);
IkReal x855=(x838*x840);
IkReal x856=(x853+x851);
IkReal x857=(x843+x844+x849);
IkReal x858=(x852+x855+x846);
IkReal x859=(x850+x854+x845);
IkReal x860=((((8.0)*x842))+(((-1.0)*x836*x847))+(((-8.0)*x848))+(((-1.0)*r01*x836*x837))+(((-8.0)*r00*x839)));
op[0]=((((-1.0)*x856))+x857+x858);
op[1]=x860;
op[2]=((((-1.0)*x856))+x857+x859);
op[3]=((((16.0)*x842))+(((-1.0)*r01*x834*x837))+(((-1.0)*x834*x847))+(((-16.0)*r00*x839))+(((-16.0)*x848)));
op[4]=((((-1.0)*x857))+x856+x859);
op[5]=x860;
op[6]=((((-1.0)*x857))+x856+x858);
polyroots6(op,zeror,numroots);
IkReal j6array[6], cj6array[6], sj6array[6], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[6]={true,true,true,true,true,true};
_nj6 = 6;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

IkReal x861=sj2*sj2;
IkReal x862=(sj2*sj4);
IkReal x863=(cj2*sj3);
IkReal x864=(r02*sj5);
IkReal x865=((4.0)*cj5);
IkReal x866=(cj3*r10);
IkReal x867=((4.0)*cj3);
IkReal x868=(cj4*sj2);
IkReal x869=(r12*sj5);
IkReal x870=((8.0)*r01);
IkReal x871=((16.0)*r01);
IkReal x872=(cj3*cj5*r11);
IkReal x873=(r00*x868);
IkReal x874=(r02*x861);
IkReal x875=(sj5*x861);
IkReal x876=((4.0)*r00*x875);
IkReal x877=(r11*x867*x868);
IkReal x878=(x865*x874);
IkReal x879=((12.0)*cj5*x874);
IkReal x880=((4.0)*r01*x863*x868);
IkReal x881=(x862*x865*x866);
IkReal x882=((12.0)*cj3*x862*x869);
IkReal x883=(x862*x867*x869);
IkReal x884=((4.0)*x862*x863*x864);
IkReal x885=(r00*x862*x863*x865);
IkReal x886=((12.0)*x862*x863*x864);
IkReal x887=(x877+x885);
IkReal x888=(x879+x886);
IkReal x889=(x878+x884);
IkReal x890=(x876+x881+x880);
IkReal x891=(((x870*x875))+(((8.0)*x862*x872))+(((-8.0)*x863*x873))+(((8.0)*x866*x868))+(((-1.0)*cj5*x862*x863*x870)));
j6evalpoly[0]=((((htj6*htj6*htj6)*((((x871*x875))+(((-16.0)*x863*x873))+(((16.0)*x862*x872))+(((16.0)*x866*x868))+(((-1.0)*cj5*x862*x863*x871))))))+(((htj6*htj6*htj6*htj6*htj6*htj6)*(((((-1.0)*x883))+(((-1.0)*x887))+x889+x890))))+(((-1.0)*x890))+(((-1.0)*x883))+((x891*(htj6*htj6*htj6*htj6*htj6)))+(((htj6*htj6*htj6*htj6)*(((((-1.0)*x882))+(((-1.0)*x887))+x888+x890))))+((htj6*x891))+(((htj6*htj6)*(((((-1.0)*x890))+(((-1.0)*x882))+x887+x888))))+x887+x889);
if( IKabs(j6evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal j1eval[2];
IkReal x892=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x892);
rxp1_0=(pz*r11);
rxp1_1=(r01*x892);
IkReal x893=cj2*cj2;
IkReal x894=cj3*cj3;
IkReal x895=(x894+x893+(((-1.0)*x893*x894)));
j1eval[0]=x895;
j1eval[1]=IKsign(x895);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x896=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x896);
rxp1_0=(pz*r11);
rxp1_1=(r01*x896);
j1eval[0]=cj3;
j1eval[1]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x897=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x897);
rxp1_0=(pz*r11);
rxp1_1=(r01*x897);
j1eval[0]=sj2;
j1eval[1]=cj2;
j1eval[2]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x907=IKPowWithIntegerCheck(sj2,-1);
if(!x907.valid){
continue;
}
IkReal x898=x907.value;
IkReal x899=(cj3*r10);
IkReal x900=((1.0)*cj6);
IkReal x901=(cj5*sj4);
IkReal x902=(cj4*sj6);
IkReal x903=(sj2*sj5);
IkReal x904=(r11*sj6);
IkReal x905=(cj4*cj6*r11);
IkReal x906=((1.0)*r12*sj4*sj5);
CheckValue<IkReal> x908=IKPowWithIntegerCheck(cj2,-1);
if(!x908.valid){
continue;
}
CheckValue<IkReal> x909=IKPowWithIntegerCheck(sj3,-1);
if(!x909.valid){
continue;
}
if( IKabs((x898*(((((-1.0)*r10*x900*x901))+((x901*x904))+(((-1.0)*x906))+((r10*x902))+x905)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x898*(x908.value)*(x909.value)*((((cj3*x905))+((r01*sj6*x903))+((cj3*x901*x904))+(((-1.0)*r00*x900*x903))+((x899*x902))+((cj5*r02*sj2))+(((-1.0)*x899*x900*x901))+(((-1.0)*cj3*x906)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x898*(((((-1.0)*r10*x900*x901))+((x901*x904))+(((-1.0)*x906))+((r10*x902))+x905))))+IKsqr((x898*(x908.value)*(x909.value)*((((cj3*x905))+((r01*sj6*x903))+((cj3*x901*x904))+(((-1.0)*r00*x900*x903))+((x899*x902))+((cj5*r02*sj2))+(((-1.0)*x899*x900*x901))+(((-1.0)*cj3*x906))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x898*(((((-1.0)*r10*x900*x901))+((x901*x904))+(((-1.0)*x906))+((r10*x902))+x905))), (x898*(x908.value)*(x909.value)*((((cj3*x905))+((r01*sj6*x903))+((cj3*x901*x904))+(((-1.0)*r00*x900*x903))+((x899*x902))+((cj5*r02*sj2))+(((-1.0)*x899*x900*x901))+(((-1.0)*cj3*x906))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x910=IKsin(j1);
IkReal x911=IKcos(j1);
CheckValue<IkReal> x935=IKPowWithIntegerCheck(sj2,-1);
if(!x935.valid){
continue;
}
IkReal x912=x935.value;
IkReal x913=(cj4*cj6);
IkReal x914=((1.0)*r10);
IkReal x915=((0.401724609375)*cj3);
IkReal x916=((0.088)*sj6);
IkReal x917=(cj6*sj5);
IkReal x918=(sj4*sj6);
IkReal x919=(r11*sj6);
IkReal x920=(cj4*cj5);
IkReal x921=((1.0)*sj4);
IkReal x922=(r12*sj5);
IkReal x923=(pz*x912);
IkReal x924=((0.088)*cj6);
IkReal x925=(r02*sj5);
IkReal x926=((1.0)*r00);
IkReal x927=(cj4*sj6);
IkReal x928=(r01*sj6);
IkReal x929=((1.0)*cj4);
IkReal x930=(cj5*cj6);
IkReal x931=((1.0)*x911);
IkReal x932=(cj2*x911);
IkReal x933=(sj3*x910);
IkReal x934=(cj3*x910);
evalcond[0]=(((sj5*x928))+(((-1.0)*cj2*sj3*x931))+x934+(((-1.0)*x917*x926))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+((sj5*x919))+(((-1.0)*cj2*x933))+(((-1.0)*cj3*x931))+(((-1.0)*x914*x917)));
evalcond[2]=((((-1.0)*sj2*x931))+((cj5*r01*x918))+(((-1.0)*x921*x925))+(((-1.0)*r00*x921*x930))+((r00*x927))+((r01*x913)));
evalcond[3]=((((-1.0)*sj4*x914*x930))+((r10*x927))+((r11*x913))+(((-1.0)*sj2*x910))+(((-1.0)*x921*x922))+((cj5*r11*x918)));
evalcond[4]=((((-1.0)*cj5*x913*x926))+(((-1.0)*x925*x929))+((x920*x928))+(((-1.0)*cj6*r01*x921))+(((-1.0)*x918*x926))+((cj3*x932))+x933);
evalcond[5]=(((x919*x920))+(((-1.0)*sj3*x931))+(((-1.0)*cj6*r11*x921))+((cj2*x934))+(((-1.0)*cj5*x913*x914))+(((-1.0)*x914*x918))+(((-1.0)*x922*x929)));
evalcond[6]=((((0.298275390625)*x910))+((x910*x915))+(((0.21484375)*x910*x923))+(((-1.0)*r01*x916))+(((-1.0)*px))+((x923*x932))+((r00*x924)));
evalcond[7]=((((-0.298275390625)*x911))+((r10*x924))+(((-1.0)*py))+(((-1.0)*r11*x916))+(((-1.0)*x911*x915))+((cj2*x910*x923))+(((-0.21484375)*x911*x923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x946=IKPowWithIntegerCheck(sj2,-1);
if(!x946.valid){
continue;
}
IkReal x936=x946.value;
IkReal x937=(r01*sj6);
IkReal x938=(sj2*sj5);
IkReal x939=(cj2*sj3);
IkReal x940=(cj5*sj4);
IkReal x941=(cj6*r00);
IkReal x942=((1.0)*r02);
IkReal x943=(sj4*sj5);
IkReal x944=(cj4*cj6*r01);
IkReal x945=(cj4*r00*sj6);
CheckValue<IkReal> x947=IKPowWithIntegerCheck(cj3,-1);
if(!x947.valid){
continue;
}
if( IKabs((x936*(x947.value)*(((((-1.0)*x939*x940*x941))+(((-1.0)*x939*x942*x943))+(((-1.0)*cj5*sj2*x942))+((x938*x941))+((x939*x945))+((x939*x944))+(((-1.0)*x937*x938))+((x937*x939*x940)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x936*(((((-1.0)*x940*x941))+((x937*x940))+(((-1.0)*x942*x943))+x944+x945)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x936*(x947.value)*(((((-1.0)*x939*x940*x941))+(((-1.0)*x939*x942*x943))+(((-1.0)*cj5*sj2*x942))+((x938*x941))+((x939*x945))+((x939*x944))+(((-1.0)*x937*x938))+((x937*x939*x940))))))+IKsqr((x936*(((((-1.0)*x940*x941))+((x937*x940))+(((-1.0)*x942*x943))+x944+x945))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x936*(x947.value)*(((((-1.0)*x939*x940*x941))+(((-1.0)*x939*x942*x943))+(((-1.0)*cj5*sj2*x942))+((x938*x941))+((x939*x945))+((x939*x944))+(((-1.0)*x937*x938))+((x937*x939*x940))))), (x936*(((((-1.0)*x940*x941))+((x937*x940))+(((-1.0)*x942*x943))+x944+x945))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x948=IKsin(j1);
IkReal x949=IKcos(j1);
CheckValue<IkReal> x973=IKPowWithIntegerCheck(sj2,-1);
if(!x973.valid){
continue;
}
IkReal x950=x973.value;
IkReal x951=(cj4*cj6);
IkReal x952=((1.0)*r10);
IkReal x953=((0.401724609375)*cj3);
IkReal x954=((0.088)*sj6);
IkReal x955=(cj6*sj5);
IkReal x956=(sj4*sj6);
IkReal x957=(r11*sj6);
IkReal x958=(cj4*cj5);
IkReal x959=((1.0)*sj4);
IkReal x960=(r12*sj5);
IkReal x961=(pz*x950);
IkReal x962=((0.088)*cj6);
IkReal x963=(r02*sj5);
IkReal x964=((1.0)*r00);
IkReal x965=(cj4*sj6);
IkReal x966=(r01*sj6);
IkReal x967=((1.0)*cj4);
IkReal x968=(cj5*cj6);
IkReal x969=((1.0)*x949);
IkReal x970=(cj2*x949);
IkReal x971=(sj3*x948);
IkReal x972=(cj3*x948);
evalcond[0]=((((-1.0)*x955*x964))+(((-1.0)*cj2*sj3*x969))+x972+((sj5*x966))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+(((-1.0)*cj3*x969))+(((-1.0)*cj2*x971))+((sj5*x957))+(((-1.0)*x952*x955)));
evalcond[2]=(((cj5*r01*x956))+(((-1.0)*r00*x959*x968))+((r01*x951))+((r00*x965))+(((-1.0)*x959*x963))+(((-1.0)*sj2*x969)));
evalcond[3]=((((-1.0)*sj4*x952*x968))+((cj5*r11*x956))+(((-1.0)*x959*x960))+((r11*x951))+(((-1.0)*sj2*x948))+((r10*x965)));
evalcond[4]=((((-1.0)*x963*x967))+(((-1.0)*cj6*r01*x959))+(((-1.0)*x956*x964))+(((-1.0)*cj5*x951*x964))+((cj3*x970))+((x958*x966))+x971);
evalcond[5]=((((-1.0)*x960*x967))+(((-1.0)*sj3*x969))+((x957*x958))+(((-1.0)*cj5*x951*x952))+(((-1.0)*cj6*r11*x959))+((cj2*x972))+(((-1.0)*x952*x956)));
evalcond[6]=(((x961*x970))+(((-1.0)*r01*x954))+((x948*x953))+((r00*x962))+(((-1.0)*px))+(((0.21484375)*x948*x961))+(((0.298275390625)*x948)));
evalcond[7]=((((-0.21484375)*x949*x961))+((cj2*x948*x961))+(((-1.0)*py))+(((-1.0)*r11*x954))+(((-0.298275390625)*x949))+(((-1.0)*x949*x953))+((r10*x962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x974=cj2*cj2;
IkReal x975=cj3*cj3;
IkReal x976=(cj5*r02);
IkReal x977=((1.0)*cj3);
IkReal x978=(cj2*sj3);
IkReal x979=(cj5*r12);
IkReal x980=(cj6*sj5);
IkReal x981=(r11*sj5*sj6);
IkReal x982=((1.0)*x980);
IkReal x983=(r01*sj5*sj6);
CheckValue<IkReal> x984 = IKatan2WithCheck(IkReal((((x978*x979))+((cj3*r00*x980))+(((-1.0)*x976*x977))+(((-1.0)*x977*x983))+(((-1.0)*r10*x978*x982))+((x978*x981)))),IkReal(((((-1.0)*r00*x978*x982))+((x976*x978))+((cj3*x981))+((cj3*x979))+(((-1.0)*r10*x977*x980))+((x978*x983)))),IKFAST_ATAN2_MAGTHRESH);
if(!x984.valid){
continue;
}
CheckValue<IkReal> x985=IKPowWithIntegerCheck(IKsign(((((-1.0)*x974*x975))+x975+x974)),-1);
if(!x985.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x984.value)+(((1.5707963267949)*(x985.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x986=IKsin(j1);
IkReal x987=IKcos(j1);
CheckValue<IkReal> x1011=IKPowWithIntegerCheck(sj2,-1);
if(!x1011.valid){
continue;
}
IkReal x988=x1011.value;
IkReal x989=(cj4*cj6);
IkReal x990=((1.0)*r10);
IkReal x991=((0.401724609375)*cj3);
IkReal x992=((0.088)*sj6);
IkReal x993=(cj6*sj5);
IkReal x994=(sj4*sj6);
IkReal x995=(r11*sj6);
IkReal x996=(cj4*cj5);
IkReal x997=((1.0)*sj4);
IkReal x998=(r12*sj5);
IkReal x999=(pz*x988);
IkReal x1000=((0.088)*cj6);
IkReal x1001=(r02*sj5);
IkReal x1002=((1.0)*r00);
IkReal x1003=(cj4*sj6);
IkReal x1004=(r01*sj6);
IkReal x1005=((1.0)*cj4);
IkReal x1006=(cj5*cj6);
IkReal x1007=((1.0)*x987);
IkReal x1008=(cj2*x987);
IkReal x1009=(sj3*x986);
IkReal x1010=(cj3*x986);
evalcond[0]=(x1010+(((-1.0)*x1002*x993))+(((-1.0)*cj2*sj3*x1007))+((sj5*x1004))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+(((-1.0)*x990*x993))+(((-1.0)*cj2*x1009))+(((-1.0)*cj3*x1007))+((sj5*x995)));
evalcond[2]=(((cj5*r01*x994))+((r01*x989))+(((-1.0)*r00*x1006*x997))+(((-1.0)*x1001*x997))+(((-1.0)*sj2*x1007))+((r00*x1003)));
evalcond[3]=(((cj5*r11*x994))+(((-1.0)*x997*x998))+(((-1.0)*sj4*x1006*x990))+((r11*x989))+(((-1.0)*sj2*x986))+((r10*x1003)));
evalcond[4]=(((cj3*x1008))+x1009+(((-1.0)*x1002*x994))+(((-1.0)*cj5*x1002*x989))+(((-1.0)*cj6*r01*x997))+(((-1.0)*x1001*x1005))+((x1004*x996)));
evalcond[5]=(((cj2*x1010))+(((-1.0)*cj5*x989*x990))+(((-1.0)*x990*x994))+(((-1.0)*cj6*r11*x997))+(((-1.0)*sj3*x1007))+((x995*x996))+(((-1.0)*x1005*x998)));
evalcond[6]=(((x986*x991))+(((0.21484375)*x986*x999))+(((-1.0)*px))+(((-1.0)*r01*x992))+((x1008*x999))+(((0.298275390625)*x986))+((r00*x1000)));
evalcond[7]=(((cj2*x986*x999))+(((-0.21484375)*x987*x999))+(((-1.0)*r11*x992))+(((-1.0)*py))+(((-1.0)*x987*x991))+((r10*x1000))+(((-0.298275390625)*x987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1013=IKPowWithIntegerCheck(r22,-1);
if(!x1013.valid){
continue;
}
IkReal x1012=x1013.value;
CheckValue<IkReal> x1014=IKPowWithIntegerCheck(sj4,-1);
if(!x1014.valid){
continue;
}
if( IKabs((cj2*x1012*(x1014.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj2*sj3*x1012)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj2*x1012*(x1014.value)))+IKsqr((sj2*sj3*x1012))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((cj2*x1012*(x1014.value)), (sj2*sj3*x1012));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1015=IKsin(j5);
IkReal x1016=((1.0)*r22*x1015);
evalcond[0]=(cj2+(((-1.0)*sj4*x1016)));
evalcond[1]=(((r22*(IKcos(j5))))+(((-1.0)*sj2*sj3)));
evalcond[2]=((((-1.0)*cj4*x1016))+((cj3*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[6+1], zeror[6];
int numroots;
IkReal j6evalpoly[1];
IkReal x1017=sj2*sj2;
IkReal x1018=((16.0)*cj5);
IkReal x1019=(r02*sj5);
IkReal x1020=((8.0)*cj5);
IkReal x1021=(cj3*sj2*sj4);
IkReal x1022=(r12*sj4*sj5);
IkReal x1023=(cj3*cj4*sj2);
IkReal x1024=((4.0)*cj2*sj2*sj3);
IkReal x1025=(cj5*r12*x1017);
IkReal x1026=(r11*sj5*x1017);
IkReal x1027=((4.0)*r10*sj5*x1017);
IkReal x1028=((4.0)*r01*x1023);
IkReal x1029=((12.0)*x1025);
IkReal x1030=((4.0)*x1025);
IkReal x1031=(cj2*r11*sj2*sj3*sj4);
IkReal x1032=(cj2*cj4*r10*sj2*sj3);
IkReal x1033=(cj4*r11*x1024);
IkReal x1034=((12.0)*x1019*x1021);
IkReal x1035=((4.0)*cj5*r00*x1021);
IkReal x1036=((4.0)*x1019*x1021);
IkReal x1037=(cj5*r10*sj4*x1024);
IkReal x1038=((12.0)*cj2*sj2*sj3*x1022);
IkReal x1039=(x1022*x1024);
IkReal x1040=(x1037+x1035);
IkReal x1041=(x1033+x1027+x1028);
IkReal x1042=(x1039+x1030+x1036);
IkReal x1043=(x1038+x1034+x1029);
IkReal x1044=((((-1.0)*x1020*x1031))+(((-8.0)*x1032))+(((8.0)*x1026))+(((-8.0)*r00*x1023))+(((-1.0)*r01*x1020*x1021)));
op[0]=(x1042+x1041+(((-1.0)*x1040)));
op[1]=x1044;
op[2]=(x1043+x1041+(((-1.0)*x1040)));
op[3]=((((-16.0)*x1032))+(((-16.0)*r00*x1023))+(((16.0)*x1026))+(((-1.0)*r01*x1018*x1021))+(((-1.0)*x1018*x1031)));
op[4]=(x1043+x1040+(((-1.0)*x1041)));
op[5]=x1044;
op[6]=(x1042+x1040+(((-1.0)*x1041)));
polyroots6(op,zeror,numroots);
IkReal j6array[6], cj6array[6], sj6array[6], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[6]={true,true,true,true,true,true};
_nj6 = 6;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

IkReal x1045=sj2*sj2;
IkReal x1046=(sj2*sj4);
IkReal x1047=(cj2*sj3);
IkReal x1048=(r02*sj5);
IkReal x1049=((4.0)*cj5);
IkReal x1050=(cj3*r10);
IkReal x1051=((4.0)*cj3);
IkReal x1052=(cj4*sj2);
IkReal x1053=(r12*sj5);
IkReal x1054=((8.0)*r01);
IkReal x1055=((16.0)*r01);
IkReal x1056=(cj3*cj5*r11);
IkReal x1057=(r00*x1052);
IkReal x1058=(r02*x1045);
IkReal x1059=(sj5*x1045);
IkReal x1060=((4.0)*r00*x1059);
IkReal x1061=(r11*x1051*x1052);
IkReal x1062=(x1049*x1058);
IkReal x1063=((12.0)*cj5*x1058);
IkReal x1064=((4.0)*r01*x1047*x1052);
IkReal x1065=(x1046*x1049*x1050);
IkReal x1066=((12.0)*cj3*x1046*x1053);
IkReal x1067=(x1046*x1051*x1053);
IkReal x1068=((4.0)*x1046*x1047*x1048);
IkReal x1069=(r00*x1046*x1047*x1049);
IkReal x1070=((12.0)*x1046*x1047*x1048);
IkReal x1071=(x1069+x1061);
IkReal x1072=(x1070+x1063);
IkReal x1073=(x1068+x1062);
IkReal x1074=(x1060+x1065+x1064);
IkReal x1075=((((-1.0)*cj5*x1046*x1047*x1054))+((x1054*x1059))+(((-8.0)*x1047*x1057))+(((8.0)*x1050*x1052))+(((8.0)*x1046*x1056)));
j6evalpoly[0]=(x1073+x1071+(((htj6*htj6*htj6*htj6*htj6*htj6)*((x1074+x1073+(((-1.0)*x1067))+(((-1.0)*x1071))))))+(((htj6*htj6*htj6)*(((((-1.0)*cj5*x1046*x1047*x1055))+((x1055*x1059))+(((16.0)*x1050*x1052))+(((16.0)*x1046*x1056))+(((-16.0)*x1047*x1057))))))+((x1075*(htj6*htj6*htj6*htj6*htj6)))+(((htj6*htj6*htj6*htj6)*((x1074+x1072+(((-1.0)*x1066))+(((-1.0)*x1071))))))+((htj6*x1075))+(((-1.0)*x1067))+(((-1.0)*x1074))+(((htj6*htj6)*((x1072+x1071+(((-1.0)*x1066))+(((-1.0)*x1074)))))));
if( IKabs(j6evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal j1eval[2];
IkReal x1076=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1076);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1076);
IkReal x1077=cj2*cj2;
IkReal x1078=cj3*cj3;
IkReal x1079=(x1078+x1077+(((-1.0)*x1077*x1078)));
j1eval[0]=x1079;
j1eval[1]=IKsign(x1079);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1080=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1080);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1080);
j1eval[0]=cj3;
j1eval[1]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x1081=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1081);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1081);
j1eval[0]=sj2;
j1eval[1]=cj2;
j1eval[2]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1091=IKPowWithIntegerCheck(sj2,-1);
if(!x1091.valid){
continue;
}
IkReal x1082=x1091.value;
IkReal x1083=(cj3*r10);
IkReal x1084=((1.0)*cj6);
IkReal x1085=(cj5*sj4);
IkReal x1086=(cj4*sj6);
IkReal x1087=(sj2*sj5);
IkReal x1088=(r11*sj6);
IkReal x1089=(cj4*cj6*r11);
IkReal x1090=((1.0)*r12*sj4*sj5);
CheckValue<IkReal> x1092=IKPowWithIntegerCheck(cj2,-1);
if(!x1092.valid){
continue;
}
CheckValue<IkReal> x1093=IKPowWithIntegerCheck(sj3,-1);
if(!x1093.valid){
continue;
}
if( IKabs((x1082*((x1089+(((-1.0)*r10*x1084*x1085))+(((-1.0)*x1090))+((r10*x1086))+((x1085*x1088)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1082*(x1092.value)*(x1093.value)*(((((-1.0)*cj3*x1090))+(((-1.0)*r00*x1084*x1087))+((cj3*x1085*x1088))+((cj5*r02*sj2))+((cj3*x1089))+(((-1.0)*x1083*x1084*x1085))+((r01*sj6*x1087))+((x1083*x1086)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1082*((x1089+(((-1.0)*r10*x1084*x1085))+(((-1.0)*x1090))+((r10*x1086))+((x1085*x1088))))))+IKsqr((x1082*(x1092.value)*(x1093.value)*(((((-1.0)*cj3*x1090))+(((-1.0)*r00*x1084*x1087))+((cj3*x1085*x1088))+((cj5*r02*sj2))+((cj3*x1089))+(((-1.0)*x1083*x1084*x1085))+((r01*sj6*x1087))+((x1083*x1086))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x1082*((x1089+(((-1.0)*r10*x1084*x1085))+(((-1.0)*x1090))+((r10*x1086))+((x1085*x1088))))), (x1082*(x1092.value)*(x1093.value)*(((((-1.0)*cj3*x1090))+(((-1.0)*r00*x1084*x1087))+((cj3*x1085*x1088))+((cj5*r02*sj2))+((cj3*x1089))+(((-1.0)*x1083*x1084*x1085))+((r01*sj6*x1087))+((x1083*x1086))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1094=IKsin(j1);
IkReal x1095=IKcos(j1);
CheckValue<IkReal> x1119=IKPowWithIntegerCheck(sj2,-1);
if(!x1119.valid){
continue;
}
IkReal x1096=x1119.value;
IkReal x1097=(cj4*cj6);
IkReal x1098=((1.0)*r10);
IkReal x1099=((0.401724609375)*cj3);
IkReal x1100=((0.088)*sj6);
IkReal x1101=(cj6*sj5);
IkReal x1102=(sj4*sj6);
IkReal x1103=(r11*sj6);
IkReal x1104=(cj4*cj5);
IkReal x1105=((1.0)*sj4);
IkReal x1106=(r12*sj5);
IkReal x1107=(pz*x1096);
IkReal x1108=((0.088)*cj6);
IkReal x1109=(r02*sj5);
IkReal x1110=((1.0)*r00);
IkReal x1111=(cj4*sj6);
IkReal x1112=(r01*sj6);
IkReal x1113=((1.0)*cj4);
IkReal x1114=(cj5*cj6);
IkReal x1115=((1.0)*x1095);
IkReal x1116=(cj2*x1095);
IkReal x1117=(sj3*x1094);
IkReal x1118=(cj3*x1094);
evalcond[0]=(x1118+(((-1.0)*cj2*sj3*x1115))+((sj5*x1112))+((cj5*r02))+(((-1.0)*x1101*x1110)));
evalcond[1]=(((cj5*r12))+(((-1.0)*cj2*x1117))+(((-1.0)*x1098*x1101))+(((-1.0)*cj3*x1115))+((sj5*x1103)));
evalcond[2]=((((-1.0)*r00*x1105*x1114))+((r01*x1097))+((cj5*r01*x1102))+(((-1.0)*sj2*x1115))+((r00*x1111))+(((-1.0)*x1105*x1109)));
evalcond[3]=(((cj5*r11*x1102))+(((-1.0)*sj2*x1094))+((r11*x1097))+(((-1.0)*sj4*x1098*x1114))+((r10*x1111))+(((-1.0)*x1105*x1106)));
evalcond[4]=((((-1.0)*cj5*x1097*x1110))+x1117+(((-1.0)*cj6*r01*x1105))+(((-1.0)*x1109*x1113))+((x1104*x1112))+(((-1.0)*x1102*x1110))+((cj3*x1116)));
evalcond[5]=((((-1.0)*x1098*x1102))+(((-1.0)*cj5*x1097*x1098))+(((-1.0)*sj3*x1115))+(((-1.0)*cj6*r11*x1105))+(((-1.0)*x1106*x1113))+((cj2*x1118))+((x1103*x1104)));
evalcond[6]=((((-1.0)*r01*x1100))+(((0.21484375)*x1094*x1107))+(((0.298275390625)*x1094))+((x1094*x1099))+((r00*x1108))+(((-1.0)*px))+((x1107*x1116)));
evalcond[7]=((((-1.0)*r11*x1100))+(((-0.298275390625)*x1095))+(((-1.0)*py))+(((-1.0)*x1095*x1099))+(((-0.21484375)*x1095*x1107))+((cj2*x1094*x1107))+((r10*x1108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1130=IKPowWithIntegerCheck(sj2,-1);
if(!x1130.valid){
continue;
}
IkReal x1120=x1130.value;
IkReal x1121=(r01*sj6);
IkReal x1122=(sj2*sj5);
IkReal x1123=(cj2*sj3);
IkReal x1124=(cj5*sj4);
IkReal x1125=(cj6*r00);
IkReal x1126=((1.0)*r02);
IkReal x1127=(sj4*sj5);
IkReal x1128=(cj4*cj6*r01);
IkReal x1129=(cj4*r00*sj6);
CheckValue<IkReal> x1131=IKPowWithIntegerCheck(cj3,-1);
if(!x1131.valid){
continue;
}
if( IKabs((x1120*(x1131.value)*((((x1121*x1123*x1124))+(((-1.0)*cj5*sj2*x1126))+(((-1.0)*x1121*x1122))+(((-1.0)*x1123*x1126*x1127))+((x1122*x1125))+((x1123*x1129))+((x1123*x1128))+(((-1.0)*x1123*x1124*x1125)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1120*((x1128+x1129+(((-1.0)*x1124*x1125))+((x1121*x1124))+(((-1.0)*x1126*x1127)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1120*(x1131.value)*((((x1121*x1123*x1124))+(((-1.0)*cj5*sj2*x1126))+(((-1.0)*x1121*x1122))+(((-1.0)*x1123*x1126*x1127))+((x1122*x1125))+((x1123*x1129))+((x1123*x1128))+(((-1.0)*x1123*x1124*x1125))))))+IKsqr((x1120*((x1128+x1129+(((-1.0)*x1124*x1125))+((x1121*x1124))+(((-1.0)*x1126*x1127))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x1120*(x1131.value)*((((x1121*x1123*x1124))+(((-1.0)*cj5*sj2*x1126))+(((-1.0)*x1121*x1122))+(((-1.0)*x1123*x1126*x1127))+((x1122*x1125))+((x1123*x1129))+((x1123*x1128))+(((-1.0)*x1123*x1124*x1125))))), (x1120*((x1128+x1129+(((-1.0)*x1124*x1125))+((x1121*x1124))+(((-1.0)*x1126*x1127))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1132=IKsin(j1);
IkReal x1133=IKcos(j1);
CheckValue<IkReal> x1157=IKPowWithIntegerCheck(sj2,-1);
if(!x1157.valid){
continue;
}
IkReal x1134=x1157.value;
IkReal x1135=(cj4*cj6);
IkReal x1136=((1.0)*r10);
IkReal x1137=((0.401724609375)*cj3);
IkReal x1138=((0.088)*sj6);
IkReal x1139=(cj6*sj5);
IkReal x1140=(sj4*sj6);
IkReal x1141=(r11*sj6);
IkReal x1142=(cj4*cj5);
IkReal x1143=((1.0)*sj4);
IkReal x1144=(r12*sj5);
IkReal x1145=(pz*x1134);
IkReal x1146=((0.088)*cj6);
IkReal x1147=(r02*sj5);
IkReal x1148=((1.0)*r00);
IkReal x1149=(cj4*sj6);
IkReal x1150=(r01*sj6);
IkReal x1151=((1.0)*cj4);
IkReal x1152=(cj5*cj6);
IkReal x1153=((1.0)*x1133);
IkReal x1154=(cj2*x1133);
IkReal x1155=(sj3*x1132);
IkReal x1156=(cj3*x1132);
evalcond[0]=(x1156+((sj5*x1150))+(((-1.0)*x1139*x1148))+(((-1.0)*cj2*sj3*x1153))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+(((-1.0)*cj2*x1155))+((sj5*x1141))+(((-1.0)*x1136*x1139))+(((-1.0)*cj3*x1153)));
evalcond[2]=(((r01*x1135))+(((-1.0)*x1143*x1147))+((cj5*r01*x1140))+(((-1.0)*r00*x1143*x1152))+(((-1.0)*sj2*x1153))+((r00*x1149)));
evalcond[3]=((((-1.0)*x1143*x1144))+(((-1.0)*sj2*x1132))+(((-1.0)*sj4*x1136*x1152))+((cj5*r11*x1140))+((r10*x1149))+((r11*x1135)));
evalcond[4]=((((-1.0)*x1140*x1148))+x1155+((x1142*x1150))+((cj3*x1154))+(((-1.0)*x1147*x1151))+(((-1.0)*cj6*r01*x1143))+(((-1.0)*cj5*x1135*x1148)));
evalcond[5]=((((-1.0)*x1136*x1140))+(((-1.0)*x1144*x1151))+((cj2*x1156))+((x1141*x1142))+(((-1.0)*cj5*x1135*x1136))+(((-1.0)*sj3*x1153))+(((-1.0)*cj6*r11*x1143)));
evalcond[6]=((((0.298275390625)*x1132))+(((-1.0)*px))+(((0.21484375)*x1132*x1145))+(((-1.0)*r01*x1138))+((x1145*x1154))+((r00*x1146))+((x1132*x1137)));
evalcond[7]=((((-1.0)*r11*x1138))+(((-0.21484375)*x1133*x1145))+(((-1.0)*py))+((cj2*x1132*x1145))+((r10*x1146))+(((-0.298275390625)*x1133))+(((-1.0)*x1133*x1137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1158=cj2*cj2;
IkReal x1159=cj3*cj3;
IkReal x1160=(cj5*r02);
IkReal x1161=((1.0)*cj3);
IkReal x1162=(cj2*sj3);
IkReal x1163=(cj5*r12);
IkReal x1164=(cj6*sj5);
IkReal x1165=(r11*sj5*sj6);
IkReal x1166=((1.0)*x1164);
IkReal x1167=(r01*sj5*sj6);
CheckValue<IkReal> x1168=IKPowWithIntegerCheck(IKsign((x1159+x1158+(((-1.0)*x1158*x1159)))),-1);
if(!x1168.valid){
continue;
}
CheckValue<IkReal> x1169 = IKatan2WithCheck(IkReal((((x1162*x1163))+((x1162*x1165))+(((-1.0)*r10*x1162*x1166))+(((-1.0)*x1160*x1161))+(((-1.0)*x1161*x1167))+((cj3*r00*x1164)))),IkReal((((x1162*x1167))+(((-1.0)*r10*x1161*x1164))+((cj3*x1165))+((cj3*x1163))+((x1160*x1162))+(((-1.0)*r00*x1162*x1166)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1169.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1168.value)))+(x1169.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1170=IKsin(j1);
IkReal x1171=IKcos(j1);
CheckValue<IkReal> x1195=IKPowWithIntegerCheck(sj2,-1);
if(!x1195.valid){
continue;
}
IkReal x1172=x1195.value;
IkReal x1173=(cj4*cj6);
IkReal x1174=((1.0)*r10);
IkReal x1175=((0.401724609375)*cj3);
IkReal x1176=((0.088)*sj6);
IkReal x1177=(cj6*sj5);
IkReal x1178=(sj4*sj6);
IkReal x1179=(r11*sj6);
IkReal x1180=(cj4*cj5);
IkReal x1181=((1.0)*sj4);
IkReal x1182=(r12*sj5);
IkReal x1183=(pz*x1172);
IkReal x1184=((0.088)*cj6);
IkReal x1185=(r02*sj5);
IkReal x1186=((1.0)*r00);
IkReal x1187=(cj4*sj6);
IkReal x1188=(r01*sj6);
IkReal x1189=((1.0)*cj4);
IkReal x1190=(cj5*cj6);
IkReal x1191=((1.0)*x1171);
IkReal x1192=(cj2*x1171);
IkReal x1193=(sj3*x1170);
IkReal x1194=(cj3*x1170);
evalcond[0]=(x1194+(((-1.0)*cj2*sj3*x1191))+((sj5*x1188))+(((-1.0)*x1177*x1186))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+(((-1.0)*cj2*x1193))+(((-1.0)*cj3*x1191))+((sj5*x1179))+(((-1.0)*x1174*x1177)));
evalcond[2]=((((-1.0)*x1181*x1185))+(((-1.0)*sj2*x1191))+(((-1.0)*r00*x1181*x1190))+((r00*x1187))+((r01*x1173))+((cj5*r01*x1178)));
evalcond[3]=((((-1.0)*x1181*x1182))+(((-1.0)*sj4*x1174*x1190))+((r10*x1187))+((cj5*r11*x1178))+(((-1.0)*sj2*x1170))+((r11*x1173)));
evalcond[4]=(x1193+(((-1.0)*cj6*r01*x1181))+((x1180*x1188))+(((-1.0)*x1178*x1186))+(((-1.0)*cj5*x1173*x1186))+(((-1.0)*x1185*x1189))+((cj3*x1192)));
evalcond[5]=((((-1.0)*sj3*x1191))+((x1179*x1180))+(((-1.0)*cj6*r11*x1181))+(((-1.0)*x1182*x1189))+((cj2*x1194))+(((-1.0)*x1174*x1178))+(((-1.0)*cj5*x1173*x1174)));
evalcond[6]=((((0.21484375)*x1170*x1183))+((r00*x1184))+((x1183*x1192))+(((-1.0)*px))+(((0.298275390625)*x1170))+(((-1.0)*r01*x1176))+((x1170*x1175)));
evalcond[7]=((((-0.21484375)*x1171*x1183))+((cj2*x1170*x1183))+((r10*x1184))+(((-1.0)*r11*x1176))+(((-1.0)*x1171*x1175))+(((-1.0)*py))+(((-0.298275390625)*x1171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
IkReal x1196=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1196);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1196);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=r22;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x1197=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1197);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1197);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=cj4;
j5eval[1]=r22;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1200=IKPowWithIntegerCheck(r22,-1);
if(!x1200.valid){
continue;
}
IkReal x1198=x1200.value;
IkReal x1199=(sj2*x1198);
CheckValue<IkReal> x1201=IKPowWithIntegerCheck(cj4,-1);
if(!x1201.valid){
continue;
}
if( IKabs((cj3*x1199*(x1201.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj3*x1199)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj3*x1199*(x1201.value)))+IKsqr((sj3*x1199))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((cj3*x1199*(x1201.value)), (sj3*x1199));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1202=IKsin(j5);
IkReal x1203=((1.0)*r22*x1202);
evalcond[0]=(cj2+(((-1.0)*sj4*x1203)));
evalcond[1]=(((r22*(IKcos(j5))))+(((-1.0)*sj2*sj3)));
evalcond[2]=((((-1.0)*cj4*x1203))+((cj3*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[1];
IkReal x1204=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1204);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1204);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1205=sj2*sj2;
IkReal x1206=(cj3*sj2);
IkReal x1207=((8.0)*r01);
IkReal x1208=((4.0)*cj4);
IkReal x1209=((8.0)*r00);
IkReal x1210=((4.0)*r10);
IkReal x1211=((16.0)*r10);
IkReal x1212=((16.0)*r00);
IkReal x1213=((8.0)*r10);
IkReal x1214=(cj5*sj4);
IkReal x1215=((16.0)*r01);
IkReal x1216=(r11*x1214);
IkReal x1217=(sj5*x1205);
IkReal x1218=(cj2*sj2*sj3);
IkReal x1219=(cj4*x1218);
IkReal x1220=((4.0)*r00*x1214);
IkReal x1221=(((r11*x1206*x1208))+((x1218*x1220)));
IkReal x1222=(((x1206*x1220))+((x1210*x1214*x1218)));
IkReal x1223=(((x1210*x1217))+((r11*x1208*x1218))+((r01*x1206*x1208)));
IkReal x1224=(((x1206*x1210*x1214))+(((4.0)*r00*x1217))+((r01*x1208*x1218)));
j6eval[0]=((IKabs(((((-1.0)*x1209*x1219))+(((8.0)*x1206*x1216))+(((-1.0)*x1207*x1214*x1218))+((x1207*x1217))+((cj4*x1206*x1213)))))+(IKabs((x1223+(((-1.0)*x1222)))))+(((0.5)*(IKabs((x1221+(((-1.0)*x1224)))))))+(IKabs((x1224+(((-1.0)*x1221)))))+(((0.5)*(IKabs((x1222+(((-1.0)*x1223)))))))+(((0.5)*(IKabs(((((-1.0)*x1214*x1215*x1218))+(((16.0)*x1206*x1216))+(((-1.0)*x1212*x1219))+((cj4*x1206*x1211))+((x1215*x1217)))))))+(((0.5)*(IKabs(((((16.0)*r11*x1217))+(((-1.0)*x1206*x1214*x1215))+(((-1.0)*x1211*x1219))+(((-16.0)*x1216*x1218))+(((-1.0)*cj4*x1206*x1212)))))))+(IKabs(((((8.0)*r11*x1217))+(((-8.0)*x1216*x1218))+(((-1.0)*x1213*x1219))+(((-1.0)*x1206*x1207*x1214))+(((-1.0)*cj4*x1206*x1209))))));
if( IKabs(j6eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j6evalpoly[1];
IkReal x1225=sj2*sj2;
IkReal x1226=(cj3*r01);
IkReal x1227=(cj4*sj2);
IkReal x1228=(cj3*r00);
IkReal x1229=((4.0)*x1227);
IkReal x1230=(cj2*r11*sj3);
IkReal x1231=(cj2*r10*sj3);
IkReal x1232=((16.0)*cj5*sj2*sj4);
IkReal x1233=(r11*sj5*x1225);
IkReal x1234=((8.0)*cj5*sj2*sj4);
IkReal x1235=((4.0)*cj5*sj2*sj4);
IkReal x1236=(((x1231*x1235))+((x1228*x1235)));
IkReal x1237=((((4.0)*r10*sj5*x1225))+((x1226*x1229))+((x1229*x1230)));
IkReal x1238=(x1237+(((-1.0)*x1236)));
IkReal x1239=((((8.0)*x1233))+(((-1.0)*x1230*x1234))+(((-1.0)*x1226*x1234))+(((-8.0)*x1227*x1231))+(((-8.0)*x1227*x1228)));
IkReal x1240=(x1236+(((-1.0)*x1237)));
op[0]=x1238;
op[1]=x1239;
op[2]=x1238;
op[3]=((((-1.0)*x1230*x1232))+(((-16.0)*x1227*x1228))+(((-1.0)*x1226*x1232))+(((-16.0)*x1227*x1231))+(((16.0)*x1233)));
op[4]=x1240;
op[5]=x1239;
op[6]=x1240;
polyroots6(op,zeror,numroots);
IkReal j6array[6], cj6array[6], sj6array[6], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[6]={true,true,true,true,true,true};
_nj6 = 6;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

IkReal x1241=sj2*sj2;
IkReal x1242=(cj2*sj3);
IkReal x1243=(cj3*r10);
IkReal x1244=((16.0)*sj2);
IkReal x1245=((4.0)*r00);
IkReal x1246=((8.0)*cj4*sj2);
IkReal x1247=(cj5*r01*sj4);
IkReal x1248=((4.0)*cj4*sj2);
IkReal x1249=(cj3*cj5*sj2*sj4);
IkReal x1250=(r01*sj5*x1241);
IkReal x1251=(cj3*r11*x1248);
IkReal x1252=(cj5*sj2*sj4*x1242*x1245);
IkReal x1253=(x1252+x1251);
IkReal x1254=(((r01*x1242*x1248))+(((4.0)*cj5*sj2*sj4*x1243))+((sj5*x1241*x1245)));
IkReal x1255=((((-1.0)*x1253))+x1254);
IkReal x1256=((((-8.0)*sj2*x1242*x1247))+(((8.0)*r11*x1249))+(((-1.0)*r00*x1242*x1246))+((x1243*x1246))+(((8.0)*x1250)));
j6evalpoly[0]=((((-1.0)*x1254))+x1253+((x1255*(htj6*htj6*htj6*htj6)))+((x1255*(htj6*htj6*htj6*htj6*htj6*htj6)))+((x1256*(htj6*htj6*htj6*htj6*htj6)))+((htj6*x1256))+(((htj6*htj6)*(((((-1.0)*x1254))+x1253))))+(((htj6*htj6*htj6)*(((((16.0)*x1250))+((cj4*x1243*x1244))+(((-1.0)*x1242*x1244*x1247))+(((-1.0)*cj4*r00*x1242*x1244))+((cj3*cj5*r11*sj4*x1244)))))));
if( IKabs(j6evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal j1eval[3];
IkReal x1257=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1257);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1257);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1258=cj2*cj2;
IkReal x1259=cj3*cj3;
IkReal x1260=sj5*sj5;
IkReal x1261=sj6*sj6;
IkReal x1262=cj6*cj6;
IkReal x1263=sj3*sj3;
IkReal x1264=(x1260*x1262);
IkReal x1265=(x1258*x1263);
IkReal x1266=(x1260*x1261);
IkReal x1267=(x1258+x1259+(((-1.0)*x1258*x1259)));
j1eval[0]=x1267;
j1eval[1]=IKsign(x1267);
j1eval[2]=(((x1264*x1265))+((x1259*x1264))+((x1259*x1266))+((x1265*x1266)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1268=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1268);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1268);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j1eval[0]=cj3;
j1eval[1]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x1269=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1269);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1269);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j1eval[0]=sj2;
j1eval[1]=cj2;
j1eval[2]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1278=IKPowWithIntegerCheck(sj2,-1);
if(!x1278.valid){
continue;
}
IkReal x1270=x1278.value;
IkReal x1271=(cj3*r10);
IkReal x1272=((1.0)*cj6);
IkReal x1273=(cj5*sj4);
IkReal x1274=(cj4*sj6);
IkReal x1275=(sj2*sj5);
IkReal x1276=(r11*sj6);
IkReal x1277=(cj4*cj6*r11);
CheckValue<IkReal> x1279=IKPowWithIntegerCheck(cj2,-1);
if(!x1279.valid){
continue;
}
CheckValue<IkReal> x1280=IKPowWithIntegerCheck(sj3,-1);
if(!x1280.valid){
continue;
}
if( IKabs((x1270*((x1277+((r10*x1274))+((x1273*x1276))+(((-1.0)*r10*x1272*x1273)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1270*(x1279.value)*(x1280.value)*(((((-1.0)*x1271*x1272*x1273))+((cj3*x1277))+((cj3*x1273*x1276))+((r01*sj6*x1275))+((x1271*x1274))+(((-1.0)*r00*x1272*x1275)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1270*((x1277+((r10*x1274))+((x1273*x1276))+(((-1.0)*r10*x1272*x1273))))))+IKsqr((x1270*(x1279.value)*(x1280.value)*(((((-1.0)*x1271*x1272*x1273))+((cj3*x1277))+((cj3*x1273*x1276))+((r01*sj6*x1275))+((x1271*x1274))+(((-1.0)*r00*x1272*x1275))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x1270*((x1277+((r10*x1274))+((x1273*x1276))+(((-1.0)*r10*x1272*x1273))))), (x1270*(x1279.value)*(x1280.value)*(((((-1.0)*x1271*x1272*x1273))+((cj3*x1277))+((cj3*x1273*x1276))+((r01*sj6*x1275))+((x1271*x1274))+(((-1.0)*r00*x1272*x1275))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1281=IKsin(j1);
IkReal x1282=IKcos(j1);
CheckValue<IkReal> x1302=IKPowWithIntegerCheck(sj2,-1);
if(!x1302.valid){
continue;
}
IkReal x1283=x1302.value;
IkReal x1284=(cj4*cj6);
IkReal x1285=((1.0)*r10);
IkReal x1286=((0.401724609375)*cj3);
IkReal x1287=((0.088)*sj6);
IkReal x1288=(cj6*sj5);
IkReal x1289=(sj4*sj6);
IkReal x1290=(r11*sj6);
IkReal x1291=(cj4*cj5);
IkReal x1292=(pz*x1283);
IkReal x1293=((0.088)*cj6);
IkReal x1294=((1.0)*r00);
IkReal x1295=(cj4*sj6);
IkReal x1296=(r01*sj6);
IkReal x1297=((1.0)*x1282);
IkReal x1298=((1.0)*cj6*sj4);
IkReal x1299=(cj2*x1282);
IkReal x1300=(sj3*x1281);
IkReal x1301=(cj3*x1281);
evalcond[0]=(((sj5*x1296))+x1301+(((-1.0)*cj2*sj3*x1297))+(((-1.0)*x1288*x1294)));
evalcond[1]=(((sj5*x1290))+(((-1.0)*cj2*x1300))+(((-1.0)*x1285*x1288))+(((-1.0)*cj3*x1297)));
evalcond[2]=((((-1.0)*cj5*cj6*sj4*x1294))+(((-1.0)*sj2*x1297))+((r01*x1284))+((cj5*r01*x1289))+((r00*x1295)));
evalcond[3]=((((-1.0)*sj2*x1281))+((r11*x1284))+((cj5*r11*x1289))+(((-1.0)*cj5*cj6*sj4*x1285))+((r10*x1295)));
evalcond[4]=(x1300+(((-1.0)*r01*x1298))+((cj3*x1299))+(((-1.0)*x1289*x1294))+((x1291*x1296))+(((-1.0)*cj5*x1284*x1294)));
evalcond[5]=((((-1.0)*cj5*x1284*x1285))+(((-1.0)*x1285*x1289))+(((-1.0)*sj3*x1297))+((x1290*x1291))+(((-1.0)*r11*x1298))+((cj2*x1301)));
evalcond[6]=((((0.298275390625)*x1281))+(((0.21484375)*x1281*x1292))+(((-1.0)*r01*x1287))+(((-1.0)*px))+((x1281*x1286))+((r00*x1293))+((x1292*x1299)));
evalcond[7]=(((cj2*x1281*x1292))+(((-1.0)*py))+(((-0.21484375)*x1282*x1292))+((r10*x1293))+(((-0.298275390625)*x1282))+(((-1.0)*r11*x1287))+(((-1.0)*x1282*x1286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1311=IKPowWithIntegerCheck(sj2,-1);
if(!x1311.valid){
continue;
}
IkReal x1303=x1311.value;
IkReal x1304=(r01*sj6);
IkReal x1305=(sj2*sj5);
IkReal x1306=(cj2*sj3);
IkReal x1307=(cj5*sj4);
IkReal x1308=(cj6*r00);
IkReal x1309=(cj4*cj6*r01);
IkReal x1310=(cj4*r00*sj6);
CheckValue<IkReal> x1312=IKPowWithIntegerCheck(cj3,-1);
if(!x1312.valid){
continue;
}
if( IKabs((x1303*(x1312.value)*((((x1306*x1309))+((x1305*x1308))+((x1306*x1310))+(((-1.0)*x1304*x1305))+((x1304*x1306*x1307))+(((-1.0)*x1306*x1307*x1308)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1303*((x1309+x1310+(((-1.0)*x1307*x1308))+((x1304*x1307)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1303*(x1312.value)*((((x1306*x1309))+((x1305*x1308))+((x1306*x1310))+(((-1.0)*x1304*x1305))+((x1304*x1306*x1307))+(((-1.0)*x1306*x1307*x1308))))))+IKsqr((x1303*((x1309+x1310+(((-1.0)*x1307*x1308))+((x1304*x1307))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x1303*(x1312.value)*((((x1306*x1309))+((x1305*x1308))+((x1306*x1310))+(((-1.0)*x1304*x1305))+((x1304*x1306*x1307))+(((-1.0)*x1306*x1307*x1308))))), (x1303*((x1309+x1310+(((-1.0)*x1307*x1308))+((x1304*x1307))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1313=IKsin(j1);
IkReal x1314=IKcos(j1);
CheckValue<IkReal> x1334=IKPowWithIntegerCheck(sj2,-1);
if(!x1334.valid){
continue;
}
IkReal x1315=x1334.value;
IkReal x1316=(cj4*cj6);
IkReal x1317=((1.0)*r10);
IkReal x1318=((0.401724609375)*cj3);
IkReal x1319=((0.088)*sj6);
IkReal x1320=(cj6*sj5);
IkReal x1321=(sj4*sj6);
IkReal x1322=(r11*sj6);
IkReal x1323=(cj4*cj5);
IkReal x1324=(pz*x1315);
IkReal x1325=((0.088)*cj6);
IkReal x1326=((1.0)*r00);
IkReal x1327=(cj4*sj6);
IkReal x1328=(r01*sj6);
IkReal x1329=((1.0)*x1314);
IkReal x1330=((1.0)*cj6*sj4);
IkReal x1331=(cj2*x1314);
IkReal x1332=(sj3*x1313);
IkReal x1333=(cj3*x1313);
evalcond[0]=(x1333+((sj5*x1328))+(((-1.0)*cj2*sj3*x1329))+(((-1.0)*x1320*x1326)));
evalcond[1]=((((-1.0)*cj3*x1329))+((sj5*x1322))+(((-1.0)*cj2*x1332))+(((-1.0)*x1317*x1320)));
evalcond[2]=(((r00*x1327))+(((-1.0)*cj5*cj6*sj4*x1326))+((r01*x1316))+((cj5*r01*x1321))+(((-1.0)*sj2*x1329)));
evalcond[3]=((((-1.0)*cj5*cj6*sj4*x1317))+((r11*x1316))+((cj5*r11*x1321))+((r10*x1327))+(((-1.0)*sj2*x1313)));
evalcond[4]=(x1332+(((-1.0)*cj5*x1316*x1326))+((x1323*x1328))+(((-1.0)*x1321*x1326))+((cj3*x1331))+(((-1.0)*r01*x1330)));
evalcond[5]=((((-1.0)*cj5*x1316*x1317))+((x1322*x1323))+(((-1.0)*sj3*x1329))+((cj2*x1333))+(((-1.0)*r11*x1330))+(((-1.0)*x1317*x1321)));
evalcond[6]=(((r00*x1325))+((x1313*x1318))+(((0.298275390625)*x1313))+(((-1.0)*r01*x1319))+(((-1.0)*px))+((x1324*x1331))+(((0.21484375)*x1313*x1324)));
evalcond[7]=((((-0.21484375)*x1314*x1324))+(((-1.0)*x1314*x1318))+((r10*x1325))+(((-0.298275390625)*x1314))+((cj2*x1313*x1324))+(((-1.0)*r11*x1319))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1335=cj2*cj2;
IkReal x1336=cj3*cj3;
IkReal x1337=((1.0)*sj5);
IkReal x1338=(cj2*sj3);
IkReal x1339=(cj6*r00);
IkReal x1340=(cj3*sj6);
IkReal x1341=(r11*sj5);
IkReal x1342=(cj6*r10);
CheckValue<IkReal> x1343=IKPowWithIntegerCheck(IKsign((x1335+x1336+(((-1.0)*x1335*x1336)))),-1);
if(!x1343.valid){
continue;
}
CheckValue<IkReal> x1344 = IKatan2WithCheck(IkReal((((sj6*x1338*x1341))+((cj3*sj5*x1339))+(((-1.0)*x1337*x1338*x1342))+(((-1.0)*r01*x1337*x1340)))),IkReal((((r01*sj5*sj6*x1338))+((x1340*x1341))+(((-1.0)*x1337*x1338*x1339))+(((-1.0)*cj3*x1337*x1342)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1344.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1343.value)))+(x1344.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1345=IKsin(j1);
IkReal x1346=IKcos(j1);
CheckValue<IkReal> x1366=IKPowWithIntegerCheck(sj2,-1);
if(!x1366.valid){
continue;
}
IkReal x1347=x1366.value;
IkReal x1348=(cj4*cj6);
IkReal x1349=((1.0)*r10);
IkReal x1350=((0.401724609375)*cj3);
IkReal x1351=((0.088)*sj6);
IkReal x1352=(cj6*sj5);
IkReal x1353=(sj4*sj6);
IkReal x1354=(r11*sj6);
IkReal x1355=(cj4*cj5);
IkReal x1356=(pz*x1347);
IkReal x1357=((0.088)*cj6);
IkReal x1358=((1.0)*r00);
IkReal x1359=(cj4*sj6);
IkReal x1360=(r01*sj6);
IkReal x1361=((1.0)*x1346);
IkReal x1362=((1.0)*cj6*sj4);
IkReal x1363=(cj2*x1346);
IkReal x1364=(sj3*x1345);
IkReal x1365=(cj3*x1345);
evalcond[0]=(x1365+(((-1.0)*x1352*x1358))+(((-1.0)*cj2*sj3*x1361))+((sj5*x1360)));
evalcond[1]=(((sj5*x1354))+(((-1.0)*cj3*x1361))+(((-1.0)*cj2*x1364))+(((-1.0)*x1349*x1352)));
evalcond[2]=((((-1.0)*sj2*x1361))+((cj5*r01*x1353))+((r01*x1348))+(((-1.0)*cj5*cj6*sj4*x1358))+((r00*x1359)));
evalcond[3]=(((cj5*r11*x1353))+((r10*x1359))+(((-1.0)*sj2*x1345))+(((-1.0)*cj5*cj6*sj4*x1349))+((r11*x1348)));
evalcond[4]=(((x1355*x1360))+x1364+(((-1.0)*r01*x1362))+(((-1.0)*cj5*x1348*x1358))+((cj3*x1363))+(((-1.0)*x1353*x1358)));
evalcond[5]=((((-1.0)*r11*x1362))+(((-1.0)*sj3*x1361))+((x1354*x1355))+(((-1.0)*cj5*x1348*x1349))+((cj2*x1365))+(((-1.0)*x1349*x1353)));
evalcond[6]=(((x1356*x1363))+(((0.298275390625)*x1345))+((x1345*x1350))+(((0.21484375)*x1345*x1356))+(((-1.0)*px))+(((-1.0)*r01*x1351))+((r00*x1357)));
evalcond[7]=(((r10*x1357))+(((-1.0)*r11*x1351))+(((-1.0)*x1346*x1350))+((cj2*x1345*x1356))+(((-1.0)*py))+(((-0.21484375)*x1346*x1356))+(((-0.298275390625)*x1346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1368=IKPowWithIntegerCheck(r22,-1);
if(!x1368.valid){
continue;
}
IkReal x1367=x1368.value;
CheckValue<IkReal> x1369=IKPowWithIntegerCheck(sj4,-1);
if(!x1369.valid){
continue;
}
if( IKabs((cj2*x1367*(x1369.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj2*sj3*x1367)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj2*x1367*(x1369.value)))+IKsqr((sj2*sj3*x1367))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((cj2*x1367*(x1369.value)), (sj2*sj3*x1367));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1370=IKsin(j5);
IkReal x1371=((1.0)*r22*x1370);
evalcond[0]=(cj2+(((-1.0)*sj4*x1371)));
evalcond[1]=(((r22*(IKcos(j5))))+(((-1.0)*sj2*sj3)));
evalcond[2]=((((-1.0)*cj4*x1371))+((cj3*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[1];
IkReal x1372=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1372);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1372);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1373=sj2*sj2;
IkReal x1374=(cj3*sj2);
IkReal x1375=((8.0)*r01);
IkReal x1376=((4.0)*cj4);
IkReal x1377=((8.0)*r00);
IkReal x1378=((4.0)*r10);
IkReal x1379=((16.0)*r10);
IkReal x1380=((16.0)*r00);
IkReal x1381=((8.0)*r10);
IkReal x1382=(cj5*sj4);
IkReal x1383=((16.0)*r01);
IkReal x1384=(r11*x1382);
IkReal x1385=(sj5*x1373);
IkReal x1386=(cj2*sj2*sj3);
IkReal x1387=(cj4*x1386);
IkReal x1388=((4.0)*r00*x1382);
IkReal x1389=(((r11*x1374*x1376))+((x1386*x1388)));
IkReal x1390=(((x1378*x1382*x1386))+((x1374*x1388)));
IkReal x1391=(((r01*x1374*x1376))+((r11*x1376*x1386))+((x1378*x1385)));
IkReal x1392=(((x1374*x1378*x1382))+(((4.0)*r00*x1385))+((r01*x1376*x1386)));
j6eval[0]=((IKabs(((((-1.0)*x1389))+x1392)))+(((0.5)*(IKabs(((((-16.0)*x1384*x1386))+(((-1.0)*cj4*x1374*x1380))+(((16.0)*r11*x1385))+(((-1.0)*x1374*x1382*x1383))+(((-1.0)*x1379*x1387)))))))+(((0.5)*(IKabs((x1390+(((-1.0)*x1391)))))))+(((0.5)*(IKabs(((((16.0)*x1374*x1384))+(((-1.0)*x1380*x1387))+(((-1.0)*x1382*x1383*x1386))+((cj4*x1374*x1379))+((x1383*x1385)))))))+(IKabs(((((-1.0)*x1374*x1375*x1382))+(((-8.0)*x1384*x1386))+(((-1.0)*x1381*x1387))+(((8.0)*r11*x1385))+(((-1.0)*cj4*x1374*x1377)))))+(IKabs((x1391+(((-1.0)*x1390)))))+(((0.5)*(IKabs((x1389+(((-1.0)*x1392)))))))+(IKabs(((((8.0)*x1374*x1384))+(((-1.0)*x1377*x1387))+((cj4*x1374*x1381))+((x1375*x1385))+(((-1.0)*x1375*x1382*x1386))))));
if( IKabs(j6eval[0]) < 0.0000000100000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j6evalpoly[1];
IkReal x1393=sj2*sj2;
IkReal x1394=(cj3*r01);
IkReal x1395=(cj4*sj2);
IkReal x1396=(cj3*r00);
IkReal x1397=((4.0)*x1395);
IkReal x1398=(cj2*r11*sj3);
IkReal x1399=(cj2*r10*sj3);
IkReal x1400=((16.0)*cj5*sj2*sj4);
IkReal x1401=(r11*sj5*x1393);
IkReal x1402=((8.0)*cj5*sj2*sj4);
IkReal x1403=((4.0)*cj5*sj2*sj4);
IkReal x1404=(((x1396*x1403))+((x1399*x1403)));
IkReal x1405=((((4.0)*r10*sj5*x1393))+((x1394*x1397))+((x1397*x1398)));
IkReal x1406=((((-1.0)*x1404))+x1405);
IkReal x1407=((((8.0)*x1401))+(((-1.0)*x1398*x1402))+(((-8.0)*x1395*x1399))+(((-8.0)*x1395*x1396))+(((-1.0)*x1394*x1402)));
IkReal x1408=((((-1.0)*x1405))+x1404);
op[0]=x1406;
op[1]=x1407;
op[2]=x1406;
op[3]=((((-16.0)*x1395*x1399))+(((-16.0)*x1395*x1396))+(((-1.0)*x1398*x1400))+(((16.0)*x1401))+(((-1.0)*x1394*x1400)));
op[4]=x1408;
op[5]=x1407;
op[6]=x1408;
polyroots6(op,zeror,numroots);
IkReal j6array[6], cj6array[6], sj6array[6], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[6]={true,true,true,true,true,true};
_nj6 = 6;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

IkReal x1409=sj2*sj2;
IkReal x1410=(cj2*sj3);
IkReal x1411=(cj3*r10);
IkReal x1412=((16.0)*sj2);
IkReal x1413=((4.0)*r00);
IkReal x1414=((8.0)*cj4*sj2);
IkReal x1415=(cj5*r01*sj4);
IkReal x1416=((4.0)*cj4*sj2);
IkReal x1417=(cj3*cj5*sj2*sj4);
IkReal x1418=(r01*sj5*x1409);
IkReal x1419=(cj3*r11*x1416);
IkReal x1420=(cj5*sj2*sj4*x1410*x1413);
IkReal x1421=(x1420+x1419);
IkReal x1422=(((sj5*x1409*x1413))+(((4.0)*cj5*sj2*sj4*x1411))+((r01*x1410*x1416)));
IkReal x1423=(x1422+(((-1.0)*x1421)));
IkReal x1424=((((-1.0)*r00*x1410*x1414))+(((8.0)*r11*x1417))+((x1411*x1414))+(((8.0)*x1418))+(((-8.0)*sj2*x1410*x1415)));
j6evalpoly[0]=(((x1423*(htj6*htj6*htj6*htj6*htj6*htj6)))+(((htj6*htj6)*((x1421+(((-1.0)*x1422))))))+((x1424*(htj6*htj6*htj6*htj6*htj6)))+(((htj6*htj6*htj6)*((((cj4*x1411*x1412))+((cj3*cj5*r11*sj4*x1412))+(((-1.0)*x1410*x1412*x1415))+(((16.0)*x1418))+(((-1.0)*cj4*r00*x1410*x1412))))))+x1421+((x1423*(htj6*htj6*htj6*htj6)))+((htj6*x1424))+(((-1.0)*x1422)));
if( IKabs(j6evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal j1eval[3];
IkReal x1425=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1425);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1425);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1426=cj2*cj2;
IkReal x1427=cj3*cj3;
IkReal x1428=sj5*sj5;
IkReal x1429=sj6*sj6;
IkReal x1430=cj6*cj6;
IkReal x1431=sj3*sj3;
IkReal x1432=(x1428*x1430);
IkReal x1433=(x1426*x1431);
IkReal x1434=(x1428*x1429);
IkReal x1435=((((-1.0)*x1426*x1427))+x1427+x1426);
j1eval[0]=x1435;
j1eval[1]=IKsign(x1435);
j1eval[2]=(((x1432*x1433))+((x1433*x1434))+((x1427*x1434))+((x1427*x1432)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1436=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1436);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1436);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j1eval[0]=cj3;
j1eval[1]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x1437=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1437);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1437);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j1eval[0]=sj2;
j1eval[1]=cj2;
j1eval[2]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1446=IKPowWithIntegerCheck(sj2,-1);
if(!x1446.valid){
continue;
}
IkReal x1438=x1446.value;
IkReal x1439=(cj3*r10);
IkReal x1440=((1.0)*cj6);
IkReal x1441=(cj5*sj4);
IkReal x1442=(cj4*sj6);
IkReal x1443=(sj2*sj5);
IkReal x1444=(r11*sj6);
IkReal x1445=(cj4*cj6*r11);
CheckValue<IkReal> x1447=IKPowWithIntegerCheck(cj2,-1);
if(!x1447.valid){
continue;
}
CheckValue<IkReal> x1448=IKPowWithIntegerCheck(sj3,-1);
if(!x1448.valid){
continue;
}
if( IKabs((x1438*(((((-1.0)*r10*x1440*x1441))+((r10*x1442))+((x1441*x1444))+x1445)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1438*(x1447.value)*(x1448.value)*((((x1439*x1442))+(((-1.0)*x1439*x1440*x1441))+((cj3*x1445))+((r01*sj6*x1443))+((cj3*x1441*x1444))+(((-1.0)*r00*x1440*x1443)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1438*(((((-1.0)*r10*x1440*x1441))+((r10*x1442))+((x1441*x1444))+x1445))))+IKsqr((x1438*(x1447.value)*(x1448.value)*((((x1439*x1442))+(((-1.0)*x1439*x1440*x1441))+((cj3*x1445))+((r01*sj6*x1443))+((cj3*x1441*x1444))+(((-1.0)*r00*x1440*x1443))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x1438*(((((-1.0)*r10*x1440*x1441))+((r10*x1442))+((x1441*x1444))+x1445))), (x1438*(x1447.value)*(x1448.value)*((((x1439*x1442))+(((-1.0)*x1439*x1440*x1441))+((cj3*x1445))+((r01*sj6*x1443))+((cj3*x1441*x1444))+(((-1.0)*r00*x1440*x1443))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1449=IKsin(j1);
IkReal x1450=IKcos(j1);
CheckValue<IkReal> x1470=IKPowWithIntegerCheck(sj2,-1);
if(!x1470.valid){
continue;
}
IkReal x1451=x1470.value;
IkReal x1452=(cj4*cj6);
IkReal x1453=((1.0)*r10);
IkReal x1454=((0.401724609375)*cj3);
IkReal x1455=((0.088)*sj6);
IkReal x1456=(cj6*sj5);
IkReal x1457=(sj4*sj6);
IkReal x1458=(r11*sj6);
IkReal x1459=(cj4*cj5);
IkReal x1460=(pz*x1451);
IkReal x1461=((0.088)*cj6);
IkReal x1462=((1.0)*r00);
IkReal x1463=(cj4*sj6);
IkReal x1464=(r01*sj6);
IkReal x1465=((1.0)*x1450);
IkReal x1466=((1.0)*cj6*sj4);
IkReal x1467=(cj2*x1450);
IkReal x1468=(sj3*x1449);
IkReal x1469=(cj3*x1449);
evalcond[0]=((((-1.0)*x1456*x1462))+x1469+(((-1.0)*cj2*sj3*x1465))+((sj5*x1464)));
evalcond[1]=((((-1.0)*cj2*x1468))+((sj5*x1458))+(((-1.0)*cj3*x1465))+(((-1.0)*x1453*x1456)));
evalcond[2]=(((cj5*r01*x1457))+((r00*x1463))+((r01*x1452))+(((-1.0)*cj5*cj6*sj4*x1462))+(((-1.0)*sj2*x1465)));
evalcond[3]=(((r11*x1452))+((cj5*r11*x1457))+((r10*x1463))+(((-1.0)*cj5*cj6*sj4*x1453))+(((-1.0)*sj2*x1449)));
evalcond[4]=(((cj3*x1467))+((x1459*x1464))+(((-1.0)*r01*x1466))+(((-1.0)*cj5*x1452*x1462))+(((-1.0)*x1457*x1462))+x1468);
evalcond[5]=((((-1.0)*cj5*x1452*x1453))+((cj2*x1469))+((x1458*x1459))+(((-1.0)*x1453*x1457))+(((-1.0)*r11*x1466))+(((-1.0)*sj3*x1465)));
evalcond[6]=(((r00*x1461))+(((-1.0)*px))+(((-1.0)*r01*x1455))+((x1460*x1467))+(((0.298275390625)*x1449))+((x1449*x1454))+(((0.21484375)*x1449*x1460)));
evalcond[7]=((((-0.21484375)*x1450*x1460))+(((-1.0)*py))+(((-0.298275390625)*x1450))+((cj2*x1449*x1460))+((r10*x1461))+(((-1.0)*r11*x1455))+(((-1.0)*x1450*x1454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1479=IKPowWithIntegerCheck(sj2,-1);
if(!x1479.valid){
continue;
}
IkReal x1471=x1479.value;
IkReal x1472=(r01*sj6);
IkReal x1473=(sj2*sj5);
IkReal x1474=(cj2*sj3);
IkReal x1475=(cj5*sj4);
IkReal x1476=(cj6*r00);
IkReal x1477=(cj4*cj6*r01);
IkReal x1478=(cj4*r00*sj6);
CheckValue<IkReal> x1480=IKPowWithIntegerCheck(cj3,-1);
if(!x1480.valid){
continue;
}
if( IKabs((x1471*(x1480.value)*((((x1472*x1474*x1475))+((x1474*x1478))+((x1474*x1477))+((x1473*x1476))+(((-1.0)*x1474*x1475*x1476))+(((-1.0)*x1472*x1473)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1471*((((x1472*x1475))+x1477+x1478+(((-1.0)*x1475*x1476)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1471*(x1480.value)*((((x1472*x1474*x1475))+((x1474*x1478))+((x1474*x1477))+((x1473*x1476))+(((-1.0)*x1474*x1475*x1476))+(((-1.0)*x1472*x1473))))))+IKsqr((x1471*((((x1472*x1475))+x1477+x1478+(((-1.0)*x1475*x1476))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x1471*(x1480.value)*((((x1472*x1474*x1475))+((x1474*x1478))+((x1474*x1477))+((x1473*x1476))+(((-1.0)*x1474*x1475*x1476))+(((-1.0)*x1472*x1473))))), (x1471*((((x1472*x1475))+x1477+x1478+(((-1.0)*x1475*x1476))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1481=IKsin(j1);
IkReal x1482=IKcos(j1);
CheckValue<IkReal> x1502=IKPowWithIntegerCheck(sj2,-1);
if(!x1502.valid){
continue;
}
IkReal x1483=x1502.value;
IkReal x1484=(cj4*cj6);
IkReal x1485=((1.0)*r10);
IkReal x1486=((0.401724609375)*cj3);
IkReal x1487=((0.088)*sj6);
IkReal x1488=(cj6*sj5);
IkReal x1489=(sj4*sj6);
IkReal x1490=(r11*sj6);
IkReal x1491=(cj4*cj5);
IkReal x1492=(pz*x1483);
IkReal x1493=((0.088)*cj6);
IkReal x1494=((1.0)*r00);
IkReal x1495=(cj4*sj6);
IkReal x1496=(r01*sj6);
IkReal x1497=((1.0)*x1482);
IkReal x1498=((1.0)*cj6*sj4);
IkReal x1499=(cj2*x1482);
IkReal x1500=(sj3*x1481);
IkReal x1501=(cj3*x1481);
evalcond[0]=(((sj5*x1496))+x1501+(((-1.0)*x1488*x1494))+(((-1.0)*cj2*sj3*x1497)));
evalcond[1]=((((-1.0)*cj2*x1500))+((sj5*x1490))+(((-1.0)*cj3*x1497))+(((-1.0)*x1485*x1488)));
evalcond[2]=(((r00*x1495))+((r01*x1484))+(((-1.0)*sj2*x1497))+(((-1.0)*cj5*cj6*sj4*x1494))+((cj5*r01*x1489)));
evalcond[3]=(((r10*x1495))+((cj5*r11*x1489))+((r11*x1484))+(((-1.0)*sj2*x1481))+(((-1.0)*cj5*cj6*sj4*x1485)));
evalcond[4]=(((cj3*x1499))+(((-1.0)*r01*x1498))+((x1491*x1496))+x1500+(((-1.0)*cj5*x1484*x1494))+(((-1.0)*x1489*x1494)));
evalcond[5]=(((cj2*x1501))+(((-1.0)*r11*x1498))+(((-1.0)*x1485*x1489))+(((-1.0)*sj3*x1497))+(((-1.0)*cj5*x1484*x1485))+((x1490*x1491)));
evalcond[6]=(((r00*x1493))+(((-1.0)*r01*x1487))+((x1481*x1486))+(((0.298275390625)*x1481))+(((-1.0)*px))+((x1492*x1499))+(((0.21484375)*x1481*x1492)));
evalcond[7]=((((-1.0)*x1482*x1486))+((r10*x1493))+(((-0.21484375)*x1482*x1492))+(((-1.0)*r11*x1487))+(((-1.0)*py))+((cj2*x1481*x1492))+(((-0.298275390625)*x1482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1503=cj2*cj2;
IkReal x1504=cj3*cj3;
IkReal x1505=((1.0)*sj5);
IkReal x1506=(cj2*sj3);
IkReal x1507=(cj6*r00);
IkReal x1508=(cj3*sj6);
IkReal x1509=(r11*sj5);
IkReal x1510=(cj6*r10);
CheckValue<IkReal> x1511 = IKatan2WithCheck(IkReal((((cj3*sj5*x1507))+((sj6*x1506*x1509))+(((-1.0)*x1505*x1506*x1510))+(((-1.0)*r01*x1505*x1508)))),IkReal((((x1508*x1509))+(((-1.0)*x1505*x1506*x1507))+(((-1.0)*cj3*x1505*x1510))+((r01*sj5*sj6*x1506)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1511.valid){
continue;
}
CheckValue<IkReal> x1512=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1503*x1504))+x1503+x1504)),-1);
if(!x1512.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1511.value)+(((1.5707963267949)*(x1512.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1513=IKsin(j1);
IkReal x1514=IKcos(j1);
CheckValue<IkReal> x1534=IKPowWithIntegerCheck(sj2,-1);
if(!x1534.valid){
continue;
}
IkReal x1515=x1534.value;
IkReal x1516=(cj4*cj6);
IkReal x1517=((1.0)*r10);
IkReal x1518=((0.401724609375)*cj3);
IkReal x1519=((0.088)*sj6);
IkReal x1520=(cj6*sj5);
IkReal x1521=(sj4*sj6);
IkReal x1522=(r11*sj6);
IkReal x1523=(cj4*cj5);
IkReal x1524=(pz*x1515);
IkReal x1525=((0.088)*cj6);
IkReal x1526=((1.0)*r00);
IkReal x1527=(cj4*sj6);
IkReal x1528=(r01*sj6);
IkReal x1529=((1.0)*x1514);
IkReal x1530=((1.0)*cj6*sj4);
IkReal x1531=(cj2*x1514);
IkReal x1532=(sj3*x1513);
IkReal x1533=(cj3*x1513);
evalcond[0]=(((sj5*x1528))+x1533+(((-1.0)*cj2*sj3*x1529))+(((-1.0)*x1520*x1526)));
evalcond[1]=(((sj5*x1522))+(((-1.0)*cj2*x1532))+(((-1.0)*cj3*x1529))+(((-1.0)*x1517*x1520)));
evalcond[2]=((((-1.0)*sj2*x1529))+((r00*x1527))+((cj5*r01*x1521))+((r01*x1516))+(((-1.0)*cj5*cj6*sj4*x1526)));
evalcond[3]=(((r10*x1527))+((r11*x1516))+(((-1.0)*sj2*x1513))+((cj5*r11*x1521))+(((-1.0)*cj5*cj6*sj4*x1517)));
evalcond[4]=((((-1.0)*r01*x1530))+((x1523*x1528))+((cj3*x1531))+(((-1.0)*cj5*x1516*x1526))+x1532+(((-1.0)*x1521*x1526)));
evalcond[5]=((((-1.0)*r11*x1530))+(((-1.0)*sj3*x1529))+((x1522*x1523))+(((-1.0)*cj5*x1516*x1517))+((cj2*x1533))+(((-1.0)*x1517*x1521)));
evalcond[6]=(((x1513*x1518))+((x1524*x1531))+(((-1.0)*r01*x1519))+((r00*x1525))+(((-1.0)*px))+(((0.21484375)*x1513*x1524))+(((0.298275390625)*x1513)));
evalcond[7]=(((r10*x1525))+(((-0.21484375)*x1514*x1524))+(((-1.0)*py))+(((-0.298275390625)*x1514))+(((-1.0)*x1514*x1518))+((cj2*x1513*x1524))+(((-1.0)*r11*x1519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j5, j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1535=((0.0825)*sj2);
CheckValue<IkReal> x1538 = IKatan2WithCheck(IkReal(((0.088)*r20)),IkReal(((-0.088)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1538.valid){
continue;
}
IkReal x1536=((1.0)*(x1538.value));
if((((((0.007744)*(r20*r20)))+(((0.007744)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1539=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.007744)*(r20*r20)))+(((0.007744)*(r21*r21)))))),-1);
if(!x1539.valid){
continue;
}
if( (((x1539.value)*(((((-1.0)*pz))+x1535+(((-0.384)*sj2*sj3))+(((-1.0)*cj3*x1535)))))) < -1-IKFAST_SINCOS_THRESH || (((x1539.value)*(((((-1.0)*pz))+x1535+(((-0.384)*sj2*sj3))+(((-1.0)*cj3*x1535)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1537=IKasin(((x1539.value)*(((((-1.0)*pz))+x1535+(((-0.384)*sj2*sj3))+(((-1.0)*cj3*x1535))))));
j6array[0]=((((-1.0)*x1537))+(((-1.0)*x1536)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1536))+x1537);
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal j5eval[2];
IkReal x1540=cj6*cj6;
IkReal x1541=r21*r21;
IkReal x1542=(sj4*x1541);
IkReal x1543=(((sj4*x1540*(r20*r20)))+((sj4*(r22*r22)))+x1542+(((-1.0)*x1540*x1542))+(((-2.0)*cj6*r20*r21*sj4*sj6)));
j5eval[0]=x1543;
j5eval[1]=IKsign(x1543);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x1544=cj6*cj6;
IkReal x1545=r21*r21;
IkReal x1546=(cj4*x1545);
IkReal x1547=((((-1.0)*x1544*x1546))+(((-2.0)*cj4*cj6*r20*r21*sj6))+x1546+((cj4*x1544*(r20*r20)))+((cj4*(r22*r22))));
j5eval[0]=x1547;
j5eval[1]=IKsign(x1547);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1548=cj2*cj2;
IkReal x1549=cj3*cj3;
IkReal x1550=(cj3*sj3);
IkReal x1551=((0.14064975)*x1549);
IkReal x1552=((0.06336)*x1548);
IkReal x1553=(cj3*x1548);
IkReal x1554=((4.65454545454545)*x1548);
IkReal x1555=((10.3323966942149)*x1549);
j1eval[0]=((7.83561065197429)+(((11.3323966942149)*x1548))+(((-4.65454545454545)*x1550))+(((-1.0)*x1553))+((x1550*x1554))+(((17.8283195592286)*cj3))+(((-1.0)*x1548*x1555))+x1555+(((-3.83030303030303)*sj3))+(((-1.0)*sj3*x1554)));
j1eval[1]=IKsign(((0.10666225)+(((-0.06336)*x1550))+((x1550*x1552))+(((-0.05214)*sj3))+(((-1.0)*x1548*x1551))+x1551+(((-0.0136125)*x1553))+(((-1.0)*sj3*x1552))+(((0.15426225)*x1548))+(((0.242688)*cj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x1556=cj3*cj3;
IkReal x1557=(cj6*sj3);
IkReal x1558=(r10*sj6);
IkReal x1559=(r00*sj6);
IkReal x1560=((1.0)*cj2*cj3);
IkReal x1561=(cj6*x1560);
IkReal x1562=((-1.0)+x1556+(((-1.0)*x1556*(cj2*cj2))));
j1eval[0]=x1562;
j1eval[1]=IKsign(x1562);
j1eval[2]=((IKabs(((((-1.0)*x1559*x1560))+((r11*x1557))+(((-1.0)*r01*x1561))+((sj3*x1558)))))+(IKabs(((((-1.0)*sj3*x1559))+(((-1.0)*r11*x1561))+(((-1.0)*r01*x1557))+(((-1.0)*x1558*x1560))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x1563=cj6*cj6;
IkReal x1564=r21*r21;
IkReal x1565=(sj2*sj3);
IkReal x1566=(cj6*r20);
IkReal x1567=(r21*sj6);
IkReal x1568=((r22*r22)+((x1563*(r20*r20)))+x1564+(((-2.0)*x1566*x1567))+(((-1.0)*x1563*x1564)));
j5eval[0]=x1568;
j5eval[1]=IKsign(x1568);
j5eval[2]=((IKabs((((cj2*x1566))+((r22*x1565))+(((-1.0)*cj2*x1567)))))+(IKabs((((cj2*r22))+(((-1.0)*x1565*x1566))+((x1565*x1567))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x1569=(cj2*cj3);
IkReal x1570=(cj2*sj3);
j1eval[0]=((((3.83030303030303)*x1569))+(((4.65454545454545)*cj2))+(((-1.0)*x1570)));
j1eval[1]=IKsign(((((-0.0825)*x1570))+(((0.316)*x1569))+(((0.384)*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1571=(r00*sj3);
IkReal x1572=((0.088)*cj6);
IkReal x1573=(r00*sj6);
IkReal x1574=((0.0825)*cj2);
IkReal x1575=(cj6*r01);
IkReal x1576=(cj2*sj6);
IkReal x1577=(cj2*cj3);
IkReal x1578=((0.088)*r01);
IkReal x1579=((0.384)*cj2);
IkReal x1580=((0.384)*cj3);
CheckValue<IkReal> x1581 = IKatan2WithCheck(IkReal((((cj3*x1574*x1575))+(((0.384)*x1571*x1576))+(((-1.0)*x1573*x1574))+((sj3*x1575*x1579))+((cj3*x1576*x1578))+(((-1.0)*r00*x1572*x1577))+((cj3*x1573*x1574))+(((-1.0)*x1574*x1575))+((px*x1577)))),IkReal(((((-1.0)*sj3*sj6*x1578))+((x1571*x1572))+(((0.316)*x1575))+(((0.316)*x1573))+((x1573*x1580))+((x1575*x1580))+(((-0.0825)*sj6*x1571))+(((-1.0)*px*sj3))+(((-0.0825)*sj3*x1575)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1581.valid){
continue;
}
CheckValue<IkReal> x1582=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj3*x1574))+(((0.316)*x1577))+x1579)),-1);
if(!x1582.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1581.value)+(((1.5707963267949)*(x1582.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1583=IKsin(j1);
IkReal x1584=IKcos(j1);
IkReal x1585=(cj2*cj3);
IkReal x1586=((1.0)*sj6);
IkReal x1587=((0.088)*sj6);
IkReal x1588=((0.384)*cj3);
IkReal x1589=((0.088)*cj6);
IkReal x1590=((1.0)*cj6);
IkReal x1591=((0.384)*cj2);
IkReal x1592=((0.0825)*x1583);
IkReal x1593=(sj3*x1583);
IkReal x1594=(sj3*x1584);
IkReal x1595=((0.0825)*x1584);
evalcond[0]=(((x1584*x1585))+(((-1.0)*r00*x1586))+(((-1.0)*r01*x1590))+x1593);
evalcond[1]=(((x1583*x1585))+(((-1.0)*x1594))+(((-1.0)*r11*x1590))+(((-1.0)*r10*x1586)));
evalcond[2]=((((-1.0)*x1585*x1595))+(((0.316)*x1583))+(((-1.0)*r01*x1587))+(((-1.0)*px))+((x1583*x1588))+(((-1.0)*x1591*x1594))+((cj2*x1595))+(((-1.0)*sj3*x1592))+((r00*x1589)));
evalcond[3]=((((-1.0)*r11*x1587))+(((0.0825)*x1594))+(((-1.0)*x1585*x1592))+(((-1.0)*x1584*x1588))+(((-0.316)*x1584))+(((-1.0)*py))+(((-1.0)*x1591*x1593))+((cj2*x1592))+((r10*x1589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x1596=(sj1*sj2);
IkReal x1597=((1.0)*cj6);
IkReal x1598=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x1598;
j5eval[1]=IKsign(x1598);
j5eval[2]=((IKabs((((cj2*r11*sj6))+(((-1.0)*r20*x1596*x1597))+(((-1.0)*cj2*r10*x1597))+((r21*sj6*x1596)))))+(IKabs((((cj2*r12))+((r22*x1596))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x1599=(cj1*sj2);
IkReal x1600=((1.0)*cj2);
IkReal x1601=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x1601;
j5eval[1]=((IKabs(((((-1.0)*r22*x1599))+(((-1.0)*r02*x1600)))))+(IKabs((((cj6*r20*x1599))+((cj2*cj6*r00))+(((-1.0)*r21*sj6*x1599))+(((-1.0)*r01*sj6*x1600))))));
j5eval[2]=IKsign(x1601);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x1602=cj6*cj6;
IkReal x1603=r21*r21;
IkReal x1604=(sj2*sj3);
IkReal x1605=(cj6*r20);
IkReal x1606=(r21*sj6);
IkReal x1607=((r22*r22)+x1603+(((-1.0)*x1602*x1603))+((x1602*(r20*r20)))+(((-2.0)*x1605*x1606)));
j5eval[0]=x1607;
j5eval[1]=IKsign(x1607);
j5eval[2]=((IKabs(((((-1.0)*x1604*x1605))+((cj2*r22))+((x1604*x1606)))))+(IKabs(((((-1.0)*cj2*x1606))+((r22*x1604))+((cj2*x1605))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1608=cj6*cj6;
IkReal x1609=r21*r21;
IkReal x1610=(sj2*sj3);
IkReal x1611=(cj6*r20);
IkReal x1612=(r21*sj6);
CheckValue<IkReal> x1613=IKPowWithIntegerCheck(IKsign(((((-2.0)*x1611*x1612))+(r22*r22)+x1609+((x1608*(r20*r20)))+(((-1.0)*x1608*x1609)))),-1);
if(!x1613.valid){
continue;
}
CheckValue<IkReal> x1614 = IKatan2WithCheck(IkReal(((((-1.0)*x1610*x1611))+((cj2*r22))+((x1610*x1612)))),IkReal(((((-1.0)*cj2*x1612))+((cj2*x1611))+((r22*x1610)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1614.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1613.value)))+(x1614.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1615=IKcos(j5);
IkReal x1616=IKsin(j5);
IkReal x1617=((1.0)*sj2);
IkReal x1618=(sj6*x1616);
IkReal x1619=((1.0)*cj2*sj3);
IkReal x1620=((1.0)*x1616);
IkReal x1621=(sj6*x1615);
IkReal x1622=(cj6*x1620);
IkReal x1623=((1.0)*cj6*x1615);
evalcond[0]=((((-1.0)*r20*x1623))+cj2+((r21*x1621))+(((-1.0)*r22*x1620)));
evalcond[1]=((((-1.0)*r20*x1622))+((r21*x1618))+((r22*x1615))+(((-1.0)*sj3*x1617)));
evalcond[2]=(((r01*x1621))+(((-1.0)*r00*x1623))+(((-1.0)*r02*x1620))+(((-1.0)*cj1*x1617)));
evalcond[3]=((((-1.0)*r12*x1620))+((r11*x1621))+(((-1.0)*r10*x1623))+(((-1.0)*sj1*x1617)));
evalcond[4]=(((r01*x1618))+(((-1.0)*r00*x1622))+((r02*x1615))+((cj3*sj1))+(((-1.0)*cj1*x1619)));
evalcond[5]=((((-1.0)*cj1*cj3))+((r12*x1615))+((r11*x1618))+(((-1.0)*r10*x1622))+(((-1.0)*sj1*x1619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1624=(cj1*sj2);
IkReal x1625=((1.0)*cj2);
CheckValue<IkReal> x1626 = IKatan2WithCheck(IkReal((((cj6*r20*x1624))+((cj2*cj6*r00))+(((-1.0)*r21*sj6*x1624))+(((-1.0)*r01*sj6*x1625)))),IkReal(((((-1.0)*r22*x1624))+(((-1.0)*r02*x1625)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1626.valid){
continue;
}
CheckValue<IkReal> x1627=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x1627.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1626.value)+(((1.5707963267949)*(x1627.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1628=IKcos(j5);
IkReal x1629=IKsin(j5);
IkReal x1630=((1.0)*sj2);
IkReal x1631=(sj6*x1629);
IkReal x1632=((1.0)*cj2*sj3);
IkReal x1633=((1.0)*x1629);
IkReal x1634=(sj6*x1628);
IkReal x1635=(cj6*x1633);
IkReal x1636=((1.0)*cj6*x1628);
evalcond[0]=(((r21*x1634))+(((-1.0)*r22*x1633))+cj2+(((-1.0)*r20*x1636)));
evalcond[1]=(((r21*x1631))+(((-1.0)*sj3*x1630))+(((-1.0)*r20*x1635))+((r22*x1628)));
evalcond[2]=((((-1.0)*r00*x1636))+(((-1.0)*cj1*x1630))+((r01*x1634))+(((-1.0)*r02*x1633)));
evalcond[3]=((((-1.0)*sj1*x1630))+((r11*x1634))+(((-1.0)*r12*x1633))+(((-1.0)*r10*x1636)));
evalcond[4]=(((r02*x1628))+(((-1.0)*r00*x1635))+(((-1.0)*cj1*x1632))+((r01*x1631))+((cj3*sj1)));
evalcond[5]=((((-1.0)*sj1*x1632))+((r11*x1631))+(((-1.0)*cj1*cj3))+(((-1.0)*r10*x1635))+((r12*x1628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1637=((1.0)*cj6);
IkReal x1638=(sj1*sj2);
CheckValue<IkReal> x1639=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x1639.valid){
continue;
}
CheckValue<IkReal> x1640 = IKatan2WithCheck(IkReal((((cj2*r11*sj6))+(((-1.0)*cj2*r10*x1637))+(((-1.0)*r20*x1637*x1638))+((r21*sj6*x1638)))),IkReal((((cj2*r12))+((r22*x1638)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1640.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1639.value)))+(x1640.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1641=IKcos(j5);
IkReal x1642=IKsin(j5);
IkReal x1643=((1.0)*sj2);
IkReal x1644=(sj6*x1642);
IkReal x1645=((1.0)*cj2*sj3);
IkReal x1646=((1.0)*x1642);
IkReal x1647=(sj6*x1641);
IkReal x1648=(cj6*x1646);
IkReal x1649=((1.0)*cj6*x1641);
evalcond[0]=(((r21*x1647))+cj2+(((-1.0)*r22*x1646))+(((-1.0)*r20*x1649)));
evalcond[1]=((((-1.0)*sj3*x1643))+((r21*x1644))+(((-1.0)*r20*x1648))+((r22*x1641)));
evalcond[2]=((((-1.0)*r00*x1649))+(((-1.0)*cj1*x1643))+((r01*x1647))+(((-1.0)*r02*x1646)));
evalcond[3]=(((r11*x1647))+(((-1.0)*sj1*x1643))+(((-1.0)*r12*x1646))+(((-1.0)*r10*x1649)));
evalcond[4]=(((r02*x1641))+(((-1.0)*r00*x1648))+(((-1.0)*cj1*x1645))+((r01*x1644))+((cj3*sj1)));
evalcond[5]=(((r11*x1644))+(((-1.0)*sj1*x1645))+((r12*x1641))+(((-1.0)*cj1*cj3))+(((-1.0)*r10*x1648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1650=cj6*cj6;
IkReal x1651=r21*r21;
IkReal x1652=(sj2*sj3);
IkReal x1653=(cj6*r20);
IkReal x1654=(r21*sj6);
CheckValue<IkReal> x1655 = IKatan2WithCheck(IkReal((((cj2*r22))+(((-1.0)*x1652*x1653))+((x1652*x1654)))),IkReal((((r22*x1652))+((cj2*x1653))+(((-1.0)*cj2*x1654)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1655.valid){
continue;
}
CheckValue<IkReal> x1656=IKPowWithIntegerCheck(IKsign(((r22*r22)+x1651+(((-1.0)*x1650*x1651))+((x1650*(r20*r20)))+(((-2.0)*x1653*x1654)))),-1);
if(!x1656.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1655.value)+(((1.5707963267949)*(x1656.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x1657=IKcos(j5);
IkReal x1658=IKsin(j5);
IkReal x1659=(r21*sj6);
IkReal x1660=(cj6*r20);
IkReal x1661=((1.0)*x1658);
evalcond[0]=(cj2+(((-1.0)*r22*x1661))+((x1657*x1659))+(((-1.0)*x1657*x1660)));
evalcond[1]=(((r22*x1657))+(((-1.0)*sj2*sj3))+((x1658*x1659))+(((-1.0)*x1660*x1661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x1662=cj3*cj3;
IkReal x1663=(cj6*sj3);
IkReal x1664=(r10*sj6);
IkReal x1665=(r00*sj6);
IkReal x1666=((1.0)*cj2*cj3);
IkReal x1667=(cj6*x1666);
IkReal x1668=((-1.0)+x1662+(((-1.0)*x1662*(cj2*cj2))));
j1eval[0]=x1668;
j1eval[1]=IKsign(x1668);
j1eval[2]=((IKabs(((((-1.0)*r01*x1667))+((r11*x1663))+((sj3*x1664))+(((-1.0)*x1665*x1666)))))+(IKabs(((((-1.0)*r01*x1663))+(((-1.0)*r11*x1667))+(((-1.0)*sj3*x1665))+(((-1.0)*x1664*x1666))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j1eval[0]=sj2;
j1eval[1]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j1eval[0]=sj2;
j1eval[1]=cj2;
j1eval[2]=cj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1673=IKPowWithIntegerCheck(sj2,-1);
if(!x1673.valid){
continue;
}
IkReal x1669=x1673.value;
IkReal x1670=(r12*sj5);
IkReal x1671=(cj5*cj6*r10);
IkReal x1672=(cj5*r11*sj6);
CheckValue<IkReal> x1674=IKPowWithIntegerCheck(cj2,-1);
if(!x1674.valid){
continue;
}
CheckValue<IkReal> x1675=IKPowWithIntegerCheck(cj3,-1);
if(!x1675.valid){
continue;
}
if( IKabs((x1669*((x1672+(((-1.0)*x1670))+(((-1.0)*x1671)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1669*(x1674.value)*(x1675.value)*(((((-1.0)*sj3*x1672))+((cj6*r01*sj2))+((sj3*x1671))+((sj3*x1670))+((r00*sj2*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1669*((x1672+(((-1.0)*x1670))+(((-1.0)*x1671))))))+IKsqr((x1669*(x1674.value)*(x1675.value)*(((((-1.0)*sj3*x1672))+((cj6*r01*sj2))+((sj3*x1671))+((sj3*x1670))+((r00*sj2*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x1669*((x1672+(((-1.0)*x1670))+(((-1.0)*x1671))))), (x1669*(x1674.value)*(x1675.value)*(((((-1.0)*sj3*x1672))+((cj6*r01*sj2))+((sj3*x1671))+((sj3*x1670))+((r00*sj2*sj6))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1676=IKsin(j1);
IkReal x1677=IKcos(j1);
IkReal x1678=(r11*sj6);
IkReal x1679=(cj2*cj3);
IkReal x1680=((1.0)*r00);
IkReal x1681=(r01*sj6);
IkReal x1682=((0.384)*cj3);
IkReal x1683=((0.088)*cj6);
IkReal x1684=(cj2*sj3);
IkReal x1685=((1.0)*cj6);
IkReal x1686=((1.0)*sj5);
IkReal x1687=(r10*x1685);
IkReal x1688=((0.0825)*x1676);
IkReal x1689=((1.0)*x1677);
IkReal x1690=(sj3*x1676);
IkReal x1691=((0.0825)*x1677);
evalcond[0]=(((cj5*x1681))+(((-1.0)*r02*x1686))+(((-1.0)*sj2*x1689))+(((-1.0)*cj5*cj6*x1680)));
evalcond[1]=((((-1.0)*r12*x1686))+(((-1.0)*cj5*x1687))+((cj5*x1678))+(((-1.0)*sj2*x1676)));
evalcond[2]=((((-1.0)*r01*x1685))+x1690+(((-1.0)*sj6*x1680))+((x1677*x1679)));
evalcond[3]=(((x1676*x1679))+(((-1.0)*r11*x1685))+(((-1.0)*r10*sj6))+(((-1.0)*sj3*x1689)));
evalcond[4]=(((sj5*x1681))+((cj3*x1676))+(((-1.0)*cj6*sj5*x1680))+((cj5*r02))+(((-1.0)*x1684*x1689)));
evalcond[5]=(((cj5*r12))+(((-1.0)*sj5*x1687))+(((-1.0)*x1676*x1684))+(((-1.0)*cj3*x1689))+((sj5*x1678)));
evalcond[6]=((((-0.384)*x1677*x1684))+((r00*x1683))+(((-1.0)*x1679*x1691))+(((-0.088)*x1681))+((x1676*x1682))+(((-1.0)*px))+(((0.316)*x1676))+(((-1.0)*sj3*x1688))+((cj2*x1691)));
evalcond[7]=((((-1.0)*x1677*x1682))+((sj3*x1691))+((r10*x1683))+(((-1.0)*x1679*x1688))+(((-0.384)*x1676*x1684))+(((-1.0)*py))+(((-0.316)*x1677))+(((-0.088)*x1678))+((cj2*x1688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1697=IKPowWithIntegerCheck(sj2,-1);
if(!x1697.valid){
continue;
}
IkReal x1692=x1697.value;
IkReal x1693=(r02*sj5);
IkReal x1694=(cj2*cj3);
IkReal x1695=(cj5*cj6*r00);
IkReal x1696=(cj5*r01*sj6);
CheckValue<IkReal> x1698=IKPowWithIntegerCheck(sj3,-1);
if(!x1698.valid){
continue;
}
if( IKabs((x1692*(x1698.value)*((((cj6*r01*sj2))+((x1693*x1694))+((r00*sj2*sj6))+(((-1.0)*x1694*x1696))+((x1694*x1695)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1692*((x1696+(((-1.0)*x1695))+(((-1.0)*x1693)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1692*(x1698.value)*((((cj6*r01*sj2))+((x1693*x1694))+((r00*sj2*sj6))+(((-1.0)*x1694*x1696))+((x1694*x1695))))))+IKsqr((x1692*((x1696+(((-1.0)*x1695))+(((-1.0)*x1693))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x1692*(x1698.value)*((((cj6*r01*sj2))+((x1693*x1694))+((r00*sj2*sj6))+(((-1.0)*x1694*x1696))+((x1694*x1695))))), (x1692*((x1696+(((-1.0)*x1695))+(((-1.0)*x1693))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1699=IKsin(j1);
IkReal x1700=IKcos(j1);
IkReal x1701=(r11*sj6);
IkReal x1702=(cj2*cj3);
IkReal x1703=((1.0)*r00);
IkReal x1704=(r01*sj6);
IkReal x1705=((0.384)*cj3);
IkReal x1706=((0.088)*cj6);
IkReal x1707=(cj2*sj3);
IkReal x1708=((1.0)*cj6);
IkReal x1709=((1.0)*sj5);
IkReal x1710=(r10*x1708);
IkReal x1711=((0.0825)*x1699);
IkReal x1712=((1.0)*x1700);
IkReal x1713=(sj3*x1699);
IkReal x1714=((0.0825)*x1700);
evalcond[0]=((((-1.0)*sj2*x1712))+(((-1.0)*r02*x1709))+((cj5*x1704))+(((-1.0)*cj5*cj6*x1703)));
evalcond[1]=((((-1.0)*cj5*x1710))+((cj5*x1701))+(((-1.0)*sj2*x1699))+(((-1.0)*r12*x1709)));
evalcond[2]=(x1713+(((-1.0)*sj6*x1703))+((x1700*x1702))+(((-1.0)*r01*x1708)));
evalcond[3]=((((-1.0)*r10*sj6))+(((-1.0)*sj3*x1712))+(((-1.0)*r11*x1708))+((x1699*x1702)));
evalcond[4]=((((-1.0)*cj6*sj5*x1703))+((cj3*x1699))+(((-1.0)*x1707*x1712))+((sj5*x1704))+((cj5*r02)));
evalcond[5]=((((-1.0)*cj3*x1712))+((cj5*r12))+(((-1.0)*sj5*x1710))+((sj5*x1701))+(((-1.0)*x1699*x1707)));
evalcond[6]=((((-0.088)*x1704))+(((-1.0)*sj3*x1711))+(((0.316)*x1699))+((r00*x1706))+(((-1.0)*px))+((cj2*x1714))+(((-1.0)*x1702*x1714))+((x1699*x1705))+(((-0.384)*x1700*x1707)));
evalcond[7]=((((-0.088)*x1701))+(((-1.0)*py))+((r10*x1706))+((sj3*x1714))+(((-0.384)*x1699*x1707))+((cj2*x1711))+(((-1.0)*x1700*x1705))+(((-1.0)*x1702*x1711))+(((-0.316)*x1700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1715=cj3*cj3;
IkReal x1716=(cj6*sj3);
IkReal x1717=(r10*sj6);
IkReal x1718=(r00*sj6);
IkReal x1719=((1.0)*cj2*cj3);
IkReal x1720=(cj6*x1719);
CheckValue<IkReal> x1721=IKPowWithIntegerCheck(IKsign(((-1.0)+x1715+(((-1.0)*x1715*(cj2*cj2))))),-1);
if(!x1721.valid){
continue;
}
CheckValue<IkReal> x1722 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x1716))+(((-1.0)*r11*x1720))+(((-1.0)*sj3*x1718))+(((-1.0)*x1717*x1719)))),IkReal((((r11*x1716))+(((-1.0)*r01*x1720))+(((-1.0)*x1718*x1719))+((sj3*x1717)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1722.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1721.value)))+(x1722.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1723=IKsin(j1);
IkReal x1724=IKcos(j1);
IkReal x1725=(r11*sj6);
IkReal x1726=(cj2*cj3);
IkReal x1727=((1.0)*r00);
IkReal x1728=(r01*sj6);
IkReal x1729=((0.384)*cj3);
IkReal x1730=((0.088)*cj6);
IkReal x1731=(cj2*sj3);
IkReal x1732=((1.0)*cj6);
IkReal x1733=((1.0)*sj5);
IkReal x1734=(r10*x1732);
IkReal x1735=((0.0825)*x1723);
IkReal x1736=((1.0)*x1724);
IkReal x1737=(sj3*x1723);
IkReal x1738=((0.0825)*x1724);
evalcond[0]=(((cj5*x1728))+(((-1.0)*sj2*x1736))+(((-1.0)*cj5*cj6*x1727))+(((-1.0)*r02*x1733)));
evalcond[1]=((((-1.0)*cj5*x1734))+(((-1.0)*sj2*x1723))+(((-1.0)*r12*x1733))+((cj5*x1725)));
evalcond[2]=(((x1724*x1726))+x1737+(((-1.0)*r01*x1732))+(((-1.0)*sj6*x1727)));
evalcond[3]=(((x1723*x1726))+(((-1.0)*r11*x1732))+(((-1.0)*r10*sj6))+(((-1.0)*sj3*x1736)));
evalcond[4]=((((-1.0)*x1731*x1736))+((sj5*x1728))+(((-1.0)*cj6*sj5*x1727))+((cj3*x1723))+((cj5*r02)));
evalcond[5]=(((cj5*r12))+((sj5*x1725))+(((-1.0)*x1723*x1731))+(((-1.0)*cj3*x1736))+(((-1.0)*sj5*x1734)));
evalcond[6]=(((x1723*x1729))+(((-0.384)*x1724*x1731))+((cj2*x1738))+((r00*x1730))+(((-1.0)*x1726*x1738))+(((0.316)*x1723))+(((-0.088)*x1728))+(((-1.0)*px))+(((-1.0)*sj3*x1735)));
evalcond[7]=(((cj2*x1735))+(((-0.384)*x1723*x1731))+(((-1.0)*x1726*x1735))+((r10*x1730))+(((-0.088)*x1725))+(((-1.0)*py))+(((-0.316)*x1724))+(((-1.0)*x1724*x1729))+((sj3*x1738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1739=cj3*cj3;
IkReal x1740=(cj6*sj3);
IkReal x1741=(r10*sj6);
IkReal x1742=(r00*sj6);
IkReal x1743=((1.0)*cj2*cj3);
IkReal x1744=(cj6*x1743);
CheckValue<IkReal> x1745 = IKatan2WithCheck(IkReal(((((-1.0)*x1741*x1743))+(((-1.0)*r11*x1744))+(((-1.0)*r01*x1740))+(((-1.0)*sj3*x1742)))),IkReal(((((-1.0)*r01*x1744))+((sj3*x1741))+(((-1.0)*x1742*x1743))+((r11*x1740)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1745.valid){
continue;
}
CheckValue<IkReal> x1746=IKPowWithIntegerCheck(IKsign(((-1.0)+x1739+(((-1.0)*x1739*(cj2*cj2))))),-1);
if(!x1746.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1745.value)+(((1.5707963267949)*(x1746.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1747=IKsin(j1);
IkReal x1748=IKcos(j1);
IkReal x1749=(cj2*cj3);
IkReal x1750=((1.0)*sj6);
IkReal x1751=((0.088)*sj6);
IkReal x1752=((0.384)*cj3);
IkReal x1753=((0.088)*cj6);
IkReal x1754=((1.0)*cj6);
IkReal x1755=((0.384)*cj2);
IkReal x1756=((0.0825)*x1747);
IkReal x1757=(sj3*x1747);
IkReal x1758=(sj3*x1748);
IkReal x1759=((0.0825)*x1748);
evalcond[0]=(x1757+(((-1.0)*r01*x1754))+(((-1.0)*r00*x1750))+((x1748*x1749)));
evalcond[1]=((((-1.0)*r11*x1754))+(((-1.0)*r10*x1750))+((x1747*x1749))+(((-1.0)*x1758)));
evalcond[2]=(((x1747*x1752))+((cj2*x1759))+(((0.316)*x1747))+(((-1.0)*x1749*x1759))+(((-1.0)*px))+(((-1.0)*sj3*x1756))+(((-1.0)*r01*x1751))+((r00*x1753))+(((-1.0)*x1755*x1758)));
evalcond[3]=((((-1.0)*r11*x1751))+(((0.0825)*x1758))+(((-1.0)*x1748*x1752))+((cj2*x1756))+(((-1.0)*x1749*x1756))+(((-1.0)*py))+(((-1.0)*x1755*x1757))+(((-0.316)*x1748))+((r10*x1753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x1760=(sj1*sj2);
IkReal x1761=((1.0)*cj6);
IkReal x1762=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x1762;
j5eval[1]=IKsign(x1762);
j5eval[2]=((IKabs((((cj2*r12))+((r22*x1760)))))+(IKabs((((r21*sj6*x1760))+((cj2*r11*sj6))+(((-1.0)*r20*x1760*x1761))+(((-1.0)*cj2*r10*x1761))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x1763=(cj1*sj2);
IkReal x1764=((1.0)*cj2);
IkReal x1765=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x1765;
j5eval[1]=((IKabs(((((-1.0)*r22*x1763))+(((-1.0)*r02*x1764)))))+(IKabs(((((-1.0)*r21*sj6*x1763))+(((-1.0)*r01*sj6*x1764))+((cj2*cj6*r00))+((cj6*r20*x1763))))));
j5eval[2]=IKsign(x1765);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x1766=cj6*cj6;
IkReal x1767=r21*r21;
IkReal x1768=(sj2*sj3);
IkReal x1769=(cj6*r20);
IkReal x1770=(r21*sj6);
IkReal x1771=(x1767+(r22*r22)+((x1766*(r20*r20)))+(((-2.0)*x1769*x1770))+(((-1.0)*x1766*x1767)));
j5eval[0]=x1771;
j5eval[1]=IKsign(x1771);
j5eval[2]=((IKabs((((r22*x1768))+((cj2*x1769))+(((-1.0)*cj2*x1770)))))+(IKabs((((cj2*r22))+(((-1.0)*x1768*x1769))+((x1768*x1770))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1772=cj6*cj6;
IkReal x1773=r21*r21;
IkReal x1774=(sj2*sj3);
IkReal x1775=(cj6*r20);
IkReal x1776=(r21*sj6);
CheckValue<IkReal> x1777 = IKatan2WithCheck(IkReal((((cj2*r22))+(((-1.0)*x1774*x1775))+((x1774*x1776)))),IkReal((((r22*x1774))+((cj2*x1775))+(((-1.0)*cj2*x1776)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1777.valid){
continue;
}
CheckValue<IkReal> x1778=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1772*x1773))+x1773+(r22*r22)+((x1772*(r20*r20)))+(((-2.0)*x1775*x1776)))),-1);
if(!x1778.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1777.value)+(((1.5707963267949)*(x1778.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1779=IKcos(j5);
IkReal x1780=IKsin(j5);
IkReal x1781=((1.0)*sj2);
IkReal x1782=(sj6*x1780);
IkReal x1783=((1.0)*cj2*sj3);
IkReal x1784=((1.0)*x1780);
IkReal x1785=(sj6*x1779);
IkReal x1786=(cj6*x1784);
IkReal x1787=((1.0)*cj6*x1779);
evalcond[0]=(cj2+(((-1.0)*r22*x1784))+((r21*x1785))+(((-1.0)*r20*x1787)));
evalcond[1]=(((r22*x1779))+((r21*x1782))+(((-1.0)*r20*x1786))+(((-1.0)*sj3*x1781)));
evalcond[2]=((((-1.0)*r00*x1787))+(((-1.0)*cj1*x1781))+(((-1.0)*r02*x1784))+((r01*x1785)));
evalcond[3]=((((-1.0)*sj1*x1781))+(((-1.0)*r10*x1787))+(((-1.0)*r12*x1784))+((r11*x1785)));
evalcond[4]=((((-1.0)*r00*x1786))+((r02*x1779))+(((-1.0)*cj1*x1783))+((r01*x1782))+((cj3*sj1)));
evalcond[5]=((((-1.0)*sj1*x1783))+(((-1.0)*r10*x1786))+((r12*x1779))+(((-1.0)*cj1*cj3))+((r11*x1782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1788=(cj1*sj2);
IkReal x1789=((1.0)*cj2);
CheckValue<IkReal> x1790=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x1790.valid){
continue;
}
CheckValue<IkReal> x1791 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6*x1789))+((cj2*cj6*r00))+(((-1.0)*r21*sj6*x1788))+((cj6*r20*x1788)))),IkReal(((((-1.0)*r22*x1788))+(((-1.0)*r02*x1789)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1791.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1790.value)))+(x1791.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1792=IKcos(j5);
IkReal x1793=IKsin(j5);
IkReal x1794=((1.0)*sj2);
IkReal x1795=(sj6*x1793);
IkReal x1796=((1.0)*cj2*sj3);
IkReal x1797=((1.0)*x1793);
IkReal x1798=(sj6*x1792);
IkReal x1799=(cj6*x1797);
IkReal x1800=((1.0)*cj6*x1792);
evalcond[0]=((((-1.0)*r20*x1800))+(((-1.0)*r22*x1797))+((r21*x1798))+cj2);
evalcond[1]=((((-1.0)*sj3*x1794))+((r21*x1795))+((r22*x1792))+(((-1.0)*r20*x1799)));
evalcond[2]=((((-1.0)*r00*x1800))+(((-1.0)*cj1*x1794))+(((-1.0)*r02*x1797))+((r01*x1798)));
evalcond[3]=((((-1.0)*r10*x1800))+(((-1.0)*r12*x1797))+((r11*x1798))+(((-1.0)*sj1*x1794)));
evalcond[4]=((((-1.0)*r00*x1799))+((r02*x1792))+(((-1.0)*cj1*x1796))+((r01*x1795))+((cj3*sj1)));
evalcond[5]=((((-1.0)*r10*x1799))+(((-1.0)*cj1*cj3))+((r12*x1792))+((r11*x1795))+(((-1.0)*sj1*x1796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1801=((1.0)*cj6);
IkReal x1802=(sj1*sj2);
CheckValue<IkReal> x1803=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x1803.valid){
continue;
}
CheckValue<IkReal> x1804 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*r10*x1801))+((cj2*r11*sj6))+((r21*sj6*x1802))+(((-1.0)*r20*x1801*x1802)))),IkReal((((r22*x1802))+((cj2*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1804.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1803.value)))+(x1804.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1805=IKcos(j5);
IkReal x1806=IKsin(j5);
IkReal x1807=((1.0)*sj2);
IkReal x1808=(sj6*x1806);
IkReal x1809=((1.0)*cj2*sj3);
IkReal x1810=((1.0)*x1806);
IkReal x1811=(sj6*x1805);
IkReal x1812=(cj6*x1810);
IkReal x1813=((1.0)*cj6*x1805);
evalcond[0]=(cj2+((r21*x1811))+(((-1.0)*r20*x1813))+(((-1.0)*r22*x1810)));
evalcond[1]=(((r22*x1805))+((r21*x1808))+(((-1.0)*sj3*x1807))+(((-1.0)*r20*x1812)));
evalcond[2]=((((-1.0)*r02*x1810))+(((-1.0)*r00*x1813))+((r01*x1811))+(((-1.0)*cj1*x1807)));
evalcond[3]=((((-1.0)*r10*x1813))+(((-1.0)*r12*x1810))+(((-1.0)*sj1*x1807))+((r11*x1811)));
evalcond[4]=((((-1.0)*r00*x1812))+((r02*x1805))+(((-1.0)*cj1*x1809))+((r01*x1808))+((cj3*sj1)));
evalcond[5]=((((-1.0)*cj1*cj3))+(((-1.0)*r10*x1812))+((r12*x1805))+((r11*x1808))+(((-1.0)*sj1*x1809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x1814=cj3*cj3;
IkReal x1815=(cj2*cj3);
IkReal x1816=(r00*sj6);
IkReal x1817=(cj6*r01);
IkReal x1818=(r10*sj6);
IkReal x1819=((1.0)*sj3);
IkReal x1820=(cj6*r11);
IkReal x1821=((-1.0)+x1814+(((-1.0)*x1814*(cj2*cj2))));
j1eval[0]=x1821;
j1eval[1]=((IKabs(((((-1.0)*x1819*x1820))+((x1815*x1816))+((x1815*x1817))+(((-1.0)*x1818*x1819)))))+(IKabs((((sj3*x1816))+((sj3*x1817))+((x1815*x1818))+((x1815*x1820))))));
j1eval[2]=IKsign(x1821);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x1822=cj6*cj6;
IkReal x1823=r21*r21;
IkReal x1824=(sj2*sj3);
IkReal x1825=(r21*sj6);
IkReal x1826=((1.0)*cj6*r20);
IkReal x1827=((((-2.0)*cj6*r20*x1825))+(r22*r22)+x1823+(((-1.0)*x1822*x1823))+((x1822*(r20*r20))));
j5eval[0]=x1827;
j5eval[1]=((IKabs((((x1824*x1825))+(((-1.0)*cj2*r22))+(((-1.0)*x1824*x1826)))))+(IKabs(((((-1.0)*cj2*x1826))+((r22*x1824))+((cj2*x1825))))));
j5eval[2]=IKsign(x1827);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x1828=(cj2*cj3);
IkReal x1829=(cj2*sj3);
j1eval[0]=((((-1.0)*x1829))+(((4.65454545454545)*cj2))+(((3.83030303030303)*x1828)));
j1eval[1]=IKsign(((((0.316)*x1828))+(((-0.0825)*x1829))+(((0.384)*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1830=(r00*sj3);
IkReal x1831=((0.088)*cj6);
IkReal x1832=(cj2*cj3);
IkReal x1833=((0.0825)*cj2);
IkReal x1834=(r00*sj6);
IkReal x1835=(cj6*r01);
IkReal x1836=((0.384)*cj2);
IkReal x1837=((0.384)*cj3);
IkReal x1838=((0.088)*r01*sj6);
CheckValue<IkReal> x1839 = IKatan2WithCheck(IkReal((((px*x1832))+(((-1.0)*sj3*x1835*x1836))+(((-1.0)*sj6*x1830*x1836))+(((-1.0)*r00*x1831*x1832))+((x1832*x1838))+((x1833*x1835))+((x1833*x1834))+(((-0.0825)*x1832*x1835))+(((-0.0825)*x1832*x1834)))),IkReal(((((-1.0)*x1834*x1837))+(((0.0825)*sj3*x1835))+(((0.0825)*sj6*x1830))+(((-1.0)*x1835*x1837))+(((-1.0)*sj3*x1838))+((x1830*x1831))+(((-0.316)*x1834))+(((-0.316)*x1835))+(((-1.0)*px*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1839.valid){
continue;
}
CheckValue<IkReal> x1840=IKPowWithIntegerCheck(IKsign(((((0.316)*x1832))+(((-1.0)*sj3*x1833))+x1836)),-1);
if(!x1840.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1839.value)+(((1.5707963267949)*(x1840.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1841=IKsin(j1);
IkReal x1842=IKcos(j1);
IkReal x1843=(cj2*cj3);
IkReal x1844=((0.088)*sj6);
IkReal x1845=((0.384)*cj3);
IkReal x1846=((0.088)*cj6);
IkReal x1847=((0.384)*cj2);
IkReal x1848=((0.0825)*x1841);
IkReal x1849=(sj3*x1841);
IkReal x1850=(sj3*x1842);
IkReal x1851=((0.0825)*x1842);
evalcond[0]=(((r00*sj6))+x1849+((cj6*r01))+((x1842*x1843)));
evalcond[1]=(((r10*sj6))+(((-1.0)*x1850))+((cj6*r11))+((x1841*x1843)));
evalcond[2]=((((-1.0)*sj3*x1848))+(((-1.0)*r01*x1844))+(((-1.0)*px))+((cj2*x1851))+(((-1.0)*x1843*x1851))+((r00*x1846))+(((0.316)*x1841))+((x1841*x1845))+(((-1.0)*x1847*x1850)));
evalcond[3]=((((-1.0)*x1843*x1848))+(((-1.0)*x1842*x1845))+(((0.0825)*x1850))+((cj2*x1848))+(((-1.0)*py))+((r10*x1846))+(((-1.0)*r11*x1844))+(((-1.0)*x1847*x1849))+(((-0.316)*x1842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x1852=(sj1*sj2);
IkReal x1853=((1.0)*sj6);
IkReal x1854=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x1854;
j5eval[1]=((IKabs((((cj6*r20*x1852))+((cj2*cj6*r10))+(((-1.0)*cj2*r11*x1853))+(((-1.0)*r21*x1852*x1853)))))+(IKabs(((((-1.0)*cj2*r12))+(((-1.0)*r22*x1852))))));
j5eval[2]=IKsign(x1854);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x1855=(cj1*sj2);
IkReal x1856=((1.0)*sj6);
IkReal x1857=((((-1.0)*cj6*r11))+(((-1.0)*r10*x1856)));
j5eval[0]=x1857;
j5eval[1]=((IKabs((((cj6*r20*x1855))+((cj2*cj6*r00))+(((-1.0)*cj2*r01*x1856))+(((-1.0)*r21*x1855*x1856)))))+(IKabs(((((-1.0)*cj2*r02))+(((-1.0)*r22*x1855))))));
j5eval[2]=IKsign(x1857);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x1858=cj6*cj6;
IkReal x1859=r21*r21;
IkReal x1860=(sj2*sj3);
IkReal x1861=(r21*sj6);
IkReal x1862=((1.0)*cj6*r20);
IkReal x1863=((((-1.0)*x1858*x1859))+(r22*r22)+((x1858*(r20*r20)))+x1859+(((-2.0)*cj6*r20*x1861)));
j5eval[0]=x1863;
j5eval[1]=((IKabs(((((-1.0)*x1860*x1862))+((x1860*x1861))+(((-1.0)*cj2*r22)))))+(IKabs((((r22*x1860))+(((-1.0)*cj2*x1862))+((cj2*x1861))))));
j5eval[2]=IKsign(x1863);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1864=cj6*cj6;
IkReal x1865=r21*r21;
IkReal x1866=(sj2*sj3);
IkReal x1867=(r21*sj6);
IkReal x1868=((1.0)*cj6*r20);
CheckValue<IkReal> x1869=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1864*x1865))+(r22*r22)+((x1864*(r20*r20)))+x1865+(((-2.0)*cj6*r20*x1867)))),-1);
if(!x1869.valid){
continue;
}
CheckValue<IkReal> x1870 = IKatan2WithCheck(IkReal(((((-1.0)*x1866*x1868))+((x1866*x1867))+(((-1.0)*cj2*r22)))),IkReal((((r22*x1866))+(((-1.0)*cj2*x1868))+((cj2*x1867)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1870.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1869.value)))+(x1870.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1871=IKcos(j5);
IkReal x1872=IKsin(j5);
IkReal x1873=((1.0)*sj2);
IkReal x1874=(sj6*x1872);
IkReal x1875=((1.0)*cj2*sj3);
IkReal x1876=(cj6*x1871);
IkReal x1877=((1.0)*sj6*x1871);
IkReal x1878=((1.0)*cj6*x1872);
evalcond[0]=(((r22*x1872))+cj2+((r20*x1876))+(((-1.0)*r21*x1877)));
evalcond[1]=(((r22*x1871))+(((-1.0)*sj3*x1873))+((r21*x1874))+(((-1.0)*r20*x1878)));
evalcond[2]=(((r02*x1872))+(((-1.0)*r01*x1877))+(((-1.0)*cj1*x1873))+((r00*x1876)));
evalcond[3]=((((-1.0)*sj1*x1873))+(((-1.0)*r11*x1877))+((r10*x1876))+((r12*x1872)));
evalcond[4]=(((r02*x1871))+(((-1.0)*r00*x1878))+((r01*x1874))+(((-1.0)*cj1*x1875))+((cj3*sj1)));
evalcond[5]=((((-1.0)*r10*x1878))+(((-1.0)*sj1*x1875))+(((-1.0)*cj1*cj3))+((r12*x1871))+((r11*x1874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1879=(cj1*sj2);
IkReal x1880=((1.0)*sj6);
CheckValue<IkReal> x1881=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r11))+(((-1.0)*r10*x1880)))),-1);
if(!x1881.valid){
continue;
}
CheckValue<IkReal> x1882 = IKatan2WithCheck(IkReal((((cj6*r20*x1879))+((cj2*cj6*r00))+(((-1.0)*r21*x1879*x1880))+(((-1.0)*cj2*r01*x1880)))),IkReal(((((-1.0)*r22*x1879))+(((-1.0)*cj2*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1882.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1881.value)))+(x1882.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1883=IKcos(j5);
IkReal x1884=IKsin(j5);
IkReal x1885=((1.0)*sj2);
IkReal x1886=(sj6*x1884);
IkReal x1887=((1.0)*cj2*sj3);
IkReal x1888=(cj6*x1883);
IkReal x1889=((1.0)*sj6*x1883);
IkReal x1890=((1.0)*cj6*x1884);
evalcond[0]=(cj2+((r20*x1888))+((r22*x1884))+(((-1.0)*r21*x1889)));
evalcond[1]=(((r21*x1886))+(((-1.0)*r20*x1890))+((r22*x1883))+(((-1.0)*sj3*x1885)));
evalcond[2]=((((-1.0)*cj1*x1885))+((r00*x1888))+(((-1.0)*r01*x1889))+((r02*x1884)));
evalcond[3]=(((r12*x1884))+(((-1.0)*r11*x1889))+((r10*x1888))+(((-1.0)*sj1*x1885)));
evalcond[4]=((((-1.0)*cj1*x1887))+((r01*x1886))+(((-1.0)*r00*x1890))+((r02*x1883))+((cj3*sj1)));
evalcond[5]=(((r12*x1883))+(((-1.0)*cj1*cj3))+(((-1.0)*r10*x1890))+((r11*x1886))+(((-1.0)*sj1*x1887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1891=(sj1*sj2);
IkReal x1892=((1.0)*sj6);
CheckValue<IkReal> x1893 = IKatan2WithCheck(IkReal((((cj6*r20*x1891))+(((-1.0)*cj2*r11*x1892))+((cj2*cj6*r10))+(((-1.0)*r21*x1891*x1892)))),IkReal(((((-1.0)*r22*x1891))+(((-1.0)*cj2*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1893.valid){
continue;
}
CheckValue<IkReal> x1894=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x1894.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1893.value)+(((1.5707963267949)*(x1894.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1895=IKcos(j5);
IkReal x1896=IKsin(j5);
IkReal x1897=((1.0)*sj2);
IkReal x1898=(sj6*x1896);
IkReal x1899=((1.0)*cj2*sj3);
IkReal x1900=(cj6*x1895);
IkReal x1901=((1.0)*sj6*x1895);
IkReal x1902=((1.0)*cj6*x1896);
evalcond[0]=(((r22*x1896))+cj2+(((-1.0)*r21*x1901))+((r20*x1900)));
evalcond[1]=(((r22*x1895))+(((-1.0)*sj3*x1897))+(((-1.0)*r20*x1902))+((r21*x1898)));
evalcond[2]=(((r02*x1896))+((r00*x1900))+(((-1.0)*cj1*x1897))+(((-1.0)*r01*x1901)));
evalcond[3]=((((-1.0)*sj1*x1897))+(((-1.0)*r11*x1901))+((r10*x1900))+((r12*x1896)));
evalcond[4]=(((r02*x1895))+((r01*x1898))+(((-1.0)*cj1*x1899))+((cj3*sj1))+(((-1.0)*r00*x1902)));
evalcond[5]=((((-1.0)*sj1*x1899))+((r11*x1898))+(((-1.0)*cj1*cj3))+(((-1.0)*r10*x1902))+((r12*x1895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1903=cj6*cj6;
IkReal x1904=r21*r21;
IkReal x1905=(sj2*sj3);
IkReal x1906=(r21*sj6);
IkReal x1907=((1.0)*cj6*r20);
CheckValue<IkReal> x1908 = IKatan2WithCheck(IkReal((((x1905*x1906))+(((-1.0)*x1905*x1907))+(((-1.0)*cj2*r22)))),IkReal((((cj2*x1906))+((r22*x1905))+(((-1.0)*cj2*x1907)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1908.valid){
continue;
}
CheckValue<IkReal> x1909=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*cj6*r20*x1906))+((x1903*(r20*r20)))+(((-1.0)*x1903*x1904))+x1904)),-1);
if(!x1909.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1908.value)+(((1.5707963267949)*(x1909.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x1910=IKcos(j5);
IkReal x1911=IKsin(j5);
IkReal x1912=(r21*sj6);
IkReal x1913=(cj6*r20);
evalcond[0]=(cj2+(((-1.0)*x1910*x1912))+((r22*x1911))+((x1910*x1913)));
evalcond[1]=((((-1.0)*x1911*x1913))+((r22*x1910))+((x1911*x1912))+(((-1.0)*sj2*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x1914=cj3*cj3;
IkReal x1915=(cj2*cj3);
IkReal x1916=(r00*sj6);
IkReal x1917=(cj6*r01);
IkReal x1918=(r10*sj6);
IkReal x1919=((1.0)*sj3);
IkReal x1920=(cj6*r11);
IkReal x1921=((-1.0)+(((-1.0)*x1914*(cj2*cj2)))+x1914);
j1eval[0]=x1921;
j1eval[1]=((IKabs(((((-1.0)*x1919*x1920))+(((-1.0)*x1918*x1919))+((x1915*x1916))+((x1915*x1917)))))+(IKabs((((x1915*x1920))+((sj3*x1916))+((sj3*x1917))+((x1915*x1918))))));
j1eval[2]=IKsign(x1921);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j1eval[0]=sj2;
j1eval[1]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j1eval[0]=cj2;
j1eval[1]=cj3;
j1eval[2]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1927=IKPowWithIntegerCheck(sj2,-1);
if(!x1927.valid){
continue;
}
IkReal x1922=x1927.value;
IkReal x1923=((1.0)*sj6);
IkReal x1924=(cj5*sj3);
IkReal x1925=(cj6*r00);
IkReal x1926=(r02*sj5);
CheckValue<IkReal> x1928=IKPowWithIntegerCheck(cj2,-1);
if(!x1928.valid){
continue;
}
CheckValue<IkReal> x1929=IKPowWithIntegerCheck(cj3,-1);
if(!x1929.valid){
continue;
}
if( IKabs((x1922*(x1928.value)*(x1929.value)*(((((-1.0)*cj6*r11*sj2))+(((-1.0)*r01*x1923*x1924))+((sj3*x1926))+(((-1.0)*r10*sj2*x1923))+((x1924*x1925)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1922*((((cj5*x1925))+(((-1.0)*cj5*r01*x1923))+x1926)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1922*(x1928.value)*(x1929.value)*(((((-1.0)*cj6*r11*sj2))+(((-1.0)*r01*x1923*x1924))+((sj3*x1926))+(((-1.0)*r10*sj2*x1923))+((x1924*x1925))))))+IKsqr((x1922*((((cj5*x1925))+(((-1.0)*cj5*r01*x1923))+x1926))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x1922*(x1928.value)*(x1929.value)*(((((-1.0)*cj6*r11*sj2))+(((-1.0)*r01*x1923*x1924))+((sj3*x1926))+(((-1.0)*r10*sj2*x1923))+((x1924*x1925))))), (x1922*((((cj5*x1925))+(((-1.0)*cj5*r01*x1923))+x1926))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1930=IKcos(j1);
IkReal x1931=IKsin(j1);
IkReal x1932=((0.0825)*sj3);
IkReal x1933=(cj2*cj3);
IkReal x1934=(cj6*r10);
IkReal x1935=((1.0)*sj5);
IkReal x1936=(r01*sj6);
IkReal x1937=((0.384)*cj3);
IkReal x1938=(r11*sj6);
IkReal x1939=(cj6*r00);
IkReal x1940=((1.0)*cj5);
IkReal x1941=(cj2*sj3);
IkReal x1942=((0.0825)*x1931);
IkReal x1943=((1.0)*x1930);
IkReal x1944=(sj3*x1931);
IkReal x1945=((0.0825)*x1930);
evalcond[0]=(((r00*sj6))+((x1930*x1933))+x1944+((cj6*r01)));
evalcond[1]=(((cj5*x1939))+(((-1.0)*sj2*x1943))+((r02*sj5))+(((-1.0)*x1936*x1940)));
evalcond[2]=(((cj5*x1934))+(((-1.0)*sj2*x1931))+(((-1.0)*x1938*x1940))+((r12*sj5)));
evalcond[3]=((((-1.0)*sj3*x1943))+((r10*sj6))+((x1931*x1933))+((cj6*r11)));
evalcond[4]=(((cj3*x1931))+(((-1.0)*x1941*x1943))+((sj5*x1936))+(((-1.0)*x1935*x1939))+((cj5*r02)));
evalcond[5]=(((cj5*r12))+(((-1.0)*x1931*x1941))+(((-1.0)*x1934*x1935))+(((-1.0)*cj3*x1943))+((sj5*x1938)));
evalcond[6]=((((-0.384)*x1930*x1941))+(((-0.088)*x1936))+((cj2*x1945))+((x1931*x1937))+(((-1.0)*px))+(((-1.0)*x1931*x1932))+(((0.316)*x1931))+(((-1.0)*x1933*x1945))+(((0.088)*x1939)));
evalcond[7]=((((-1.0)*x1930*x1937))+(((-0.088)*x1938))+(((-0.384)*x1931*x1941))+(((-0.316)*x1930))+((cj2*x1942))+((x1930*x1932))+(((-1.0)*py))+(((-1.0)*x1933*x1942))+(((0.088)*x1934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1952=IKPowWithIntegerCheck(sj2,-1);
if(!x1952.valid){
continue;
}
IkReal x1946=x1952.value;
IkReal x1947=(cj2*cj3);
IkReal x1948=(r02*sj5);
IkReal x1949=((1.0)*sj2);
IkReal x1950=(cj5*cj6*r00);
IkReal x1951=(cj5*r01*sj6);
CheckValue<IkReal> x1953=IKPowWithIntegerCheck(sj3,-1);
if(!x1953.valid){
continue;
}
if( IKabs((x1946*(x1953.value)*(((((-1.0)*x1947*x1948))+(((-1.0)*cj6*r01*x1949))+(((-1.0)*x1947*x1950))+((x1947*x1951))+(((-1.0)*r00*sj6*x1949)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1946*((x1948+x1950+(((-1.0)*x1951)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1946*(x1953.value)*(((((-1.0)*x1947*x1948))+(((-1.0)*cj6*r01*x1949))+(((-1.0)*x1947*x1950))+((x1947*x1951))+(((-1.0)*r00*sj6*x1949))))))+IKsqr((x1946*((x1948+x1950+(((-1.0)*x1951))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x1946*(x1953.value)*(((((-1.0)*x1947*x1948))+(((-1.0)*cj6*r01*x1949))+(((-1.0)*x1947*x1950))+((x1947*x1951))+(((-1.0)*r00*sj6*x1949))))), (x1946*((x1948+x1950+(((-1.0)*x1951))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1954=IKcos(j1);
IkReal x1955=IKsin(j1);
IkReal x1956=((0.0825)*sj3);
IkReal x1957=(cj2*cj3);
IkReal x1958=(cj6*r10);
IkReal x1959=((1.0)*sj5);
IkReal x1960=(r01*sj6);
IkReal x1961=((0.384)*cj3);
IkReal x1962=(r11*sj6);
IkReal x1963=(cj6*r00);
IkReal x1964=((1.0)*cj5);
IkReal x1965=(cj2*sj3);
IkReal x1966=((0.0825)*x1955);
IkReal x1967=((1.0)*x1954);
IkReal x1968=(sj3*x1955);
IkReal x1969=((0.0825)*x1954);
evalcond[0]=(((r00*sj6))+((x1954*x1957))+x1968+((cj6*r01)));
evalcond[1]=((((-1.0)*sj2*x1967))+((r02*sj5))+(((-1.0)*x1960*x1964))+((cj5*x1963)));
evalcond[2]=(((cj5*x1958))+((r12*sj5))+(((-1.0)*x1962*x1964))+(((-1.0)*sj2*x1955)));
evalcond[3]=(((r10*sj6))+(((-1.0)*sj3*x1967))+((x1955*x1957))+((cj6*r11)));
evalcond[4]=((((-1.0)*x1959*x1963))+((sj5*x1960))+((cj3*x1955))+(((-1.0)*x1965*x1967))+((cj5*r02)));
evalcond[5]=(((cj5*r12))+((sj5*x1962))+(((-1.0)*x1958*x1959))+(((-1.0)*x1955*x1965))+(((-1.0)*cj3*x1967)));
evalcond[6]=((((-1.0)*x1957*x1969))+(((0.088)*x1963))+(((-0.384)*x1954*x1965))+((cj2*x1969))+(((-1.0)*px))+((x1955*x1961))+(((-0.088)*x1960))+(((0.316)*x1955))+(((-1.0)*x1955*x1956)));
evalcond[7]=((((-1.0)*x1957*x1966))+(((-0.316)*x1954))+(((0.088)*x1958))+((cj2*x1966))+(((-0.384)*x1955*x1965))+((x1954*x1956))+(((-1.0)*py))+(((-0.088)*x1962))+(((-1.0)*x1954*x1961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1970=cj3*cj3;
IkReal x1971=(cj2*cj3);
IkReal x1972=(r00*sj6);
IkReal x1973=(cj6*r01);
IkReal x1974=(r10*sj6);
IkReal x1975=((1.0)*sj3);
IkReal x1976=(cj6*r11);
CheckValue<IkReal> x1977=IKPowWithIntegerCheck(IKsign(((-1.0)+x1970+(((-1.0)*x1970*(cj2*cj2))))),-1);
if(!x1977.valid){
continue;
}
CheckValue<IkReal> x1978 = IKatan2WithCheck(IkReal((((sj3*x1972))+((sj3*x1973))+((x1971*x1976))+((x1971*x1974)))),IkReal(((((-1.0)*x1975*x1976))+(((-1.0)*x1974*x1975))+((x1971*x1972))+((x1971*x1973)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1978.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1977.value)))+(x1978.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1979=IKcos(j1);
IkReal x1980=IKsin(j1);
IkReal x1981=((0.0825)*sj3);
IkReal x1982=(cj2*cj3);
IkReal x1983=(cj6*r10);
IkReal x1984=((1.0)*sj5);
IkReal x1985=(r01*sj6);
IkReal x1986=((0.384)*cj3);
IkReal x1987=(r11*sj6);
IkReal x1988=(cj6*r00);
IkReal x1989=((1.0)*cj5);
IkReal x1990=(cj2*sj3);
IkReal x1991=((0.0825)*x1980);
IkReal x1992=((1.0)*x1979);
IkReal x1993=(sj3*x1980);
IkReal x1994=((0.0825)*x1979);
evalcond[0]=(((r00*sj6))+((x1979*x1982))+x1993+((cj6*r01)));
evalcond[1]=((((-1.0)*x1985*x1989))+((r02*sj5))+((cj5*x1988))+(((-1.0)*sj2*x1992)));
evalcond[2]=((((-1.0)*sj2*x1980))+(((-1.0)*x1987*x1989))+((r12*sj5))+((cj5*x1983)));
evalcond[3]=(((r10*sj6))+((x1980*x1982))+((cj6*r11))+(((-1.0)*sj3*x1992)));
evalcond[4]=(((sj5*x1985))+((cj3*x1980))+(((-1.0)*x1984*x1988))+(((-1.0)*x1990*x1992))+((cj5*r02)));
evalcond[5]=(((cj5*r12))+((sj5*x1987))+(((-1.0)*x1983*x1984))+(((-1.0)*cj3*x1992))+(((-1.0)*x1980*x1990)));
evalcond[6]=(((cj2*x1994))+(((-1.0)*x1980*x1981))+(((-1.0)*x1982*x1994))+(((0.088)*x1988))+((x1980*x1986))+(((-1.0)*px))+(((-0.088)*x1985))+(((-0.384)*x1979*x1990))+(((0.316)*x1980)));
evalcond[7]=(((cj2*x1991))+(((-0.316)*x1979))+(((-1.0)*x1982*x1991))+(((-0.384)*x1980*x1990))+(((-1.0)*x1979*x1986))+(((0.088)*x1983))+(((-1.0)*py))+((x1979*x1981))+(((-0.088)*x1987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1995=cj3*cj3;
IkReal x1996=(cj2*cj3);
IkReal x1997=(r00*sj6);
IkReal x1998=(cj6*r01);
IkReal x1999=(r10*sj6);
IkReal x2000=((1.0)*sj3);
IkReal x2001=(cj6*r11);
CheckValue<IkReal> x2002 = IKatan2WithCheck(IkReal((((x1996*x1999))+((sj3*x1998))+((sj3*x1997))+((x1996*x2001)))),IkReal((((x1996*x1998))+((x1996*x1997))+(((-1.0)*x2000*x2001))+(((-1.0)*x1999*x2000)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2002.valid){
continue;
}
CheckValue<IkReal> x2003=IKPowWithIntegerCheck(IKsign(((-1.0)+(((-1.0)*x1995*(cj2*cj2)))+x1995)),-1);
if(!x2003.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2002.value)+(((1.5707963267949)*(x2003.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2004=IKsin(j1);
IkReal x2005=IKcos(j1);
IkReal x2006=(cj2*cj3);
IkReal x2007=((0.088)*sj6);
IkReal x2008=((0.384)*cj3);
IkReal x2009=((0.088)*cj6);
IkReal x2010=((0.384)*cj2);
IkReal x2011=((0.0825)*x2004);
IkReal x2012=(sj3*x2004);
IkReal x2013=(sj3*x2005);
IkReal x2014=((0.0825)*x2005);
evalcond[0]=(((r00*sj6))+x2012+((cj6*r01))+((x2005*x2006)));
evalcond[1]=(((r10*sj6))+((cj6*r11))+(((-1.0)*x2013))+((x2004*x2006)));
evalcond[2]=((((0.316)*x2004))+(((-1.0)*x2010*x2013))+((r00*x2009))+(((-1.0)*r01*x2007))+(((-1.0)*x2006*x2014))+(((-1.0)*px))+((cj2*x2014))+(((-1.0)*sj3*x2011))+((x2004*x2008)));
evalcond[3]=((((-1.0)*x2005*x2008))+(((-1.0)*x2010*x2012))+((r10*x2009))+(((-1.0)*r11*x2007))+(((-0.316)*x2005))+(((-1.0)*x2006*x2011))+(((-1.0)*py))+((cj2*x2011))+(((0.0825)*x2013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x2015=(sj1*sj2);
IkReal x2016=((1.0)*sj6);
IkReal x2017=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x2017;
j5eval[1]=((IKabs((((cj6*r20*x2015))+((cj2*cj6*r10))+(((-1.0)*cj2*r11*x2016))+(((-1.0)*r21*x2015*x2016)))))+(IKabs(((((-1.0)*cj2*r12))+(((-1.0)*r22*x2015))))));
j5eval[2]=IKsign(x2017);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x2018=(cj1*sj2);
IkReal x2019=((1.0)*sj6);
IkReal x2020=((((-1.0)*cj6*r11))+(((-1.0)*r10*x2019)));
j5eval[0]=x2020;
j5eval[1]=((IKabs(((((-1.0)*cj2*r02))+(((-1.0)*r22*x2018)))))+(IKabs(((((-1.0)*cj2*r01*x2019))+((cj6*r20*x2018))+((cj2*cj6*r00))+(((-1.0)*r21*x2018*x2019))))));
j5eval[2]=IKsign(x2020);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x2021=cj6*cj6;
IkReal x2022=r21*r21;
IkReal x2023=(sj2*sj3);
IkReal x2024=(r21*sj6);
IkReal x2025=((1.0)*cj6*r20);
IkReal x2026=((((-1.0)*x2021*x2022))+(r22*r22)+x2022+(((-2.0)*cj6*r20*x2024))+((x2021*(r20*r20))));
j5eval[0]=x2026;
j5eval[1]=((IKabs(((((-1.0)*cj2*x2025))+((r22*x2023))+((cj2*x2024)))))+(IKabs(((((-1.0)*x2023*x2025))+((x2023*x2024))+(((-1.0)*cj2*r22))))));
j5eval[2]=IKsign(x2026);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2027=cj6*cj6;
IkReal x2028=r21*r21;
IkReal x2029=(sj2*sj3);
IkReal x2030=(r21*sj6);
IkReal x2031=((1.0)*cj6*r20);
CheckValue<IkReal> x2032 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*r22))+(((-1.0)*x2029*x2031))+((x2029*x2030)))),IkReal((((r22*x2029))+((cj2*x2030))+(((-1.0)*cj2*x2031)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2032.valid){
continue;
}
CheckValue<IkReal> x2033=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2027*x2028))+(r22*r22)+x2028+(((-2.0)*cj6*r20*x2030))+((x2027*(r20*r20))))),-1);
if(!x2033.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2032.value)+(((1.5707963267949)*(x2033.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2034=IKcos(j5);
IkReal x2035=IKsin(j5);
IkReal x2036=((1.0)*sj2);
IkReal x2037=(sj6*x2035);
IkReal x2038=((1.0)*cj2*sj3);
IkReal x2039=(cj6*x2034);
IkReal x2040=((1.0)*sj6*x2034);
IkReal x2041=((1.0)*cj6*x2035);
evalcond[0]=(((r22*x2035))+cj2+(((-1.0)*r21*x2040))+((r20*x2039)));
evalcond[1]=(((r22*x2034))+((r21*x2037))+(((-1.0)*sj3*x2036))+(((-1.0)*r20*x2041)));
evalcond[2]=(((r00*x2039))+(((-1.0)*cj1*x2036))+((r02*x2035))+(((-1.0)*r01*x2040)));
evalcond[3]=(((r10*x2039))+((r12*x2035))+(((-1.0)*sj1*x2036))+(((-1.0)*r11*x2040)));
evalcond[4]=(((r01*x2037))+(((-1.0)*cj1*x2038))+((r02*x2034))+(((-1.0)*r00*x2041))+((cj3*sj1)));
evalcond[5]=(((r12*x2034))+(((-1.0)*r10*x2041))+(((-1.0)*cj1*cj3))+(((-1.0)*sj1*x2038))+((r11*x2037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2042=(cj1*sj2);
IkReal x2043=((1.0)*sj6);
CheckValue<IkReal> x2044 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x2042*x2043))+((cj2*cj6*r00))+((cj6*r20*x2042))+(((-1.0)*cj2*r01*x2043)))),IkReal(((((-1.0)*cj2*r02))+(((-1.0)*r22*x2042)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2044.valid){
continue;
}
CheckValue<IkReal> x2045=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2043))+(((-1.0)*cj6*r11)))),-1);
if(!x2045.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2044.value)+(((1.5707963267949)*(x2045.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2046=IKcos(j5);
IkReal x2047=IKsin(j5);
IkReal x2048=((1.0)*sj2);
IkReal x2049=(sj6*x2047);
IkReal x2050=((1.0)*cj2*sj3);
IkReal x2051=(cj6*x2046);
IkReal x2052=((1.0)*sj6*x2046);
IkReal x2053=((1.0)*cj6*x2047);
evalcond[0]=(((r22*x2047))+cj2+(((-1.0)*r21*x2052))+((r20*x2051)));
evalcond[1]=(((r22*x2046))+((r21*x2049))+(((-1.0)*sj3*x2048))+(((-1.0)*r20*x2053)));
evalcond[2]=((((-1.0)*r01*x2052))+((r02*x2047))+(((-1.0)*cj1*x2048))+((r00*x2051)));
evalcond[3]=(((r10*x2051))+(((-1.0)*sj1*x2048))+((r12*x2047))+(((-1.0)*r11*x2052)));
evalcond[4]=((((-1.0)*r00*x2053))+(((-1.0)*cj1*x2050))+((r02*x2046))+((r01*x2049))+((cj3*sj1)));
evalcond[5]=((((-1.0)*r10*x2053))+((r11*x2049))+((r12*x2046))+(((-1.0)*cj1*cj3))+(((-1.0)*sj1*x2050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2054=(sj1*sj2);
IkReal x2055=((1.0)*sj6);
CheckValue<IkReal> x2056 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*r11*x2055))+((cj2*cj6*r10))+(((-1.0)*r21*x2054*x2055))+((cj6*r20*x2054)))),IkReal(((((-1.0)*r22*x2054))+(((-1.0)*cj2*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2056.valid){
continue;
}
CheckValue<IkReal> x2057=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x2057.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2056.value)+(((1.5707963267949)*(x2057.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2058=IKcos(j5);
IkReal x2059=IKsin(j5);
IkReal x2060=((1.0)*sj2);
IkReal x2061=(sj6*x2059);
IkReal x2062=((1.0)*cj2*sj3);
IkReal x2063=(cj6*x2058);
IkReal x2064=((1.0)*sj6*x2058);
IkReal x2065=((1.0)*cj6*x2059);
evalcond[0]=(((r22*x2059))+cj2+((r20*x2063))+(((-1.0)*r21*x2064)));
evalcond[1]=(((r21*x2061))+((r22*x2058))+(((-1.0)*sj3*x2060))+(((-1.0)*r20*x2065)));
evalcond[2]=(((r02*x2059))+((r00*x2063))+(((-1.0)*r01*x2064))+(((-1.0)*cj1*x2060)));
evalcond[3]=(((r12*x2059))+(((-1.0)*r11*x2064))+(((-1.0)*sj1*x2060))+((r10*x2063)));
evalcond[4]=(((r02*x2058))+(((-1.0)*r00*x2065))+((r01*x2061))+(((-1.0)*cj1*x2062))+((cj3*sj1)));
evalcond[5]=(((r12*x2058))+(((-1.0)*r10*x2065))+((r11*x2061))+(((-1.0)*cj1*cj3))+(((-1.0)*sj1*x2062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=0;
cj4=1.0;
j4=0;
j1eval[0]=sj2;
j1eval[1]=IKsign(sj2);
j1eval[2]=((IKabs((((r10*sj6))+((cj6*r11)))))+(IKabs((((r00*sj6))+((cj6*r01))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x2066=cj6*cj6;
IkReal x2067=r21*r21;
IkReal x2068=(sj2*sj3);
IkReal x2069=(cj6*r20);
IkReal x2070=(r21*sj6);
IkReal x2071=(cj3*sj2);
IkReal x2072=((((-1.0)*x2066*x2067))+(r22*r22)+x2067+((x2066*(r20*r20)))+(((-2.0)*x2069*x2070)));
j5eval[0]=x2072;
j5eval[1]=IKsign(x2072);
j5eval[2]=((IKabs((((r22*x2068))+(((-1.0)*x2070*x2071))+((x2069*x2071)))))+(IKabs((((r22*x2071))+((x2068*x2070))+(((-1.0)*x2068*x2069))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=0;
cj4=1.0;
j4=0;
IkReal x2073=(cj2*sj2);
j1eval[0]=((((-4.65454545454545)*sj3*x2073))+x2073+(((-1.0)*cj3*x2073)));
j1eval[1]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2074=(cj2*sj2);
IkReal x2075=(r00*sj6);
IkReal x2076=((0.0825)*sj3);
IkReal x2077=(cj6*r01);
IkReal x2078=((0.088)*sj2);
IkReal x2079=((0.384)*cj3);
CheckValue<IkReal> x2080=IKPowWithIntegerCheck(((((0.0825)*x2074))+(((-0.0825)*cj3*x2074))+(((-0.384)*sj3*x2074))),-1);
if(!x2080.valid){
continue;
}
CheckValue<IkReal> x2081=IKPowWithIntegerCheck(sj2,-1);
if(!x2081.valid){
continue;
}
if( IKabs(((x2080.value)*((((x2075*x2079))+(((0.316)*x2075))+(((0.316)*x2077))+((r11*sj6*x2078))+(((-1.0)*x2076*x2077))+((x2077*x2079))+(((-1.0)*cj6*r10*x2078))+((py*sj2))+(((-1.0)*x2075*x2076)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2081.value)*((x2077+x2075)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2080.value)*((((x2075*x2079))+(((0.316)*x2075))+(((0.316)*x2077))+((r11*sj6*x2078))+(((-1.0)*x2076*x2077))+((x2077*x2079))+(((-1.0)*cj6*r10*x2078))+((py*sj2))+(((-1.0)*x2075*x2076))))))+IKsqr(((x2081.value)*((x2077+x2075))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2080.value)*((((x2075*x2079))+(((0.316)*x2075))+(((0.316)*x2077))+((r11*sj6*x2078))+(((-1.0)*x2076*x2077))+((x2077*x2079))+(((-1.0)*cj6*r10*x2078))+((py*sj2))+(((-1.0)*x2075*x2076))))), ((x2081.value)*((x2077+x2075))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2082=IKcos(j1);
IkReal x2083=IKsin(j1);
IkReal x2084=((1.0)*sj2);
IkReal x2085=((0.088)*sj6);
IkReal x2086=((0.384)*cj3);
IkReal x2087=((0.088)*cj6);
IkReal x2088=((0.384)*cj2);
IkReal x2089=(sj3*x2083);
IkReal x2090=(sj3*x2082);
IkReal x2091=((0.0825)*cj2*x2083);
IkReal x2092=((0.0825)*cj2*x2082);
evalcond[0]=(((r00*sj6))+((cj6*r01))+(((-1.0)*x2082*x2084)));
evalcond[1]=(((r10*sj6))+(((-1.0)*x2083*x2084))+((cj6*r11)));
evalcond[2]=(x2092+(((-0.0825)*x2089))+(((0.316)*x2083))+(((-1.0)*px))+(((-1.0)*x2088*x2090))+((x2083*x2086))+((r00*x2087))+(((-1.0)*cj3*x2092))+(((-1.0)*r01*x2085)));
evalcond[3]=((((-0.316)*x2082))+(((-1.0)*x2088*x2089))+x2091+((r10*x2087))+(((-1.0)*py))+(((0.0825)*x2090))+(((-1.0)*r11*x2085))+(((-1.0)*x2082*x2086))+(((-1.0)*cj3*x2091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
sj4=0;
cj4=1.0;
j4=0;
IkReal x2093=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x2093;
j5eval[1]=IKsign(x2093);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x2094=cj6*cj6;
IkReal x2095=r21*r21;
IkReal x2096=(sj2*sj3);
IkReal x2097=(cj6*r20);
IkReal x2098=(r21*sj6);
IkReal x2099=(cj3*sj2);
IkReal x2100=((((-2.0)*x2097*x2098))+(r22*r22)+x2095+((x2094*(r20*r20)))+(((-1.0)*x2094*x2095)));
j5eval[0]=x2100;
j5eval[1]=IKsign(x2100);
j5eval[2]=((IKabs((((r22*x2096))+((x2097*x2099))+(((-1.0)*x2098*x2099)))))+(IKabs((((x2096*x2098))+((r22*x2099))+(((-1.0)*x2096*x2097))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x2101=cj6*cj6;
IkReal x2102=(sj1*sj3);
IkReal x2103=(cj6*r20);
IkReal x2104=(cj6*r00);
IkReal x2105=(sj2*sj3);
IkReal x2106=(r01*sj6);
IkReal x2107=(r01*r21);
IkReal x2108=((1.0)*r21*sj6);
IkReal x2109=(cj1*cj2*cj3);
IkReal x2110=((((-1.0)*x2103*x2106))+x2107+((r00*r20*x2101))+((r02*r22))+(((-1.0)*x2104*x2108))+(((-1.0)*x2101*x2107)));
j5eval[0]=x2110;
j5eval[1]=IKsign(x2110);
j5eval[2]=((IKabs((((r22*x2109))+((r22*x2102))+((x2105*x2106))+(((-1.0)*x2104*x2105)))))+(IKabs(((((-1.0)*x2102*x2108))+((r02*x2105))+((x2103*x2109))+((x2102*x2103))+(((-1.0)*x2108*x2109))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2111=cj6*cj6;
IkReal x2112=(sj1*sj3);
IkReal x2113=(cj6*r00);
IkReal x2114=(cj6*r20);
IkReal x2115=((1.0)*r01);
IkReal x2116=(sj2*sj3);
IkReal x2117=((1.0)*r21*sj6);
IkReal x2118=(cj1*cj2*cj3);
CheckValue<IkReal> x2119 = IKatan2WithCheck(IkReal(((((-1.0)*x2113*x2116))+((r01*sj6*x2116))+((r22*x2112))+((r22*x2118)))),IkReal(((((-1.0)*x2117*x2118))+(((-1.0)*x2112*x2117))+((r02*x2116))+((x2114*x2118))+((x2112*x2114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2119.valid){
continue;
}
CheckValue<IkReal> x2120=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj6*x2114*x2115))+((r01*r21))+(((-1.0)*r21*x2111*x2115))+((r00*r20*x2111))+((r02*r22))+(((-1.0)*x2113*x2117)))),-1);
if(!x2120.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2119.value)+(((1.5707963267949)*(x2120.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2121=IKsin(j5);
IkReal x2122=IKcos(j5);
IkReal x2123=(cj3*sj1);
IkReal x2124=(cj1*cj2);
IkReal x2125=((1.0)*sj3);
IkReal x2126=(sj6*x2121);
IkReal x2127=((1.0)*x2121);
IkReal x2128=(sj6*x2122);
IkReal x2129=(cj6*x2127);
IkReal x2130=((1.0)*cj6*x2122);
evalcond[0]=(((r21*x2126))+(((-1.0)*r20*x2129))+((r22*x2122))+(((-1.0)*sj2*x2125)));
evalcond[1]=((((-1.0)*r22*x2127))+((r21*x2128))+(((-1.0)*r20*x2130))+((cj3*sj2)));
evalcond[2]=((((-1.0)*r00*x2129))+x2123+((r02*x2122))+((r01*x2126))+(((-1.0)*x2124*x2125)));
evalcond[3]=(((cj3*x2124))+(((-1.0)*r02*x2127))+((sj1*sj3))+(((-1.0)*r00*x2130))+((r01*x2128)));
evalcond[4]=((((-1.0)*r10*x2129))+((r12*x2122))+(((-1.0)*cj1*cj3))+((r11*x2126))+(((-1.0)*cj2*sj1*x2125)));
evalcond[5]=(((cj2*x2123))+(((-1.0)*cj1*x2125))+((r11*x2128))+(((-1.0)*r12*x2127))+(((-1.0)*r10*x2130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2131=cj6*cj6;
IkReal x2132=r21*r21;
IkReal x2133=(sj2*sj3);
IkReal x2134=(cj6*r20);
IkReal x2135=(r21*sj6);
IkReal x2136=(cj3*sj2);
CheckValue<IkReal> x2137 = IKatan2WithCheck(IkReal((((r22*x2136))+(((-1.0)*x2133*x2134))+((x2133*x2135)))),IkReal((((r22*x2133))+((x2134*x2136))+(((-1.0)*x2135*x2136)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2137.valid){
continue;
}
CheckValue<IkReal> x2138=IKPowWithIntegerCheck(IKsign(((r22*r22)+x2132+(((-1.0)*x2131*x2132))+((x2131*(r20*r20)))+(((-2.0)*x2134*x2135)))),-1);
if(!x2138.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2137.value)+(((1.5707963267949)*(x2138.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2139=IKsin(j5);
IkReal x2140=IKcos(j5);
IkReal x2141=(cj3*sj1);
IkReal x2142=(cj1*cj2);
IkReal x2143=((1.0)*sj3);
IkReal x2144=(sj6*x2139);
IkReal x2145=((1.0)*x2139);
IkReal x2146=(sj6*x2140);
IkReal x2147=(cj6*x2145);
IkReal x2148=((1.0)*cj6*x2140);
evalcond[0]=((((-1.0)*sj2*x2143))+((r21*x2144))+((r22*x2140))+(((-1.0)*r20*x2147)));
evalcond[1]=((((-1.0)*r22*x2145))+((r21*x2146))+(((-1.0)*r20*x2148))+((cj3*sj2)));
evalcond[2]=((((-1.0)*r00*x2147))+(((-1.0)*x2142*x2143))+x2141+((r02*x2140))+((r01*x2144)));
evalcond[3]=((((-1.0)*r00*x2148))+(((-1.0)*r02*x2145))+((cj3*x2142))+((sj1*sj3))+((r01*x2146)));
evalcond[4]=(((r11*x2144))+(((-1.0)*cj1*cj3))+(((-1.0)*r10*x2147))+(((-1.0)*cj2*sj1*x2143))+((r12*x2140)));
evalcond[5]=(((r11*x2146))+((cj2*x2141))+(((-1.0)*r12*x2145))+(((-1.0)*r10*x2148))+(((-1.0)*cj1*x2143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2149=((1.0)*sj3);
IkReal x2150=(cj1*cj2);
IkReal x2151=(cj3*sj1);
IkReal x2152=(r21*sj6);
IkReal x2153=(sj2*sj3);
IkReal x2154=(cj6*r20);
CheckValue<IkReal> x2155 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2149*x2150))+((r02*x2153))+((r22*x2151)))),IkReal(((((-1.0)*x2149*x2150*x2154))+(((-1.0)*r01*sj2*sj6*x2149))+((cj6*r00*x2153))+(((-1.0)*x2151*x2152))+((x2151*x2154))+((sj3*x2150*x2152)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2155.valid){
continue;
}
CheckValue<IkReal> x2156=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x2156.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2155.value)+(((1.5707963267949)*(x2156.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2157=IKsin(j5);
IkReal x2158=IKcos(j5);
IkReal x2159=(cj3*sj1);
IkReal x2160=(cj1*cj2);
IkReal x2161=((1.0)*sj3);
IkReal x2162=(sj6*x2157);
IkReal x2163=((1.0)*x2157);
IkReal x2164=(sj6*x2158);
IkReal x2165=(cj6*x2163);
IkReal x2166=((1.0)*cj6*x2158);
evalcond[0]=((((-1.0)*sj2*x2161))+(((-1.0)*r20*x2165))+((r21*x2162))+((r22*x2158)));
evalcond[1]=((((-1.0)*r20*x2166))+((r21*x2164))+(((-1.0)*r22*x2163))+((cj3*sj2)));
evalcond[2]=((((-1.0)*x2160*x2161))+((r01*x2162))+x2159+((r02*x2158))+(((-1.0)*r00*x2165)));
evalcond[3]=(((r01*x2164))+((sj1*sj3))+(((-1.0)*r02*x2163))+((cj3*x2160))+(((-1.0)*r00*x2166)));
evalcond[4]=((((-1.0)*r10*x2165))+(((-1.0)*cj1*cj3))+(((-1.0)*cj2*sj1*x2161))+((r11*x2162))+((r12*x2158)));
evalcond[5]=((((-1.0)*r10*x2166))+((cj2*x2159))+(((-1.0)*cj1*x2161))+(((-1.0)*r12*x2163))+((r11*x2164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2167=cj6*cj6;
IkReal x2168=r21*r21;
IkReal x2169=(sj2*sj3);
IkReal x2170=(cj6*r20);
IkReal x2171=(r21*sj6);
IkReal x2172=(cj3*sj2);
CheckValue<IkReal> x2173=IKPowWithIntegerCheck(IKsign((((x2167*(r20*r20)))+(r22*r22)+(((-1.0)*x2167*x2168))+x2168+(((-2.0)*x2170*x2171)))),-1);
if(!x2173.valid){
continue;
}
CheckValue<IkReal> x2174 = IKatan2WithCheck(IkReal((((r22*x2172))+(((-1.0)*x2169*x2170))+((x2169*x2171)))),IkReal((((x2170*x2172))+(((-1.0)*x2171*x2172))+((r22*x2169)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2174.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2173.value)))+(x2174.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x2175=IKsin(j5);
IkReal x2176=IKcos(j5);
IkReal x2177=(r21*sj6);
IkReal x2178=(cj6*r20);
IkReal x2179=((1.0)*x2175);
evalcond[0]=((((-1.0)*x2178*x2179))+((r22*x2176))+((x2175*x2177))+(((-1.0)*sj2*sj3)));
evalcond[1]=((((-1.0)*x2176*x2178))+((x2176*x2177))+(((-1.0)*r22*x2179))+((cj3*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj4=0;
cj4=1.0;
j4=0;
j1eval[0]=sj2;
j1eval[1]=IKsign(sj2);
j1eval[2]=((IKabs((((r10*sj6))+((cj6*r11)))))+(IKabs((((r00*sj6))+((cj6*r01))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=0;
cj4=1.0;
j4=0;
j1eval[0]=cj3;
j1eval[1]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=0;
cj4=1.0;
j4=0;
j1eval[0]=sj2;
j1eval[1]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2185=IKPowWithIntegerCheck(sj2,-1);
if(!x2185.valid){
continue;
}
IkReal x2180=x2185.value;
IkReal x2181=(cj6*r01);
IkReal x2182=(cj5*sj2);
IkReal x2183=(r00*sj6);
IkReal x2184=((1.0)*cj2*cj3);
CheckValue<IkReal> x2186=IKPowWithIntegerCheck(sj3,-1);
if(!x2186.valid){
continue;
}
if( IKabs((x2180*(x2186.value)*(((((-1.0)*r01*sj6*x2182))+(((-1.0)*x2181*x2184))+((cj6*r00*x2182))+(((-1.0)*x2183*x2184))+((r02*sj2*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2180*((x2183+x2181)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2180*(x2186.value)*(((((-1.0)*r01*sj6*x2182))+(((-1.0)*x2181*x2184))+((cj6*r00*x2182))+(((-1.0)*x2183*x2184))+((r02*sj2*sj5))))))+IKsqr((x2180*((x2183+x2181))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x2180*(x2186.value)*(((((-1.0)*r01*sj6*x2182))+(((-1.0)*x2181*x2184))+((cj6*r00*x2182))+(((-1.0)*x2183*x2184))+((r02*sj2*sj5))))), (x2180*((x2183+x2181))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x2187=IKsin(j1);
IkReal x2188=IKcos(j1);
IkReal x2189=((0.0825)*sj3);
IkReal x2190=((0.0825)*cj2);
IkReal x2191=(r01*sj6);
IkReal x2192=(r11*sj6);
IkReal x2193=((0.088)*cj6);
IkReal x2194=(cj2*sj3);
IkReal x2195=((1.0)*sj5);
IkReal x2196=((1.0)*cj6*r10);
IkReal x2197=(cj3*x2187);
IkReal x2198=((1.0)*x2188);
IkReal x2199=(sj3*x2187);
IkReal x2200=(cj3*x2188);
IkReal x2201=((1.0)*cj6*r00);
evalcond[0]=(((r00*sj6))+(((-1.0)*sj2*x2198))+((cj6*r01)));
evalcond[1]=(((r10*sj6))+((cj6*r11))+(((-1.0)*sj2*x2187)));
evalcond[2]=(((sj5*x2191))+x2197+(((-1.0)*x2194*x2198))+(((-1.0)*cj6*r00*x2195))+((cj5*r02)));
evalcond[3]=((((-1.0)*cj5*x2201))+x2199+((cj2*x2200))+((cj5*x2191))+(((-1.0)*r02*x2195)));
evalcond[4]=(((cj5*r12))+(((-1.0)*cj6*r10*x2195))+(((-1.0)*x2187*x2194))+((sj5*x2192))+(((-1.0)*cj3*x2198)));
evalcond[5]=(((cj2*x2197))+(((-1.0)*cj5*x2196))+(((-1.0)*sj3*x2198))+((cj5*x2192))+(((-1.0)*r12*x2195)));
evalcond[6]=((((-1.0)*x2190*x2200))+(((-1.0)*x2187*x2189))+(((0.316)*x2187))+(((-1.0)*px))+(((-0.088)*x2191))+(((-0.384)*x2188*x2194))+(((0.384)*x2197))+((x2188*x2190))+((r00*x2193)));
evalcond[7]=(((x2187*x2190))+(((-0.384)*x2187*x2194))+(((-1.0)*py))+(((-0.088)*x2192))+((x2188*x2189))+(((-0.316)*x2188))+(((-1.0)*x2190*x2197))+((r10*x2193))+(((-0.384)*x2200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2207=IKPowWithIntegerCheck(sj2,-1);
if(!x2207.valid){
continue;
}
IkReal x2202=x2207.value;
IkReal x2203=(sj2*sj5);
IkReal x2204=(cj2*sj3);
IkReal x2205=(cj6*r01);
IkReal x2206=(r00*sj6);
CheckValue<IkReal> x2208=IKPowWithIntegerCheck(cj3,-1);
if(!x2208.valid){
continue;
}
if( IKabs((x2202*(x2208.value)*(((((-1.0)*cj5*r02*sj2))+((cj6*r00*x2203))+(((-1.0)*r01*sj6*x2203))+((x2204*x2206))+((x2204*x2205)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2202*((x2205+x2206)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2202*(x2208.value)*(((((-1.0)*cj5*r02*sj2))+((cj6*r00*x2203))+(((-1.0)*r01*sj6*x2203))+((x2204*x2206))+((x2204*x2205))))))+IKsqr((x2202*((x2205+x2206))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x2202*(x2208.value)*(((((-1.0)*cj5*r02*sj2))+((cj6*r00*x2203))+(((-1.0)*r01*sj6*x2203))+((x2204*x2206))+((x2204*x2205))))), (x2202*((x2205+x2206))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x2209=IKsin(j1);
IkReal x2210=IKcos(j1);
IkReal x2211=((0.0825)*sj3);
IkReal x2212=((0.0825)*cj2);
IkReal x2213=(r01*sj6);
IkReal x2214=(r11*sj6);
IkReal x2215=((0.088)*cj6);
IkReal x2216=(cj2*sj3);
IkReal x2217=((1.0)*sj5);
IkReal x2218=((1.0)*cj6*r10);
IkReal x2219=(cj3*x2209);
IkReal x2220=((1.0)*x2210);
IkReal x2221=(sj3*x2209);
IkReal x2222=(cj3*x2210);
IkReal x2223=((1.0)*cj6*r00);
evalcond[0]=(((r00*sj6))+(((-1.0)*sj2*x2220))+((cj6*r01)));
evalcond[1]=((((-1.0)*sj2*x2209))+((r10*sj6))+((cj6*r11)));
evalcond[2]=(x2219+(((-1.0)*cj6*r00*x2217))+(((-1.0)*x2216*x2220))+((sj5*x2213))+((cj5*r02)));
evalcond[3]=(x2221+((cj5*x2213))+(((-1.0)*cj5*x2223))+(((-1.0)*r02*x2217))+((cj2*x2222)));
evalcond[4]=(((cj5*r12))+(((-1.0)*x2209*x2216))+(((-1.0)*cj6*r10*x2217))+(((-1.0)*cj3*x2220))+((sj5*x2214)));
evalcond[5]=((((-1.0)*cj5*x2218))+((cj5*x2214))+(((-1.0)*r12*x2217))+((cj2*x2219))+(((-1.0)*sj3*x2220)));
evalcond[6]=((((0.316)*x2209))+((x2210*x2212))+((r00*x2215))+(((-1.0)*px))+(((-1.0)*x2212*x2222))+(((-1.0)*x2209*x2211))+(((-0.088)*x2213))+(((0.384)*x2219))+(((-0.384)*x2210*x2216)));
evalcond[7]=(((x2210*x2211))+(((-0.316)*x2210))+(((-1.0)*py))+(((-0.384)*x2222))+((r10*x2215))+(((-0.088)*x2214))+(((-0.384)*x2209*x2216))+((x2209*x2212))+(((-1.0)*x2212*x2219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2224=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x2224.valid){
continue;
}
CheckValue<IkReal> x2225 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2225.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2224.value)))+(x2225.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x2226=IKsin(j1);
IkReal x2227=IKcos(j1);
IkReal x2228=((0.0825)*sj3);
IkReal x2229=((0.0825)*cj2);
IkReal x2230=(r01*sj6);
IkReal x2231=(r11*sj6);
IkReal x2232=((0.088)*cj6);
IkReal x2233=(cj2*sj3);
IkReal x2234=((1.0)*sj5);
IkReal x2235=((1.0)*cj6*r10);
IkReal x2236=(cj3*x2226);
IkReal x2237=((1.0)*x2227);
IkReal x2238=(sj3*x2226);
IkReal x2239=(cj3*x2227);
IkReal x2240=((1.0)*cj6*r00);
evalcond[0]=(((r00*sj6))+(((-1.0)*sj2*x2237))+((cj6*r01)));
evalcond[1]=(((r10*sj6))+(((-1.0)*sj2*x2226))+((cj6*r11)));
evalcond[2]=((((-1.0)*cj6*r00*x2234))+x2236+((sj5*x2230))+(((-1.0)*x2233*x2237))+((cj5*r02)));
evalcond[3]=(x2238+(((-1.0)*cj5*x2240))+(((-1.0)*r02*x2234))+((cj5*x2230))+((cj2*x2239)));
evalcond[4]=(((cj5*r12))+(((-1.0)*cj6*r10*x2234))+((sj5*x2231))+(((-1.0)*x2226*x2233))+(((-1.0)*cj3*x2237)));
evalcond[5]=(((cj5*x2231))+(((-1.0)*r12*x2234))+(((-1.0)*cj5*x2235))+(((-1.0)*sj3*x2237))+((cj2*x2236)));
evalcond[6]=((((-0.088)*x2230))+(((-1.0)*x2226*x2228))+(((-1.0)*x2229*x2239))+((x2227*x2229))+(((-0.384)*x2227*x2233))+(((0.384)*x2236))+(((-1.0)*px))+(((0.316)*x2226))+((r00*x2232)));
evalcond[7]=((((-0.316)*x2227))+(((-0.088)*x2231))+((x2226*x2229))+((r10*x2232))+(((-1.0)*x2229*x2236))+((x2227*x2228))+(((-1.0)*py))+(((-0.384)*x2239))+(((-0.384)*x2226*x2233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2241=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x2241.valid){
continue;
}
CheckValue<IkReal> x2242 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2242.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2241.value)))+(x2242.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2243=IKcos(j1);
IkReal x2244=IKsin(j1);
IkReal x2245=((1.0)*sj2);
IkReal x2246=((0.088)*sj6);
IkReal x2247=((0.384)*cj3);
IkReal x2248=((0.088)*cj6);
IkReal x2249=((0.384)*cj2);
IkReal x2250=(sj3*x2244);
IkReal x2251=(sj3*x2243);
IkReal x2252=((0.0825)*cj2*x2244);
IkReal x2253=((0.0825)*cj2*x2243);
evalcond[0]=(((r00*sj6))+(((-1.0)*x2243*x2245))+((cj6*r01)));
evalcond[1]=(((r10*sj6))+(((-1.0)*x2244*x2245))+((cj6*r11)));
evalcond[2]=((((-1.0)*x2249*x2251))+x2253+(((-1.0)*r01*x2246))+(((-1.0)*cj3*x2253))+(((-1.0)*px))+(((-0.0825)*x2250))+((r00*x2248))+((x2244*x2247))+(((0.316)*x2244)));
evalcond[3]=((((-1.0)*x2249*x2250))+((r10*x2248))+x2252+(((-0.316)*x2243))+(((-1.0)*cj3*x2252))+(((0.0825)*x2251))+(((-1.0)*py))+(((-1.0)*r11*x2246))+(((-1.0)*x2243*x2247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
sj4=0;
cj4=1.0;
j4=0;
IkReal x2254=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x2254;
j5eval[1]=IKsign(x2254);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x2255=cj6*cj6;
IkReal x2256=r21*r21;
IkReal x2257=(sj2*sj3);
IkReal x2258=(cj6*r20);
IkReal x2259=(r21*sj6);
IkReal x2260=(cj3*sj2);
IkReal x2261=(x2256+(r22*r22)+(((-2.0)*x2258*x2259))+(((-1.0)*x2255*x2256))+((x2255*(r20*r20))));
j5eval[0]=x2261;
j5eval[1]=IKsign(x2261);
j5eval[2]=((IKabs(((((-1.0)*x2257*x2258))+((r22*x2260))+((x2257*x2259)))))+(IKabs((((x2258*x2260))+(((-1.0)*x2259*x2260))+((r22*x2257))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x2262=cj6*cj6;
IkReal x2263=(sj1*sj3);
IkReal x2264=(cj6*r20);
IkReal x2265=(cj6*r00);
IkReal x2266=(sj2*sj3);
IkReal x2267=(r01*sj6);
IkReal x2268=(r01*r21);
IkReal x2269=((1.0)*r21*sj6);
IkReal x2270=(cj1*cj2*cj3);
IkReal x2271=(x2268+((r00*r20*x2262))+(((-1.0)*x2262*x2268))+(((-1.0)*x2264*x2267))+((r02*r22))+(((-1.0)*x2265*x2269)));
j5eval[0]=x2271;
j5eval[1]=IKsign(x2271);
j5eval[2]=((IKabs((((r22*x2263))+((r22*x2270))+(((-1.0)*x2265*x2266))+((x2266*x2267)))))+(IKabs((((x2263*x2264))+(((-1.0)*x2263*x2269))+((r02*x2266))+(((-1.0)*x2269*x2270))+((x2264*x2270))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2272=cj6*cj6;
IkReal x2273=(sj1*sj3);
IkReal x2274=(cj6*r00);
IkReal x2275=(cj6*r20);
IkReal x2276=((1.0)*r01);
IkReal x2277=(sj2*sj3);
IkReal x2278=((1.0)*r21*sj6);
IkReal x2279=(cj1*cj2*cj3);
CheckValue<IkReal> x2280=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj6*x2275*x2276))+(((-1.0)*x2274*x2278))+(((-1.0)*r21*x2272*x2276))+((r01*r21))+((r00*r20*x2272))+((r02*r22)))),-1);
if(!x2280.valid){
continue;
}
CheckValue<IkReal> x2281 = IKatan2WithCheck(IkReal(((((-1.0)*x2274*x2277))+((r22*x2279))+((r22*x2273))+((r01*sj6*x2277)))),IkReal(((((-1.0)*x2278*x2279))+((x2273*x2275))+(((-1.0)*x2273*x2278))+((r02*x2277))+((x2275*x2279)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2281.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2280.value)))+(x2281.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2282=IKsin(j5);
IkReal x2283=IKcos(j5);
IkReal x2284=(cj3*sj1);
IkReal x2285=(cj1*cj2);
IkReal x2286=((1.0)*sj3);
IkReal x2287=(sj6*x2282);
IkReal x2288=((1.0)*x2282);
IkReal x2289=(sj6*x2283);
IkReal x2290=(cj6*x2288);
IkReal x2291=((1.0)*cj6*x2283);
evalcond[0]=((((-1.0)*sj2*x2286))+((r21*x2287))+(((-1.0)*r20*x2290))+((r22*x2283)));
evalcond[1]=(((r21*x2289))+(((-1.0)*r20*x2291))+(((-1.0)*r22*x2288))+((cj3*sj2)));
evalcond[2]=(x2284+(((-1.0)*r00*x2290))+((r01*x2287))+(((-1.0)*x2285*x2286))+((r02*x2283)));
evalcond[3]=((((-1.0)*r02*x2288))+((cj3*x2285))+(((-1.0)*r00*x2291))+((sj1*sj3))+((r01*x2289)));
evalcond[4]=(((r11*x2287))+(((-1.0)*cj2*sj1*x2286))+((r12*x2283))+(((-1.0)*cj1*cj3))+(((-1.0)*r10*x2290)));
evalcond[5]=(((r11*x2289))+((cj2*x2284))+(((-1.0)*r12*x2288))+(((-1.0)*cj1*x2286))+(((-1.0)*r10*x2291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2292=cj6*cj6;
IkReal x2293=r21*r21;
IkReal x2294=(sj2*sj3);
IkReal x2295=(cj6*r20);
IkReal x2296=(r21*sj6);
IkReal x2297=(cj3*sj2);
CheckValue<IkReal> x2298 = IKatan2WithCheck(IkReal((((r22*x2297))+(((-1.0)*x2294*x2295))+((x2294*x2296)))),IkReal((((r22*x2294))+((x2295*x2297))+(((-1.0)*x2296*x2297)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2298.valid){
continue;
}
CheckValue<IkReal> x2299=IKPowWithIntegerCheck(IKsign((x2293+(((-2.0)*x2295*x2296))+(r22*r22)+((x2292*(r20*r20)))+(((-1.0)*x2292*x2293)))),-1);
if(!x2299.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2298.value)+(((1.5707963267949)*(x2299.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2300=IKsin(j5);
IkReal x2301=IKcos(j5);
IkReal x2302=(cj3*sj1);
IkReal x2303=(cj1*cj2);
IkReal x2304=((1.0)*sj3);
IkReal x2305=(sj6*x2300);
IkReal x2306=((1.0)*x2300);
IkReal x2307=(sj6*x2301);
IkReal x2308=(cj6*x2306);
IkReal x2309=((1.0)*cj6*x2301);
evalcond[0]=((((-1.0)*sj2*x2304))+(((-1.0)*r20*x2308))+((r22*x2301))+((r21*x2305)));
evalcond[1]=((((-1.0)*r22*x2306))+(((-1.0)*r20*x2309))+((r21*x2307))+((cj3*sj2)));
evalcond[2]=(x2302+(((-1.0)*x2303*x2304))+(((-1.0)*r00*x2308))+((r02*x2301))+((r01*x2305)));
evalcond[3]=((((-1.0)*r00*x2309))+((sj1*sj3))+((r01*x2307))+((cj3*x2303))+(((-1.0)*r02*x2306)));
evalcond[4]=((((-1.0)*r10*x2308))+((r12*x2301))+((r11*x2305))+(((-1.0)*cj1*cj3))+(((-1.0)*cj2*sj1*x2304)));
evalcond[5]=(((cj2*x2302))+(((-1.0)*r10*x2309))+((r11*x2307))+(((-1.0)*cj1*x2304))+(((-1.0)*r12*x2306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2310=((1.0)*sj3);
IkReal x2311=(cj1*cj2);
IkReal x2312=(cj3*sj1);
IkReal x2313=(r21*sj6);
IkReal x2314=(sj2*sj3);
IkReal x2315=(cj6*r20);
CheckValue<IkReal> x2316 = IKatan2WithCheck(IkReal((((r22*x2312))+(((-1.0)*r22*x2310*x2311))+((r02*x2314)))),IkReal((((x2312*x2315))+(((-1.0)*r01*sj2*sj6*x2310))+((sj3*x2311*x2313))+(((-1.0)*x2310*x2311*x2315))+(((-1.0)*x2312*x2313))+((cj6*r00*x2314)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2316.valid){
continue;
}
CheckValue<IkReal> x2317=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x2317.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2316.value)+(((1.5707963267949)*(x2317.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2318=IKsin(j5);
IkReal x2319=IKcos(j5);
IkReal x2320=(cj3*sj1);
IkReal x2321=(cj1*cj2);
IkReal x2322=((1.0)*sj3);
IkReal x2323=(sj6*x2318);
IkReal x2324=((1.0)*x2318);
IkReal x2325=(sj6*x2319);
IkReal x2326=(cj6*x2324);
IkReal x2327=((1.0)*cj6*x2319);
evalcond[0]=(((r21*x2323))+((r22*x2319))+(((-1.0)*sj2*x2322))+(((-1.0)*r20*x2326)));
evalcond[1]=((((-1.0)*r22*x2324))+((r21*x2325))+(((-1.0)*r20*x2327))+((cj3*sj2)));
evalcond[2]=((((-1.0)*x2321*x2322))+x2320+(((-1.0)*r00*x2326))+((r01*x2323))+((r02*x2319)));
evalcond[3]=(((cj3*x2321))+((sj1*sj3))+(((-1.0)*r00*x2327))+((r01*x2325))+(((-1.0)*r02*x2324)));
evalcond[4]=((((-1.0)*cj2*sj1*x2322))+((r11*x2323))+(((-1.0)*cj1*cj3))+((r12*x2319))+(((-1.0)*r10*x2326)));
evalcond[5]=(((cj2*x2320))+((r11*x2325))+(((-1.0)*r10*x2327))+(((-1.0)*r12*x2324))+(((-1.0)*cj1*x2322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x2328=((1.0)*sj6);
IkReal x2329=((1.0)*cj6);
j1eval[0]=sj2;
j1eval[1]=IKsign(sj2);
j1eval[2]=((IKabs(((((-1.0)*r10*x2328))+(((-1.0)*r11*x2329)))))+(IKabs(((((-1.0)*r00*x2328))+(((-1.0)*r01*x2329))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x2330=cj6*cj6;
IkReal x2331=r21*r21;
IkReal x2332=(sj2*sj3);
IkReal x2333=(cj6*r20);
IkReal x2334=(cj3*sj2);
IkReal x2335=(r21*sj6);
IkReal x2336=((r22*r22)+x2331+(((-1.0)*x2330*x2331))+((x2330*(r20*r20)))+(((-2.0)*x2333*x2335)));
j5eval[0]=x2336;
j5eval[1]=IKsign(x2336);
j5eval[2]=((IKabs((((r22*x2332))+((x2334*x2335))+(((-1.0)*x2333*x2334)))))+(IKabs((((x2332*x2335))+(((-1.0)*x2332*x2333))+(((-1.0)*r22*x2334))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x2337=(cj2*sj2);
j1eval[0]=((((-1.0)*cj3*x2337))+x2337+(((-4.65454545454545)*sj3*x2337)));
j1eval[1]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2338=(cj2*sj2);
IkReal x2339=(r00*sj6);
IkReal x2340=((0.0825)*sj3);
IkReal x2341=((0.088)*sj2);
IkReal x2342=(cj6*r01);
IkReal x2343=((0.384)*cj3);
CheckValue<IkReal> x2344=IKPowWithIntegerCheck(((((0.0825)*x2338))+(((-0.384)*sj3*x2338))+(((-0.0825)*cj3*x2338))),-1);
if(!x2344.valid){
continue;
}
CheckValue<IkReal> x2345=IKPowWithIntegerCheck(sj2,-1);
if(!x2345.valid){
continue;
}
if( IKabs(((x2344.value)*(((((-1.0)*x2339*x2343))+((x2340*x2342))+(((-0.316)*x2339))+((r11*sj6*x2341))+((x2339*x2340))+(((-1.0)*cj6*r10*x2341))+((py*sj2))+(((-1.0)*x2342*x2343))+(((-0.316)*x2342)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2345.value)*(((((-1.0)*x2342))+(((-1.0)*x2339)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2344.value)*(((((-1.0)*x2339*x2343))+((x2340*x2342))+(((-0.316)*x2339))+((r11*sj6*x2341))+((x2339*x2340))+(((-1.0)*cj6*r10*x2341))+((py*sj2))+(((-1.0)*x2342*x2343))+(((-0.316)*x2342))))))+IKsqr(((x2345.value)*(((((-1.0)*x2342))+(((-1.0)*x2339))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2344.value)*(((((-1.0)*x2339*x2343))+((x2340*x2342))+(((-0.316)*x2339))+((r11*sj6*x2341))+((x2339*x2340))+(((-1.0)*cj6*r10*x2341))+((py*sj2))+(((-1.0)*x2342*x2343))+(((-0.316)*x2342))))), ((x2345.value)*(((((-1.0)*x2342))+(((-1.0)*x2339))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2346=IKcos(j1);
IkReal x2347=IKsin(j1);
IkReal x2348=((1.0)*sj6);
IkReal x2349=((1.0)*sj2);
IkReal x2350=((0.088)*sj6);
IkReal x2351=((0.384)*cj3);
IkReal x2352=((0.088)*cj6);
IkReal x2353=((0.0825)*sj3);
IkReal x2354=((1.0)*cj6);
IkReal x2355=((0.384)*cj2*sj3);
IkReal x2356=((0.0825)*cj2*x2347);
IkReal x2357=((0.0825)*cj2*x2346);
evalcond[0]=((((-1.0)*x2346*x2349))+(((-1.0)*r00*x2348))+(((-1.0)*r01*x2354)));
evalcond[1]=((((-1.0)*r10*x2348))+(((-1.0)*r11*x2354))+(((-1.0)*x2347*x2349)));
evalcond[2]=((((-1.0)*x2347*x2353))+((r00*x2352))+(((-1.0)*x2346*x2355))+x2357+(((-1.0)*r01*x2350))+(((-1.0)*cj3*x2357))+(((-1.0)*px))+(((0.316)*x2347))+((x2347*x2351)));
evalcond[3]=(((x2346*x2353))+(((-1.0)*x2347*x2355))+((r10*x2352))+(((-1.0)*x2346*x2351))+x2356+(((-1.0)*cj3*x2356))+(((-1.0)*py))+(((-1.0)*r11*x2350))+(((-0.316)*x2346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x2358=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x2358;
j5eval[1]=IKsign(x2358);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x2359=((((-1.0)*r10*sj6))+(((-1.0)*cj6*r11)));
j5eval[0]=x2359;
j5eval[1]=IKsign(x2359);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x2360=cj6*cj6;
IkReal x2361=r21*r21;
IkReal x2362=(sj2*sj3);
IkReal x2363=(cj6*r20);
IkReal x2364=(cj3*sj2);
IkReal x2365=(r21*sj6);
IkReal x2366=(((x2360*(r20*r20)))+(r22*r22)+x2361+(((-1.0)*x2360*x2361))+(((-2.0)*x2363*x2365)));
j5eval[0]=x2366;
j5eval[1]=IKsign(x2366);
j5eval[2]=((IKabs((((x2364*x2365))+(((-1.0)*x2363*x2364))+((r22*x2362)))))+(IKabs(((((-1.0)*x2362*x2363))+(((-1.0)*r22*x2364))+((x2362*x2365))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2367=cj6*cj6;
IkReal x2368=r21*r21;
IkReal x2369=(sj2*sj3);
IkReal x2370=(cj6*r20);
IkReal x2371=(cj3*sj2);
IkReal x2372=(r21*sj6);
CheckValue<IkReal> x2373 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2371))+(((-1.0)*x2369*x2370))+((x2369*x2372)))),IkReal(((((-1.0)*x2370*x2371))+((x2371*x2372))+((r22*x2369)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2373.valid){
continue;
}
CheckValue<IkReal> x2374=IKPowWithIntegerCheck(IKsign(((r22*r22)+x2368+(((-2.0)*x2370*x2372))+(((-1.0)*x2367*x2368))+((x2367*(r20*r20))))),-1);
if(!x2374.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2373.value)+(((1.5707963267949)*(x2374.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2375=IKcos(j5);
IkReal x2376=IKsin(j5);
IkReal x2377=(cj1*cj2);
IkReal x2378=((1.0)*sj3);
IkReal x2379=(cj3*sj1);
IkReal x2380=(sj6*x2376);
IkReal x2381=(cj6*x2375);
IkReal x2382=((1.0)*sj6*x2375);
IkReal x2383=((1.0)*cj6*x2376);
evalcond[0]=((((-1.0)*r21*x2382))+((r20*x2381))+((r22*x2376))+((cj3*sj2)));
evalcond[1]=((((-1.0)*r20*x2383))+((r22*x2375))+((r21*x2380))+(((-1.0)*sj2*x2378)));
evalcond[2]=((((-1.0)*r01*x2382))+((r00*x2381))+((r02*x2376))+((sj1*sj3))+((cj3*x2377)));
evalcond[3]=((((-1.0)*r00*x2383))+((r01*x2380))+(((-1.0)*x2377*x2378))+x2379+((r02*x2375)));
evalcond[4]=(((r12*x2376))+((r10*x2381))+((cj2*x2379))+(((-1.0)*cj1*x2378))+(((-1.0)*r11*x2382)));
evalcond[5]=((((-1.0)*r10*x2383))+((r12*x2375))+(((-1.0)*cj1*cj3))+(((-1.0)*cj2*sj1*x2378))+((r11*x2380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2384=((1.0)*sj6);
IkReal x2385=(cj3*sj2);
IkReal x2386=(sj1*sj3);
IkReal x2387=(r21*sj6);
IkReal x2388=((1.0)*cj6);
IkReal x2389=(cj1*cj2*cj3);
CheckValue<IkReal> x2390 = IKatan2WithCheck(IkReal((((x2387*x2389))+(((-1.0)*r20*x2388*x2389))+(((-1.0)*r20*x2386*x2388))+((cj6*r00*x2385))+(((-1.0)*r01*x2384*x2385))+((x2386*x2387)))),IkReal(((((-1.0)*r02*x2385))+((r22*x2386))+((r22*x2389)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2390.valid){
continue;
}
CheckValue<IkReal> x2391=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2384))+(((-1.0)*r11*x2388)))),-1);
if(!x2391.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2390.value)+(((1.5707963267949)*(x2391.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2392=IKcos(j5);
IkReal x2393=IKsin(j5);
IkReal x2394=(cj1*cj2);
IkReal x2395=((1.0)*sj3);
IkReal x2396=(cj3*sj1);
IkReal x2397=(sj6*x2393);
IkReal x2398=(cj6*x2392);
IkReal x2399=((1.0)*sj6*x2392);
IkReal x2400=((1.0)*cj6*x2393);
evalcond[0]=(((r20*x2398))+(((-1.0)*r21*x2399))+((r22*x2393))+((cj3*sj2)));
evalcond[1]=((((-1.0)*sj2*x2395))+((r22*x2392))+((r21*x2397))+(((-1.0)*r20*x2400)));
evalcond[2]=((((-1.0)*r01*x2399))+((r00*x2398))+((sj1*sj3))+((r02*x2393))+((cj3*x2394)));
evalcond[3]=(((r01*x2397))+x2396+((r02*x2392))+(((-1.0)*r00*x2400))+(((-1.0)*x2394*x2395)));
evalcond[4]=(((r12*x2393))+(((-1.0)*cj1*x2395))+((r10*x2398))+((cj2*x2396))+(((-1.0)*r11*x2399)));
evalcond[5]=(((r12*x2392))+(((-1.0)*cj1*cj3))+(((-1.0)*cj2*sj1*x2395))+((r11*x2397))+(((-1.0)*r10*x2400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2401=((1.0)*cj3);
IkReal x2402=(cj2*sj1);
IkReal x2403=(cj6*r20);
IkReal x2404=(r21*sj6);
IkReal x2405=((1.0)*cj1*sj3);
CheckValue<IkReal> x2406=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x2406.valid){
continue;
}
CheckValue<IkReal> x2407 = IKatan2WithCheck(IkReal(((((-1.0)*x2404*x2405))+((cj1*sj3*x2403))+(((-1.0)*x2401*x2402*x2403))+((cj3*x2402*x2404))+((cj3*cj6*r10*sj2))+(((-1.0)*r11*sj2*sj6*x2401)))),IkReal(((((-1.0)*r12*sj2*x2401))+((cj3*r22*x2402))+(((-1.0)*r22*x2405)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2407.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2406.value)))+(x2407.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2408=IKcos(j5);
IkReal x2409=IKsin(j5);
IkReal x2410=(cj1*cj2);
IkReal x2411=((1.0)*sj3);
IkReal x2412=(cj3*sj1);
IkReal x2413=(sj6*x2409);
IkReal x2414=(cj6*x2408);
IkReal x2415=((1.0)*sj6*x2408);
IkReal x2416=((1.0)*cj6*x2409);
evalcond[0]=(((r22*x2409))+((r20*x2414))+(((-1.0)*r21*x2415))+((cj3*sj2)));
evalcond[1]=((((-1.0)*r20*x2416))+((r21*x2413))+((r22*x2408))+(((-1.0)*sj2*x2411)));
evalcond[2]=(((r02*x2409))+((r00*x2414))+((cj3*x2410))+((sj1*sj3))+(((-1.0)*r01*x2415)));
evalcond[3]=((((-1.0)*r00*x2416))+x2412+((r01*x2413))+((r02*x2408))+(((-1.0)*x2410*x2411)));
evalcond[4]=(((r10*x2414))+((cj2*x2412))+((r12*x2409))+(((-1.0)*r11*x2415))+(((-1.0)*cj1*x2411)));
evalcond[5]=(((r11*x2413))+((r12*x2408))+(((-1.0)*cj1*cj3))+(((-1.0)*r10*x2416))+(((-1.0)*cj2*sj1*x2411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2417=cj6*cj6;
IkReal x2418=r21*r21;
IkReal x2419=(sj2*sj3);
IkReal x2420=(cj6*r20);
IkReal x2421=(cj3*sj2);
IkReal x2422=(r21*sj6);
CheckValue<IkReal> x2423 = IKatan2WithCheck(IkReal((((x2419*x2422))+(((-1.0)*r22*x2421))+(((-1.0)*x2419*x2420)))),IkReal((((r22*x2419))+(((-1.0)*x2420*x2421))+((x2421*x2422)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2423.valid){
continue;
}
CheckValue<IkReal> x2424=IKPowWithIntegerCheck(IKsign((x2418+(r22*r22)+((x2417*(r20*r20)))+(((-1.0)*x2417*x2418))+(((-2.0)*x2420*x2422)))),-1);
if(!x2424.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2423.value)+(((1.5707963267949)*(x2424.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x2425=IKcos(j5);
IkReal x2426=IKsin(j5);
IkReal x2427=(r21*sj6);
IkReal x2428=(cj6*r20);
evalcond[0]=(((r22*x2426))+(((-1.0)*x2425*x2427))+((x2425*x2428))+((cj3*sj2)));
evalcond[1]=(((r22*x2425))+((x2426*x2427))+(((-1.0)*sj2*sj3))+(((-1.0)*x2426*x2428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x2429=((1.0)*sj6);
IkReal x2430=((1.0)*cj6);
j1eval[0]=sj2;
j1eval[1]=IKsign(sj2);
j1eval[2]=((IKabs(((((-1.0)*r01*x2430))+(((-1.0)*r00*x2429)))))+(IKabs(((((-1.0)*r10*x2429))+(((-1.0)*r11*x2430))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j1eval[0]=sj2;
j1eval[1]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j1eval[0]=cj3;
j1eval[1]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2436=IKPowWithIntegerCheck(sj2,-1);
if(!x2436.valid){
continue;
}
IkReal x2431=x2436.value;
IkReal x2432=((1.0)*r01);
IkReal x2433=(sj2*sj5);
IkReal x2434=(cj2*sj3);
IkReal x2435=((1.0)*r00*sj6);
CheckValue<IkReal> x2437=IKPowWithIntegerCheck(cj3,-1);
if(!x2437.valid){
continue;
}
if( IKabs((x2431*(x2437.value)*(((((-1.0)*cj5*r02*sj2))+(((-1.0)*cj6*x2432*x2434))+(((-1.0)*x2434*x2435))+((cj6*r00*x2433))+(((-1.0)*sj6*x2432*x2433)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2431*(((((-1.0)*cj6*x2432))+(((-1.0)*x2435)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2431*(x2437.value)*(((((-1.0)*cj5*r02*sj2))+(((-1.0)*cj6*x2432*x2434))+(((-1.0)*x2434*x2435))+((cj6*r00*x2433))+(((-1.0)*sj6*x2432*x2433))))))+IKsqr((x2431*(((((-1.0)*cj6*x2432))+(((-1.0)*x2435))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x2431*(x2437.value)*(((((-1.0)*cj5*r02*sj2))+(((-1.0)*cj6*x2432*x2434))+(((-1.0)*x2434*x2435))+((cj6*r00*x2433))+(((-1.0)*sj6*x2432*x2433))))), (x2431*(((((-1.0)*cj6*x2432))+(((-1.0)*x2435))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x2438=IKsin(j1);
IkReal x2439=IKcos(j1);
IkReal x2440=(cj2*cj3);
IkReal x2441=(cj6*r10);
IkReal x2442=((1.0)*sj5);
IkReal x2443=((1.0)*sj6);
IkReal x2444=(r01*sj6);
IkReal x2445=((0.384)*cj3);
IkReal x2446=(r11*sj6);
IkReal x2447=(cj6*r00);
IkReal x2448=((1.0)*cj6);
IkReal x2449=(cj2*sj3);
IkReal x2450=((0.0825)*x2438);
IkReal x2451=((1.0)*x2439);
IkReal x2452=(sj3*x2438);
IkReal x2453=((0.0825)*x2439);
evalcond[0]=((((-1.0)*r00*x2443))+(((-1.0)*r01*x2448))+(((-1.0)*sj2*x2451)));
evalcond[1]=((((-1.0)*sj2*x2438))+(((-1.0)*r10*x2443))+(((-1.0)*r11*x2448)));
evalcond[2]=(x2452+(((-1.0)*cj5*r01*x2443))+((cj5*x2447))+((r02*sj5))+((x2439*x2440)));
evalcond[3]=(((sj5*x2444))+((cj3*x2438))+(((-1.0)*x2449*x2451))+(((-1.0)*x2442*x2447))+((cj5*r02)));
evalcond[4]=(((cj5*x2441))+((r12*sj5))+(((-1.0)*cj5*r11*x2443))+((x2438*x2440))+(((-1.0)*sj3*x2451)));
evalcond[5]=(((cj5*r12))+((sj5*x2446))+(((-1.0)*x2438*x2449))+(((-1.0)*x2441*x2442))+(((-1.0)*cj3*x2451)));
evalcond[6]=((((-0.384)*x2439*x2449))+(((-0.088)*x2444))+(((-1.0)*px))+(((0.088)*x2447))+((x2438*x2445))+(((-1.0)*x2440*x2453))+(((0.316)*x2438))+((cj2*x2453))+(((-1.0)*sj3*x2450)));
evalcond[7]=((((-0.384)*x2438*x2449))+((sj3*x2453))+(((-0.316)*x2439))+(((-1.0)*x2439*x2445))+(((-0.088)*x2446))+(((-1.0)*py))+(((0.088)*x2441))+(((-1.0)*x2440*x2450))+((cj2*x2450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2459=IKPowWithIntegerCheck(sj2,-1);
if(!x2459.valid){
continue;
}
IkReal x2454=x2459.value;
IkReal x2455=((1.0)*sj2);
IkReal x2456=(cj2*cj3);
IkReal x2457=(r00*sj6);
IkReal x2458=(cj6*r01);
CheckValue<IkReal> x2460=IKPowWithIntegerCheck(sj3,-1);
if(!x2460.valid){
continue;
}
if( IKabs((x2454*(x2460.value)*(((((-1.0)*r02*sj5*x2455))+((cj5*r01*sj2*sj6))+((x2456*x2458))+((x2456*x2457))+(((-1.0)*cj5*cj6*r00*x2455)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2454*(((((-1.0)*x2457))+(((-1.0)*x2458)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2454*(x2460.value)*(((((-1.0)*r02*sj5*x2455))+((cj5*r01*sj2*sj6))+((x2456*x2458))+((x2456*x2457))+(((-1.0)*cj5*cj6*r00*x2455))))))+IKsqr((x2454*(((((-1.0)*x2457))+(((-1.0)*x2458))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x2454*(x2460.value)*(((((-1.0)*r02*sj5*x2455))+((cj5*r01*sj2*sj6))+((x2456*x2458))+((x2456*x2457))+(((-1.0)*cj5*cj6*r00*x2455))))), (x2454*(((((-1.0)*x2457))+(((-1.0)*x2458))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x2461=IKsin(j1);
IkReal x2462=IKcos(j1);
IkReal x2463=(cj2*cj3);
IkReal x2464=(cj6*r10);
IkReal x2465=((1.0)*sj5);
IkReal x2466=((1.0)*sj6);
IkReal x2467=(r01*sj6);
IkReal x2468=((0.384)*cj3);
IkReal x2469=(r11*sj6);
IkReal x2470=(cj6*r00);
IkReal x2471=((1.0)*cj6);
IkReal x2472=(cj2*sj3);
IkReal x2473=((0.0825)*x2461);
IkReal x2474=((1.0)*x2462);
IkReal x2475=(sj3*x2461);
IkReal x2476=((0.0825)*x2462);
evalcond[0]=((((-1.0)*r01*x2471))+(((-1.0)*r00*x2466))+(((-1.0)*sj2*x2474)));
evalcond[1]=((((-1.0)*r11*x2471))+(((-1.0)*sj2*x2461))+(((-1.0)*r10*x2466)));
evalcond[2]=(x2475+(((-1.0)*cj5*r01*x2466))+((x2462*x2463))+((r02*sj5))+((cj5*x2470)));
evalcond[3]=(((cj3*x2461))+(((-1.0)*x2472*x2474))+((sj5*x2467))+(((-1.0)*x2465*x2470))+((cj5*r02)));
evalcond[4]=(((x2461*x2463))+(((-1.0)*cj5*r11*x2466))+((r12*sj5))+((cj5*x2464))+(((-1.0)*sj3*x2474)));
evalcond[5]=((((-1.0)*x2464*x2465))+((cj5*r12))+(((-1.0)*x2461*x2472))+((sj5*x2469))+(((-1.0)*cj3*x2474)));
evalcond[6]=((((0.316)*x2461))+((cj2*x2476))+((x2461*x2468))+(((-1.0)*px))+(((-1.0)*x2463*x2476))+(((-0.088)*x2467))+(((0.088)*x2470))+(((-1.0)*sj3*x2473))+(((-0.384)*x2462*x2472)));
evalcond[7]=(((cj2*x2473))+(((-0.316)*x2462))+(((-1.0)*py))+(((-1.0)*x2463*x2473))+(((0.088)*x2464))+(((-0.088)*x2469))+((sj3*x2476))+(((-0.384)*x2461*x2472))+(((-1.0)*x2462*x2468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2477=((1.0)*sj6);
IkReal x2478=((1.0)*cj6);
CheckValue<IkReal> x2479=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x2479.valid){
continue;
}
CheckValue<IkReal> x2480 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2478))+(((-1.0)*r10*x2477)))),IkReal(((((-1.0)*r01*x2478))+(((-1.0)*r00*x2477)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2480.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2479.value)))+(x2480.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x2481=IKsin(j1);
IkReal x2482=IKcos(j1);
IkReal x2483=(cj2*cj3);
IkReal x2484=(cj6*r10);
IkReal x2485=((1.0)*sj5);
IkReal x2486=((1.0)*sj6);
IkReal x2487=(r01*sj6);
IkReal x2488=((0.384)*cj3);
IkReal x2489=(r11*sj6);
IkReal x2490=(cj6*r00);
IkReal x2491=((1.0)*cj6);
IkReal x2492=(cj2*sj3);
IkReal x2493=((0.0825)*x2481);
IkReal x2494=((1.0)*x2482);
IkReal x2495=(sj3*x2481);
IkReal x2496=((0.0825)*x2482);
evalcond[0]=((((-1.0)*r00*x2486))+(((-1.0)*r01*x2491))+(((-1.0)*sj2*x2494)));
evalcond[1]=((((-1.0)*r10*x2486))+(((-1.0)*sj2*x2481))+(((-1.0)*r11*x2491)));
evalcond[2]=(((x2482*x2483))+x2495+(((-1.0)*cj5*r01*x2486))+((r02*sj5))+((cj5*x2490)));
evalcond[3]=(((sj5*x2487))+((cj3*x2481))+(((-1.0)*x2485*x2490))+((cj5*r02))+(((-1.0)*x2492*x2494)));
evalcond[4]=(((x2481*x2483))+(((-1.0)*cj5*r11*x2486))+(((-1.0)*sj3*x2494))+((r12*sj5))+((cj5*x2484)));
evalcond[5]=(((cj5*r12))+((sj5*x2489))+(((-1.0)*cj3*x2494))+(((-1.0)*x2484*x2485))+(((-1.0)*x2481*x2492)));
evalcond[6]=(((x2481*x2488))+(((-0.384)*x2482*x2492))+((cj2*x2496))+(((0.316)*x2481))+(((0.088)*x2490))+(((-1.0)*px))+(((-1.0)*sj3*x2493))+(((-0.088)*x2487))+(((-1.0)*x2483*x2496)));
evalcond[7]=((((-0.384)*x2481*x2492))+((sj3*x2496))+((cj2*x2493))+(((0.088)*x2484))+(((-1.0)*py))+(((-0.088)*x2489))+(((-1.0)*x2482*x2488))+(((-0.316)*x2482))+(((-1.0)*x2483*x2493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2497=((1.0)*sj6);
IkReal x2498=((1.0)*cj6);
CheckValue<IkReal> x2499 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2497))+(((-1.0)*r11*x2498)))),IkReal(((((-1.0)*r01*x2498))+(((-1.0)*r00*x2497)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2499.valid){
continue;
}
CheckValue<IkReal> x2500=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x2500.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2499.value)+(((1.5707963267949)*(x2500.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2501=IKcos(j1);
IkReal x2502=IKsin(j1);
IkReal x2503=((1.0)*sj6);
IkReal x2504=((1.0)*sj2);
IkReal x2505=((0.088)*sj6);
IkReal x2506=((0.384)*cj3);
IkReal x2507=((0.088)*cj6);
IkReal x2508=((0.0825)*sj3);
IkReal x2509=((1.0)*cj6);
IkReal x2510=((0.384)*cj2*sj3);
IkReal x2511=((0.0825)*cj2*x2502);
IkReal x2512=((0.0825)*cj2*x2501);
evalcond[0]=((((-1.0)*r00*x2503))+(((-1.0)*r01*x2509))+(((-1.0)*x2501*x2504)));
evalcond[1]=((((-1.0)*r11*x2509))+(((-1.0)*x2502*x2504))+(((-1.0)*r10*x2503)));
evalcond[2]=((((0.316)*x2502))+x2512+(((-1.0)*cj3*x2512))+(((-1.0)*x2502*x2508))+(((-1.0)*r01*x2505))+(((-1.0)*px))+(((-1.0)*x2501*x2510))+((r00*x2507))+((x2502*x2506)));
evalcond[3]=(x2511+(((-1.0)*cj3*x2511))+(((-1.0)*x2502*x2510))+((x2501*x2508))+((r10*x2507))+(((-1.0)*r11*x2505))+(((-1.0)*py))+(((-1.0)*x2501*x2506))+(((-0.316)*x2501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x2513=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x2513;
j5eval[1]=IKsign(x2513);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x2514=((((-1.0)*r10*sj6))+(((-1.0)*cj6*r11)));
j5eval[0]=x2514;
j5eval[1]=IKsign(x2514);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x2515=cj6*cj6;
IkReal x2516=r21*r21;
IkReal x2517=(sj2*sj3);
IkReal x2518=(cj6*r20);
IkReal x2519=(cj3*sj2);
IkReal x2520=(r21*sj6);
IkReal x2521=((((-1.0)*x2515*x2516))+x2516+(r22*r22)+((x2515*(r20*r20)))+(((-2.0)*x2518*x2520)));
j5eval[0]=x2521;
j5eval[1]=IKsign(x2521);
j5eval[2]=((IKabs((((x2519*x2520))+((r22*x2517))+(((-1.0)*x2518*x2519)))))+(IKabs((((x2517*x2520))+(((-1.0)*r22*x2519))+(((-1.0)*x2517*x2518))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2522=cj6*cj6;
IkReal x2523=r21*r21;
IkReal x2524=(sj2*sj3);
IkReal x2525=(cj6*r20);
IkReal x2526=(cj3*sj2);
IkReal x2527=(r21*sj6);
CheckValue<IkReal> x2528=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2525*x2527))+x2523+(r22*r22)+((x2522*(r20*r20)))+(((-1.0)*x2522*x2523)))),-1);
if(!x2528.valid){
continue;
}
CheckValue<IkReal> x2529 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2526))+(((-1.0)*x2524*x2525))+((x2524*x2527)))),IkReal((((r22*x2524))+(((-1.0)*x2525*x2526))+((x2526*x2527)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2529.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2528.value)))+(x2529.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2530=IKcos(j5);
IkReal x2531=IKsin(j5);
IkReal x2532=(cj1*cj2);
IkReal x2533=((1.0)*sj3);
IkReal x2534=(cj3*sj1);
IkReal x2535=(sj6*x2531);
IkReal x2536=(cj6*x2530);
IkReal x2537=((1.0)*sj6*x2530);
IkReal x2538=((1.0)*cj6*x2531);
evalcond[0]=((((-1.0)*r21*x2537))+((r20*x2536))+((r22*x2531))+((cj3*sj2)));
evalcond[1]=((((-1.0)*r20*x2538))+(((-1.0)*sj2*x2533))+((r21*x2535))+((r22*x2530)));
evalcond[2]=((((-1.0)*r01*x2537))+((sj1*sj3))+((cj3*x2532))+((r02*x2531))+((r00*x2536)));
evalcond[3]=(((r01*x2535))+x2534+(((-1.0)*r00*x2538))+((r02*x2530))+(((-1.0)*x2532*x2533)));
evalcond[4]=(((r10*x2536))+((cj2*x2534))+((r12*x2531))+(((-1.0)*r11*x2537))+(((-1.0)*cj1*x2533)));
evalcond[5]=((((-1.0)*cj2*sj1*x2533))+(((-1.0)*cj1*cj3))+(((-1.0)*r10*x2538))+((r12*x2530))+((r11*x2535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2539=((1.0)*sj6);
IkReal x2540=(cj3*sj2);
IkReal x2541=(sj1*sj3);
IkReal x2542=(r21*sj6);
IkReal x2543=((1.0)*cj6);
IkReal x2544=(cj1*cj2*cj3);
CheckValue<IkReal> x2545 = IKatan2WithCheck(IkReal((((cj6*r00*x2540))+(((-1.0)*r01*x2539*x2540))+(((-1.0)*r20*x2543*x2544))+((x2542*x2544))+(((-1.0)*r20*x2541*x2543))+((x2541*x2542)))),IkReal(((((-1.0)*r02*x2540))+((r22*x2541))+((r22*x2544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2545.valid){
continue;
}
CheckValue<IkReal> x2546=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2543))+(((-1.0)*r10*x2539)))),-1);
if(!x2546.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2545.value)+(((1.5707963267949)*(x2546.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2547=IKcos(j5);
IkReal x2548=IKsin(j5);
IkReal x2549=(cj1*cj2);
IkReal x2550=((1.0)*sj3);
IkReal x2551=(cj3*sj1);
IkReal x2552=(sj6*x2548);
IkReal x2553=(cj6*x2547);
IkReal x2554=((1.0)*sj6*x2547);
IkReal x2555=((1.0)*cj6*x2548);
evalcond[0]=((((-1.0)*r21*x2554))+((r20*x2553))+((r22*x2548))+((cj3*sj2)));
evalcond[1]=((((-1.0)*r20*x2555))+(((-1.0)*sj2*x2550))+((r21*x2552))+((r22*x2547)));
evalcond[2]=(((cj3*x2549))+((sj1*sj3))+(((-1.0)*r01*x2554))+((r00*x2553))+((r02*x2548)));
evalcond[3]=((((-1.0)*x2549*x2550))+x2551+((r01*x2552))+(((-1.0)*r00*x2555))+((r02*x2547)));
evalcond[4]=(((cj2*x2551))+(((-1.0)*r11*x2554))+((r12*x2548))+(((-1.0)*cj1*x2550))+((r10*x2553)));
evalcond[5]=((((-1.0)*cj1*cj3))+((r12*x2547))+((r11*x2552))+(((-1.0)*cj2*sj1*x2550))+(((-1.0)*r10*x2555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2556=((1.0)*cj3);
IkReal x2557=(cj2*sj1);
IkReal x2558=(cj6*r20);
IkReal x2559=(r21*sj6);
IkReal x2560=((1.0)*cj1*sj3);
CheckValue<IkReal> x2561=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x2561.valid){
continue;
}
CheckValue<IkReal> x2562 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj2*sj6*x2556))+((cj1*sj3*x2558))+(((-1.0)*x2559*x2560))+(((-1.0)*x2556*x2557*x2558))+((cj3*x2557*x2559))+((cj3*cj6*r10*sj2)))),IkReal(((((-1.0)*r22*x2560))+((cj3*r22*x2557))+(((-1.0)*r12*sj2*x2556)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2562.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2561.value)))+(x2562.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2563=IKcos(j5);
IkReal x2564=IKsin(j5);
IkReal x2565=(cj1*cj2);
IkReal x2566=((1.0)*sj3);
IkReal x2567=(cj3*sj1);
IkReal x2568=(sj6*x2564);
IkReal x2569=(cj6*x2563);
IkReal x2570=((1.0)*sj6*x2563);
IkReal x2571=((1.0)*cj6*x2564);
evalcond[0]=(((r22*x2564))+((r20*x2569))+(((-1.0)*r21*x2570))+((cj3*sj2)));
evalcond[1]=(((r22*x2563))+(((-1.0)*sj2*x2566))+(((-1.0)*r20*x2571))+((r21*x2568)));
evalcond[2]=(((r00*x2569))+((cj3*x2565))+((sj1*sj3))+(((-1.0)*r01*x2570))+((r02*x2564)));
evalcond[3]=(x2567+((r01*x2568))+(((-1.0)*x2565*x2566))+(((-1.0)*r00*x2571))+((r02*x2563)));
evalcond[4]=((((-1.0)*cj1*x2566))+((cj2*x2567))+((r10*x2569))+((r12*x2564))+(((-1.0)*r11*x2570)));
evalcond[5]=((((-1.0)*r10*x2571))+(((-1.0)*cj2*sj1*x2566))+(((-1.0)*cj1*cj3))+((r12*x2563))+((r11*x2568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2572=cj2*cj2;
IkReal x2573=cj3*cj3;
IkReal x2574=(cj6*r10);
IkReal x2575=(r11*sj6);
IkReal x2576=(cj3*py);
IkReal x2577=((0.0825)*sj3);
IkReal x2578=((0.00726)*sj3);
IkReal x2579=(r01*sj6);
IkReal x2580=(cj6*r00);
IkReal x2581=((0.0825)*cj2);
IkReal x2582=(cj3*px);
IkReal x2583=((0.033792)*cj3);
IkReal x2584=((0.06336)*sj3);
IkReal x2585=((0.00726)*cj2);
IkReal x2586=(cj3*x2585);
IkReal x2587=(cj3*x2572);
IkReal x2588=((0.033792)*cj2*sj3);
IkReal x2589=((0.14064975)*x2573);
IkReal x2590=((0.384)*cj2*sj3);
CheckValue<IkReal> x2591=IKPowWithIntegerCheck(IKsign(((0.10666225)+((x2584*x2587))+x2589+(((-1.0)*x2572*x2589))+(((-1.0)*x2572*x2584))+(((-0.0136125)*x2587))+(((-0.05214)*sj3))+(((-1.0)*cj3*x2584))+(((0.15426225)*x2572))+(((0.242688)*cj3)))),-1);
if(!x2591.valid){
continue;
}
CheckValue<IkReal> x2592 = IKatan2WithCheck(IkReal(((((-0.027808)*x2580))+(((0.384)*x2582))+((x2574*x2586))+((x2574*x2588))+(((-1.0)*x2578*x2579))+(((0.316)*px))+((x2575*x2585))+((x2579*x2583))+((py*x2581))+(((0.027808)*x2579))+(((-1.0)*py*x2590))+(((-1.0)*x2576*x2581))+((x2578*x2580))+(((-1.0)*px*x2577))+(((-1.0)*x2575*x2588))+(((-1.0)*x2575*x2586))+(((-1.0)*x2580*x2583))+(((-1.0)*x2574*x2585)))),IkReal(((((-0.027808)*x2575))+((x2575*x2578))+(((-0.384)*x2576))+((x2574*x2583))+(((-1.0)*x2579*x2586))+(((-1.0)*x2579*x2588))+((x2580*x2586))+((x2580*x2588))+(((-0.316)*py))+((py*x2577))+((x2579*x2585))+(((0.027808)*x2574))+((px*x2581))+(((-1.0)*x2574*x2578))+(((-1.0)*x2575*x2583))+(((-1.0)*x2580*x2585))+(((-1.0)*x2581*x2582))+(((-1.0)*px*x2590)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2592.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2591.value)))+(x2592.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x2593=IKsin(j1);
IkReal x2594=IKcos(j1);
IkReal x2595=((0.088)*cj6);
IkReal x2596=((0.384)*sj3);
IkReal x2597=((0.0825)*cj3);
IkReal x2598=((0.0825)*sj3);
IkReal x2599=((0.384)*cj3);
IkReal x2600=((0.088)*sj6);
IkReal x2601=(cj2*x2593);
IkReal x2602=(cj2*x2594);
evalcond[0]=((((-1.0)*x2596*x2602))+((r00*x2595))+(((0.0825)*x2602))+(((-1.0)*x2597*x2602))+(((-1.0)*x2593*x2598))+(((0.316)*x2593))+(((-1.0)*px))+((x2593*x2599))+(((-1.0)*r01*x2600)));
evalcond[1]=((((-1.0)*x2596*x2601))+((x2594*x2598))+(((0.0825)*x2601))+(((-1.0)*x2594*x2599))+(((-1.0)*x2597*x2601))+(((-0.316)*x2594))+((r10*x2595))+(((-1.0)*r11*x2600))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x2603=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x2603;
j5eval[1]=IKsign(x2603);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x2604=((((-1.0)*r00*sj6))+(((-1.0)*cj6*r01)));
j5eval[0]=x2604;
j5eval[1]=IKsign(x2604);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x2605=((((-1.0)*cj6*r21))+(((-1.0)*r20*sj6)));
j5eval[0]=x2605;
j5eval[1]=IKsign(x2605);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2606=((-1.0)*r20);
IkReal x2608 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2608)==0){
continue;
}
IkReal x2607=pow(x2608,-0.5);
CheckValue<IkReal> x2609 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2606),IKFAST_ATAN2_MAGTHRESH);
if(!x2609.valid){
continue;
}
IkReal gconst0=((-1.0)*(x2609.value));
IkReal gconst1=(r21*x2607);
IkReal gconst2=(x2606*x2607);
CheckValue<IkReal> x2610 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2610.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2610.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2611=(gconst1*r21);
IkReal x2612=(cj3*sj1);
IkReal x2613=(sj2*sj3);
IkReal x2614=(gconst2*r20);
IkReal x2615=(cj1*cj2*sj3);
CheckValue<IkReal> x2616 = IKatan2WithCheck(IkReal((((r02*x2613))+((r22*x2612))+(((-1.0)*r22*x2615)))),IkReal(((((-1.0)*gconst1*r01*x2613))+((gconst2*r00*x2613))+(((-1.0)*x2611*x2612))+(((-1.0)*x2614*x2615))+((x2611*x2615))+((x2612*x2614)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2616.valid){
continue;
}
CheckValue<IkReal> x2617=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x2617.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2616.value)+(((1.5707963267949)*(x2617.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x2618=IKsin(j5);
IkReal x2619=IKcos(j5);
IkReal x2620=(cj3*sj1);
IkReal x2621=((1.0)*cj4);
IkReal x2622=(cj4*gconst2);
IkReal x2623=(gconst2*r00);
IkReal x2624=(cj4*gconst1);
IkReal x2625=((1.0)*sj4);
IkReal x2626=((1.0)*cj1);
IkReal x2627=(gconst2*r20);
IkReal x2628=(gconst2*r10);
IkReal x2629=((1.0)*sj2);
IkReal x2630=(r22*x2618);
IkReal x2631=((1.0)*cj2*sj3);
IkReal x2632=(r21*x2619);
IkReal x2633=((1.0)*x2618);
IkReal x2634=(r12*x2618);
IkReal x2635=(gconst1*x2618);
IkReal x2636=(r02*x2618);
IkReal x2637=(gconst1*sj4*x2619);
evalcond[0]=((((-1.0)*sj3*x2629))+((r21*x2635))+((r22*x2619))+(((-1.0)*x2627*x2633)));
evalcond[1]=((((-1.0)*cj2*sj3*x2626))+((r01*x2635))+(((-1.0)*x2623*x2633))+((r02*x2619))+x2620);
evalcond[2]=((((-1.0)*x2628*x2633))+((r11*x2635))+(((-1.0)*sj1*x2631))+((r12*x2619))+(((-1.0)*cj3*x2626)));
evalcond[3]=(((r20*x2624))+cj2+((gconst1*sj4*x2632))+(((-1.0)*x2619*x2625*x2627))+(((-1.0)*x2625*x2630))+((r21*x2622)));
evalcond[4]=(((r01*x2622))+(((-1.0)*sj2*x2626))+((r00*x2624))+(((-1.0)*x2619*x2623*x2625))+((r01*x2637))+(((-1.0)*x2625*x2636)));
evalcond[5]=(((r11*x2637))+((r11*x2622))+(((-1.0)*x2619*x2625*x2628))+((r10*x2624))+(((-1.0)*x2625*x2634))+(((-1.0)*sj1*x2629)));
evalcond[6]=((((-1.0)*gconst1*r20*x2625))+((x2624*x2632))+(((-1.0)*x2621*x2630))+(((-1.0)*x2619*x2621*x2627))+(((-1.0)*gconst2*r21*x2625))+((cj3*sj2)));
evalcond[7]=((((-1.0)*gconst1*r00*x2625))+((sj1*sj3))+(((-1.0)*x2621*x2636))+((cj1*cj2*cj3))+(((-1.0)*gconst2*r01*x2625))+(((-1.0)*x2619*x2621*x2623))+((r01*x2619*x2624)));
evalcond[8]=((((-1.0)*gconst2*r11*x2625))+(((-1.0)*sj3*x2626))+((cj2*x2620))+(((-1.0)*gconst1*r10*x2625))+(((-1.0)*x2621*x2634))+(((-1.0)*x2619*x2621*x2628))+((r11*x2619*x2624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2638=((-1.0)*r21);
IkReal x2640 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2640)==0){
continue;
}
IkReal x2639=pow(x2640,-0.5);
CheckValue<IkReal> x2641 = IKatan2WithCheck(IkReal(x2638),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2641.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x2641.value))));
IkReal gconst4=(x2638*x2639);
IkReal gconst5=((1.0)*r20*x2639);
CheckValue<IkReal> x2642 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2642.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2642.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2643=((1.0)*sj3);
IkReal x2644=(cj1*cj2);
IkReal x2645=(sj2*sj3);
IkReal x2646=(cj3*sj1);
IkReal x2647=(gconst4*r21);
IkReal x2648=(gconst5*r20);
CheckValue<IkReal> x2649=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x2649.valid){
continue;
}
CheckValue<IkReal> x2650 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2643*x2644))+((r02*x2645))+((r22*x2646)))),IkReal(((((-1.0)*gconst4*r01*sj2*x2643))+(((-1.0)*x2646*x2647))+((gconst5*r00*x2645))+(((-1.0)*x2643*x2644*x2648))+((x2646*x2648))+((sj3*x2644*x2647)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2650.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2649.value)))+(x2650.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x2651=IKsin(j5);
IkReal x2652=IKcos(j5);
IkReal x2653=(r21*sj4);
IkReal x2654=(gconst5*r00);
IkReal x2655=(cj3*sj1);
IkReal x2656=(cj4*r11);
IkReal x2657=((1.0)*sj1);
IkReal x2658=((1.0)*sj4);
IkReal x2659=(gconst4*r00);
IkReal x2660=(cj1*cj3);
IkReal x2661=(cj4*gconst5);
IkReal x2662=((1.0)*sj2);
IkReal x2663=(gconst5*r10);
IkReal x2664=(gconst4*r20);
IkReal x2665=(gconst5*r20);
IkReal x2666=(gconst4*r10);
IkReal x2667=(gconst4*x2652);
IkReal x2668=((1.0)*x2651);
IkReal x2669=((1.0)*cj1*sj3);
IkReal x2670=((1.0)*x2652);
IkReal x2671=(gconst4*x2651);
evalcond[0]=(((r21*x2671))+((r22*x2652))+(((-1.0)*x2665*x2668))+(((-1.0)*sj3*x2662)));
evalcond[1]=((((-1.0)*cj2*x2669))+((r02*x2652))+((r01*x2671))+(((-1.0)*x2654*x2668))+x2655);
evalcond[2]=(((r12*x2652))+(((-1.0)*x2660))+(((-1.0)*x2663*x2668))+(((-1.0)*cj2*sj3*x2657))+((r11*x2671)));
evalcond[3]=(cj2+((r21*x2661))+(((-1.0)*x2652*x2658*x2665))+((x2653*x2667))+((cj4*x2664))+(((-1.0)*r22*x2651*x2658)));
evalcond[4]=((((-1.0)*cj1*x2662))+(((-1.0)*r02*x2651*x2658))+((cj4*x2659))+(((-1.0)*x2652*x2654*x2658))+((r01*x2661))+((r01*sj4*x2667)));
evalcond[5]=(((r11*sj4*x2667))+(((-1.0)*r12*x2651*x2658))+(((-1.0)*x2652*x2658*x2663))+((gconst5*x2656))+((cj4*x2666))+(((-1.0)*sj2*x2657)));
evalcond[6]=((((-1.0)*gconst5*x2653))+((cj4*r21*x2667))+(((-1.0)*r20*x2661*x2670))+(((-1.0)*x2658*x2664))+(((-1.0)*cj4*r22*x2668))+((cj3*sj2)));
evalcond[7]=(((sj1*sj3))+(((-1.0)*x2658*x2659))+(((-1.0)*gconst5*r01*x2658))+(((-1.0)*cj4*r02*x2668))+((cj2*x2660))+((cj4*r01*x2667))+(((-1.0)*cj4*x2654*x2670)));
evalcond[8]=((((-1.0)*gconst5*r11*x2658))+((x2656*x2667))+(((-1.0)*x2669))+(((-1.0)*r10*x2661*x2670))+(((-1.0)*x2658*x2666))+((cj2*x2655))+(((-1.0)*cj4*r12*x2668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2672=((-1.0)*r00);
IkReal x2674 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2674)==0){
continue;
}
IkReal x2673=pow(x2674,-0.5);
CheckValue<IkReal> x2675 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2672),IKFAST_ATAN2_MAGTHRESH);
if(!x2675.valid){
continue;
}
IkReal gconst6=((-1.0)*(x2675.value));
IkReal gconst7=(r01*x2673);
IkReal gconst8=(x2672*x2673);
CheckValue<IkReal> x2676 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2676.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2676.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2677=((1.0)*sj3);
IkReal x2678=(cj1*cj2);
IkReal x2679=(cj3*sj1);
IkReal x2680=(sj2*sj3);
IkReal x2681=(gconst7*r21);
IkReal x2682=(gconst8*r20);
CheckValue<IkReal> x2683=IKPowWithIntegerCheck(IKsign((((gconst7*r10))+((gconst8*r11)))),-1);
if(!x2683.valid){
continue;
}
CheckValue<IkReal> x2684 = IKatan2WithCheck(IkReal((((r02*x2680))+(((-1.0)*r22*x2677*x2678))+((r22*x2679)))),IkReal((((sj3*x2678*x2681))+(((-1.0)*x2679*x2681))+(((-1.0)*gconst7*r01*sj2*x2677))+((gconst8*r00*x2680))+((x2679*x2682))+(((-1.0)*x2677*x2678*x2682)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2684.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2683.value)))+(x2684.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x2685=IKsin(j5);
IkReal x2686=IKcos(j5);
IkReal x2687=(cj4*gconst8);
IkReal x2688=(cj3*sj1);
IkReal x2689=(cj1*cj2);
IkReal x2690=((1.0)*sj3);
IkReal x2691=(r10*sj4);
IkReal x2692=(cj4*gconst7);
IkReal x2693=((1.0)*sj2);
IkReal x2694=((1.0)*gconst7);
IkReal x2695=(r20*sj4);
IkReal x2696=(gconst7*sj4);
IkReal x2697=(r00*sj4);
IkReal x2698=((1.0)*x2686);
IkReal x2699=(gconst7*x2685);
IkReal x2700=((1.0)*gconst8*sj4);
IkReal x2701=(r21*x2686);
IkReal x2702=((1.0)*x2685);
IkReal x2703=(r11*x2686);
IkReal x2704=(r22*x2702);
IkReal x2705=(gconst7*r01*x2686);
IkReal x2706=(gconst8*x2702);
evalcond[0]=((((-1.0)*sj2*x2690))+((r22*x2686))+(((-1.0)*r20*x2706))+((r21*x2699)));
evalcond[1]=(((r02*x2686))+(((-1.0)*r00*x2706))+(((-1.0)*x2689*x2690))+((r01*x2699))+x2688);
evalcond[2]=((((-1.0)*r10*x2706))+(((-1.0)*cj1*cj3))+((r12*x2686))+((r11*x2699))+(((-1.0)*cj2*sj1*x2690)));
evalcond[3]=(cj2+((r21*x2687))+(((-1.0)*sj4*x2704))+(((-1.0)*gconst8*x2695*x2698))+((r20*x2692))+((x2696*x2701)));
evalcond[4]=((((-1.0)*cj1*x2693))+(((-1.0)*gconst8*x2697*x2698))+((r01*x2686*x2696))+((r01*x2687))+((r00*x2692))+(((-1.0)*r02*sj4*x2702)));
evalcond[5]=((((-1.0)*r12*sj4*x2702))+((r11*x2687))+(((-1.0)*sj1*x2693))+((r10*x2692))+(((-1.0)*gconst8*x2691*x2698))+((x2696*x2703)));
evalcond[6]=((((-1.0)*cj4*x2704))+(((-1.0)*r20*x2687*x2698))+(((-1.0)*r21*x2700))+((x2692*x2701))+((cj3*sj2))+(((-1.0)*x2694*x2695)));
evalcond[7]=(((cj3*x2689))+((r01*x2686*x2692))+(((-1.0)*r01*x2700))+((sj1*sj3))+(((-1.0)*r00*x2687*x2698))+(((-1.0)*x2694*x2697))+(((-1.0)*cj4*r02*x2702)));
evalcond[8]=((((-1.0)*r10*x2687*x2698))+(((-1.0)*x2691*x2694))+(((-1.0)*cj1*x2690))+(((-1.0)*r11*x2700))+(((-1.0)*cj4*r12*x2702))+((x2692*x2703))+((cj2*x2688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2707=((-1.0)*r01);
IkReal x2709 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2709)==0){
continue;
}
IkReal x2708=pow(x2709,-0.5);
CheckValue<IkReal> x2710 = IKatan2WithCheck(IkReal(x2707),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2710.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x2710.value))));
IkReal gconst10=(x2707*x2708);
IkReal gconst11=((1.0)*r00*x2708);
CheckValue<IkReal> x2711 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2711.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2711.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2712=((1.0)*sj3);
IkReal x2713=(cj1*cj2);
IkReal x2714=(cj3*sj1);
IkReal x2715=(gconst11*r20);
IkReal x2716=(sj2*sj3);
IkReal x2717=(gconst10*r21);
CheckValue<IkReal> x2718 = IKatan2WithCheck(IkReal((((r02*x2716))+((r22*x2714))+(((-1.0)*r22*x2712*x2713)))),IkReal(((((-1.0)*x2714*x2717))+((gconst11*r00*x2716))+((sj3*x2713*x2717))+(((-1.0)*x2712*x2713*x2715))+(((-1.0)*gconst10*r01*sj2*x2712))+((x2714*x2715)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2718.valid){
continue;
}
CheckValue<IkReal> x2719=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x2719.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2718.value)+(((1.5707963267949)*(x2719.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x2720=IKsin(j5);
IkReal x2721=IKcos(j5);
IkReal x2722=(cj4*gconst11);
IkReal x2723=((1.0)*sj4);
IkReal x2724=(cj3*sj1);
IkReal x2725=(gconst10*r00);
IkReal x2726=(cj1*cj2);
IkReal x2727=((1.0)*sj3);
IkReal x2728=((1.0)*sj2);
IkReal x2729=(cj4*gconst10);
IkReal x2730=(gconst10*sj4);
IkReal x2731=(gconst11*x2721);
IkReal x2732=((1.0)*x2720);
IkReal x2733=(r01*x2721);
IkReal x2734=(gconst10*x2720);
IkReal x2735=((1.0)*x2721);
IkReal x2736=(r11*x2721);
IkReal x2737=(r21*x2721);
evalcond[0]=(((r22*x2721))+(((-1.0)*gconst11*r20*x2732))+((r21*x2734))+(((-1.0)*sj2*x2727)));
evalcond[1]=(x2724+((r02*x2721))+(((-1.0)*x2726*x2727))+((r01*x2734))+(((-1.0)*gconst11*r00*x2732)));
evalcond[2]=((((-1.0)*cj2*sj1*x2727))+(((-1.0)*cj1*cj3))+(((-1.0)*gconst11*r10*x2732))+((r12*x2721))+((r11*x2734)));
evalcond[3]=(cj2+((r21*x2722))+((x2730*x2737))+(((-1.0)*r22*x2720*x2723))+((r20*x2729))+(((-1.0)*r20*x2723*x2731)));
evalcond[4]=((((-1.0)*r02*x2720*x2723))+(((-1.0)*r00*x2723*x2731))+((r01*x2722))+((x2730*x2733))+((cj4*x2725))+(((-1.0)*cj1*x2728)));
evalcond[5]=((((-1.0)*sj1*x2728))+(((-1.0)*r10*x2723*x2731))+(((-1.0)*r12*x2720*x2723))+((x2730*x2736))+((r11*x2722))+((r10*x2729)));
evalcond[6]=((((-1.0)*gconst11*r21*x2723))+(((-1.0)*gconst10*r20*x2723))+(((-1.0)*cj4*r22*x2732))+(((-1.0)*r20*x2722*x2735))+((x2729*x2737))+((cj3*sj2)));
evalcond[7]=((((-1.0)*gconst11*r01*x2723))+((sj1*sj3))+((cj3*x2726))+(((-1.0)*r00*x2722*x2735))+(((-1.0)*x2723*x2725))+(((-1.0)*cj4*r02*x2732))+((x2729*x2733)));
evalcond[8]=((((-1.0)*r10*x2722*x2735))+(((-1.0)*cj4*r12*x2732))+(((-1.0)*gconst11*r11*x2723))+((cj2*x2724))+(((-1.0)*gconst10*r10*x2723))+((x2729*x2736))+(((-1.0)*cj1*x2727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2739 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2739)==0){
continue;
}
IkReal x2738=pow(x2739,-0.5);
CheckValue<IkReal> x2740 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2740.valid){
continue;
}
IkReal gconst12=((-1.0)*(x2740.value));
IkReal gconst13=((-1.0)*r11*x2738);
IkReal gconst14=(r10*x2738);
CheckValue<IkReal> x2741 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2741.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2741.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2742=((1.0)*gconst13);
IkReal x2743=(sj2*sj3);
IkReal x2744=(gconst13*r21);
IkReal x2745=((1.0)*gconst14);
IkReal x2746=(cj1*cj3);
IkReal x2747=((1.0)*r22);
IkReal x2748=(cj2*sj1*sj3);
CheckValue<IkReal> x2749=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2745))+(((-1.0)*r00*x2742)))),-1);
if(!x2749.valid){
continue;
}
CheckValue<IkReal> x2750 = IKatan2WithCheck(IkReal(((((-1.0)*x2747*x2748))+((r12*x2743))+(((-1.0)*x2746*x2747)))),IkReal(((((-1.0)*r20*x2745*x2746))+(((-1.0)*r20*x2745*x2748))+((x2744*x2748))+((x2744*x2746))+((gconst14*r10*x2743))+(((-1.0)*r11*x2742*x2743)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2750.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2749.value)))+(x2750.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x2751=IKsin(j5);
IkReal x2752=IKcos(j5);
IkReal x2753=(cj4*r21);
IkReal x2754=(r01*sj4);
IkReal x2755=(gconst14*r00);
IkReal x2756=(cj4*r20);
IkReal x2757=(cj3*sj1);
IkReal x2758=(cj1*cj2);
IkReal x2759=((1.0)*sj3);
IkReal x2760=((1.0)*sj2);
IkReal x2761=(cj4*r01);
IkReal x2762=((1.0)*gconst14);
IkReal x2763=(r21*sj4);
IkReal x2764=(cj4*r11);
IkReal x2765=(gconst13*r00);
IkReal x2766=((1.0)*sj4);
IkReal x2767=(gconst13*r10);
IkReal x2768=(r11*sj4);
IkReal x2769=(gconst13*x2752);
IkReal x2770=((1.0)*x2751);
IkReal x2771=(gconst13*x2751);
IkReal x2772=((1.0)*x2752);
IkReal x2773=(sj4*x2752);
evalcond[0]=(((r22*x2752))+(((-1.0)*sj2*x2759))+((r21*x2771))+(((-1.0)*r20*x2751*x2762)));
evalcond[1]=(x2757+((r01*x2771))+(((-1.0)*x2758*x2759))+(((-1.0)*x2755*x2770))+((r02*x2752)));
evalcond[2]=((((-1.0)*r10*x2751*x2762))+((r11*x2771))+((r12*x2752))+(((-1.0)*cj2*sj1*x2759))+(((-1.0)*cj1*cj3)));
evalcond[3]=(((gconst13*x2756))+cj2+(((-1.0)*r22*x2751*x2766))+(((-1.0)*r20*x2762*x2773))+((gconst14*x2753))+((x2763*x2769)));
evalcond[4]=(((x2754*x2769))+((gconst14*x2761))+((cj4*x2765))+(((-1.0)*x2752*x2755*x2766))+(((-1.0)*r02*x2751*x2766))+(((-1.0)*cj1*x2760)));
evalcond[5]=((((-1.0)*r12*x2751*x2766))+((gconst14*x2764))+((cj4*x2767))+(((-1.0)*r10*x2762*x2773))+((x2768*x2769))+(((-1.0)*sj1*x2760)));
evalcond[6]=((((-1.0)*x2762*x2763))+(((-1.0)*x2752*x2756*x2762))+(((-1.0)*gconst13*r20*x2766))+((x2753*x2769))+(((-1.0)*cj4*r22*x2770))+((cj3*sj2)));
evalcond[7]=((((-1.0)*cj4*r02*x2770))+(((-1.0)*cj4*x2755*x2772))+((x2761*x2769))+((sj1*sj3))+((cj3*x2758))+(((-1.0)*x2754*x2762))+(((-1.0)*x2765*x2766)));
evalcond[8]=((((-1.0)*cj4*r10*x2752*x2762))+(((-1.0)*x2762*x2768))+((cj2*x2757))+(((-1.0)*cj4*r12*x2770))+(((-1.0)*cj1*x2759))+((x2764*x2769))+(((-1.0)*x2766*x2767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2775 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2775)==0){
continue;
}
IkReal x2774=pow(x2775,-0.5);
CheckValue<IkReal> x2776 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2776.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x2776.value))));
IkReal gconst16=((1.0)*r11*x2774);
IkReal gconst17=((-1.0)*r10*x2774);
CheckValue<IkReal> x2777 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2777.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2777.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
CheckValue<IkReal> x2780 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2780.valid){
continue;
}
IkReal x2778=((1.0)*(x2780.value));
IkReal x2779=x2774;
sj6=gconst16;
cj6=gconst17;
j6=((3.14159265)+(((-1.0)*x2778)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x2778)));
IkReal gconst16=((1.0)*r11*x2779);
IkReal gconst17=((-1.0)*r10*x2779);
j5eval[0]=0;
j5eval[1]=0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2781=(sj2*sj3);
IkReal x2782=((1.0)*gconst16);
IkReal x2783=(gconst16*r21);
IkReal x2784=(cj1*cj3);
IkReal x2785=((1.0)*r22);
IkReal x2786=((1.0)*gconst17);
IkReal x2787=(cj2*sj1*sj3);
CheckValue<IkReal> x2788 = IKatan2WithCheck(IkReal(((((-1.0)*x2784*x2785))+((r12*x2781))+(((-1.0)*x2785*x2787)))),IkReal(((((-1.0)*r11*x2781*x2782))+(((-1.0)*r20*x2786*x2787))+((x2783*x2787))+((x2783*x2784))+(((-1.0)*r20*x2784*x2786))+((gconst17*r10*x2781)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2788.valid){
continue;
}
CheckValue<IkReal> x2789=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2786))+(((-1.0)*r00*x2782)))),-1);
if(!x2789.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2788.value)+(((1.5707963267949)*(x2789.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x2790=IKsin(j5);
IkReal x2791=IKcos(j5);
IkReal x2792=((1.0)*cj4);
IkReal x2793=(cj3*sj1);
IkReal x2794=(cj4*gconst16);
IkReal x2795=(cj1*cj2);
IkReal x2796=((1.0)*sj3);
IkReal x2797=((1.0)*sj4);
IkReal x2798=((1.0)*sj2);
IkReal x2799=(gconst17*r21);
IkReal x2800=(gconst17*r01);
IkReal x2801=(gconst17*r11);
IkReal x2802=(gconst16*sj4);
IkReal x2803=(gconst17*x2791);
IkReal x2804=(r22*x2790);
IkReal x2805=((1.0)*x2790);
IkReal x2806=(gconst16*x2790);
IkReal x2807=(r01*x2791);
IkReal x2808=(r11*x2791);
IkReal x2809=(r21*x2791);
evalcond[0]=((((-1.0)*sj2*x2796))+((r22*x2791))+((r21*x2806))+(((-1.0)*gconst17*r20*x2805)));
evalcond[1]=(x2793+(((-1.0)*x2795*x2796))+((r02*x2791))+(((-1.0)*gconst17*r00*x2805))+((r01*x2806)));
evalcond[2]=((((-1.0)*cj1*cj3))+((r12*x2791))+(((-1.0)*gconst17*r10*x2805))+((r11*x2806))+(((-1.0)*cj2*sj1*x2796)));
evalcond[3]=(cj2+((x2802*x2809))+(((-1.0)*x2797*x2804))+(((-1.0)*r20*x2797*x2803))+((cj4*x2799))+((r20*x2794)));
evalcond[4]=(((cj4*x2800))+((r00*x2794))+((x2802*x2807))+(((-1.0)*r02*x2790*x2797))+(((-1.0)*r00*x2797*x2803))+(((-1.0)*cj1*x2798)));
evalcond[5]=(((cj4*x2801))+(((-1.0)*sj1*x2798))+(((-1.0)*r12*x2790*x2797))+(((-1.0)*r10*x2797*x2803))+((x2802*x2808))+((r10*x2794)));
evalcond[6]=((((-1.0)*x2797*x2799))+(((-1.0)*gconst16*r20*x2797))+(((-1.0)*x2792*x2804))+(((-1.0)*r20*x2792*x2803))+((x2794*x2809))+((cj3*sj2)));
evalcond[7]=(((cj3*x2795))+((sj1*sj3))+(((-1.0)*r00*x2792*x2803))+(((-1.0)*x2797*x2800))+(((-1.0)*gconst16*r00*x2797))+(((-1.0)*r02*x2790*x2792))+((x2794*x2807)));
evalcond[8]=(((cj2*x2793))+(((-1.0)*r12*x2790*x2792))+(((-1.0)*x2797*x2801))+((x2794*x2808))+(((-1.0)*gconst16*r10*x2797))+(((-1.0)*cj1*x2796))+(((-1.0)*r10*x2792*x2803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2810=(cj3*sj1);
IkReal x2811=(gconst17*r20);
IkReal x2812=(gconst16*r21);
IkReal x2813=(sj2*sj3);
IkReal x2814=((1.0)*cj1*cj2*sj3);
CheckValue<IkReal> x2815 = IKatan2WithCheck(IkReal((((r22*x2810))+(((-1.0)*r22*x2814))+((r02*x2813)))),IkReal((((x2810*x2811))+(((-1.0)*gconst16*r01*x2813))+((gconst17*r00*x2813))+(((-1.0)*x2810*x2812))+(((-1.0)*x2811*x2814))+((cj1*cj2*sj3*x2812)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2815.valid){
continue;
}
CheckValue<IkReal> x2816=IKPowWithIntegerCheck(IKsign((((gconst17*r11))+((gconst16*r10)))),-1);
if(!x2816.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2815.value)+(((1.5707963267949)*(x2816.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x2817=IKsin(j5);
IkReal x2818=IKcos(j5);
IkReal x2819=((1.0)*cj4);
IkReal x2820=(cj3*sj1);
IkReal x2821=(cj4*gconst16);
IkReal x2822=(cj1*cj2);
IkReal x2823=((1.0)*sj3);
IkReal x2824=((1.0)*sj4);
IkReal x2825=((1.0)*sj2);
IkReal x2826=(gconst17*r21);
IkReal x2827=(gconst17*r01);
IkReal x2828=(gconst17*r11);
IkReal x2829=(gconst16*sj4);
IkReal x2830=(gconst17*x2818);
IkReal x2831=(r22*x2817);
IkReal x2832=((1.0)*x2817);
IkReal x2833=(gconst16*x2817);
IkReal x2834=(r01*x2818);
IkReal x2835=(r11*x2818);
IkReal x2836=(r21*x2818);
evalcond[0]=((((-1.0)*gconst17*r20*x2832))+((r22*x2818))+(((-1.0)*sj2*x2823))+((r21*x2833)));
evalcond[1]=((((-1.0)*x2822*x2823))+((r02*x2818))+(((-1.0)*gconst17*r00*x2832))+x2820+((r01*x2833)));
evalcond[2]=((((-1.0)*cj2*sj1*x2823))+(((-1.0)*cj1*cj3))+((r12*x2818))+(((-1.0)*gconst17*r10*x2832))+((r11*x2833)));
evalcond[3]=(((x2829*x2836))+((r20*x2821))+cj2+(((-1.0)*r20*x2824*x2830))+((cj4*x2826))+(((-1.0)*x2824*x2831)));
evalcond[4]=(((x2829*x2834))+(((-1.0)*cj1*x2825))+(((-1.0)*r02*x2817*x2824))+((r00*x2821))+(((-1.0)*r00*x2824*x2830))+((cj4*x2827)));
evalcond[5]=(((x2829*x2835))+(((-1.0)*r10*x2824*x2830))+((r10*x2821))+(((-1.0)*sj1*x2825))+((cj4*x2828))+(((-1.0)*r12*x2817*x2824)));
evalcond[6]=((((-1.0)*x2824*x2826))+((x2821*x2836))+(((-1.0)*r20*x2819*x2830))+(((-1.0)*gconst16*r20*x2824))+(((-1.0)*x2819*x2831))+((cj3*sj2)));
evalcond[7]=(((cj3*x2822))+(((-1.0)*gconst16*r00*x2824))+(((-1.0)*r00*x2819*x2830))+(((-1.0)*x2824*x2827))+((x2821*x2834))+(((-1.0)*r02*x2817*x2819))+((sj1*sj3)));
evalcond[8]=(((cj2*x2820))+(((-1.0)*cj1*x2823))+(((-1.0)*x2824*x2828))+((x2821*x2835))+(((-1.0)*r12*x2817*x2819))+(((-1.0)*gconst16*r10*x2824))+(((-1.0)*r10*x2819*x2830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
IkReal x2837=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2837);
rxp0_2=(py*r00);
rxp1_0=(r21*x2837);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=((((-1.0)*cj6*r20))+((r21*sj6)));
j5eval[1]=r12;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x2838=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2838);
rxp0_2=(py*r00);
rxp1_0=(r21*x2838);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=r12;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x2839=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2839);
rxp0_2=(py*r00);
rxp1_0=(r21*x2839);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=cj4;
j5eval[1]=r12;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2842=IKPowWithIntegerCheck(r12,-1);
if(!x2842.valid){
continue;
}
IkReal x2840=x2842.value;
IkReal x2841=(cj2*sj1);
CheckValue<IkReal> x2843=IKPowWithIntegerCheck(cj4,-1);
if(!x2843.valid){
continue;
}
if( IKabs((x2840*(x2843.value)*((((cj3*x2841))+(((-1.0)*cj1*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2840*((((sj3*x2841))+((cj1*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2840*(x2843.value)*((((cj3*x2841))+(((-1.0)*cj1*sj3))))))+IKsqr((x2840*((((sj3*x2841))+((cj1*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x2840*(x2843.value)*((((cj3*x2841))+(((-1.0)*cj1*sj3))))), (x2840*((((sj3*x2841))+((cj1*cj3))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x2844=IKsin(j5);
IkReal x2845=IKcos(j5);
IkReal x2846=(cj3*sj1);
IkReal x2847=(r21*sj4);
IkReal x2848=(cj4*cj6);
IkReal x2849=(cj1*cj2);
IkReal x2850=((1.0)*sj3);
IkReal x2851=((1.0)*sj2);
IkReal x2852=((1.0)*sj4);
IkReal x2853=(r20*sj6);
IkReal x2854=((1.0)*cj6);
IkReal x2855=(r00*sj6);
IkReal x2856=(sj6*x2844);
IkReal x2857=(sj6*x2845);
IkReal x2858=((1.0)*x2845);
IkReal x2859=(cj6*x2845);
IkReal x2860=(r12*x2844);
evalcond[0]=((((-1.0)*x2852*x2860))+(((-1.0)*sj1*x2851)));
evalcond[1]=((((-1.0)*cj2*sj1*x2850))+((r12*x2845))+(((-1.0)*cj1*cj3)));
evalcond[2]=((((-1.0)*cj1*x2850))+((cj2*x2846))+(((-1.0)*cj4*x2860)));
evalcond[3]=((((-1.0)*sj2*x2850))+((r21*x2856))+(((-1.0)*r20*x2844*x2854)));
evalcond[4]=((((-1.0)*x2849*x2850))+(((-1.0)*r00*x2844*x2854))+((r01*x2856))+x2846);
evalcond[5]=(((r21*x2848))+cj2+((x2847*x2857))+((cj4*x2853))+(((-1.0)*r20*x2852*x2859)));
evalcond[6]=((((-1.0)*cj1*x2851))+((cj4*x2855))+((r01*x2848))+((r01*sj4*x2857))+(((-1.0)*r00*x2852*x2859)));
evalcond[7]=(((cj4*r21*x2857))+(((-1.0)*x2852*x2853))+(((-1.0)*x2847*x2854))+(((-1.0)*r20*x2848*x2858))+((cj3*sj2)));
evalcond[8]=(((cj3*x2849))+((cj4*r01*x2857))+((sj1*sj3))+(((-1.0)*cj6*r01*x2852))+(((-1.0)*r00*x2848*x2858))+(((-1.0)*x2852*x2855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2862=IKPowWithIntegerCheck(r12,-1);
if(!x2862.valid){
continue;
}
IkReal x2861=x2862.value;
CheckValue<IkReal> x2863=IKPowWithIntegerCheck(sj4,-1);
if(!x2863.valid){
continue;
}
if( IKabs(((-1.0)*sj1*sj2*x2861*(x2863.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2861*((((cj1*cj3))+((cj2*sj1*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj1*sj2*x2861*(x2863.value)))+IKsqr((x2861*((((cj1*cj3))+((cj2*sj1*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*sj1*sj2*x2861*(x2863.value)), (x2861*((((cj1*cj3))+((cj2*sj1*sj3))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x2864=IKsin(j5);
IkReal x2865=IKcos(j5);
IkReal x2866=(cj3*sj1);
IkReal x2867=(r21*sj4);
IkReal x2868=(cj4*cj6);
IkReal x2869=(cj1*cj2);
IkReal x2870=((1.0)*sj3);
IkReal x2871=((1.0)*sj2);
IkReal x2872=((1.0)*sj4);
IkReal x2873=(r20*sj6);
IkReal x2874=((1.0)*cj6);
IkReal x2875=(r00*sj6);
IkReal x2876=(sj6*x2864);
IkReal x2877=(sj6*x2865);
IkReal x2878=((1.0)*x2865);
IkReal x2879=(cj6*x2865);
IkReal x2880=(r12*x2864);
evalcond[0]=((((-1.0)*sj1*x2871))+(((-1.0)*x2872*x2880)));
evalcond[1]=((((-1.0)*cj1*cj3))+((r12*x2865))+(((-1.0)*cj2*sj1*x2870)));
evalcond[2]=((((-1.0)*cj1*x2870))+((cj2*x2866))+(((-1.0)*cj4*x2880)));
evalcond[3]=((((-1.0)*r20*x2864*x2874))+(((-1.0)*sj2*x2870))+((r21*x2876)));
evalcond[4]=(((r01*x2876))+(((-1.0)*x2869*x2870))+(((-1.0)*r00*x2864*x2874))+x2866);
evalcond[5]=(((cj4*x2873))+cj2+((r21*x2868))+(((-1.0)*r20*x2872*x2879))+((x2867*x2877)));
evalcond[6]=(((cj4*x2875))+((r01*sj4*x2877))+(((-1.0)*r00*x2872*x2879))+(((-1.0)*cj1*x2871))+((r01*x2868)));
evalcond[7]=(((cj4*r21*x2877))+(((-1.0)*r20*x2868*x2878))+(((-1.0)*x2872*x2873))+(((-1.0)*x2867*x2874))+((cj3*sj2)));
evalcond[8]=(((sj1*sj3))+(((-1.0)*x2872*x2875))+((cj4*r01*x2877))+((cj3*x2869))+(((-1.0)*cj6*r01*x2872))+(((-1.0)*r00*x2868*x2878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2881=IKPowWithIntegerCheck(((((-1.0)*cj6*r20))+((r21*sj6))),-1);
if(!x2881.valid){
continue;
}
CheckValue<IkReal> x2882=IKPowWithIntegerCheck(r12,-1);
if(!x2882.valid){
continue;
}
if( IKabs((sj2*sj3*(x2881.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2882.value)*((((cj1*cj3))+((cj2*sj1*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj2*sj3*(x2881.value)))+IKsqr(((x2882.value)*((((cj1*cj3))+((cj2*sj1*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((sj2*sj3*(x2881.value)), ((x2882.value)*((((cj1*cj3))+((cj2*sj1*sj3))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x2883=IKsin(j5);
IkReal x2884=IKcos(j5);
IkReal x2885=(cj3*sj1);
IkReal x2886=(r21*sj4);
IkReal x2887=(cj4*cj6);
IkReal x2888=(cj1*cj2);
IkReal x2889=((1.0)*sj3);
IkReal x2890=((1.0)*sj2);
IkReal x2891=((1.0)*sj4);
IkReal x2892=(r20*sj6);
IkReal x2893=((1.0)*cj6);
IkReal x2894=(r00*sj6);
IkReal x2895=(sj6*x2883);
IkReal x2896=(sj6*x2884);
IkReal x2897=((1.0)*x2884);
IkReal x2898=(cj6*x2884);
IkReal x2899=(r12*x2883);
evalcond[0]=((((-1.0)*x2891*x2899))+(((-1.0)*sj1*x2890)));
evalcond[1]=((((-1.0)*cj1*cj3))+(((-1.0)*cj2*sj1*x2889))+((r12*x2884)));
evalcond[2]=(((cj2*x2885))+(((-1.0)*cj4*x2899))+(((-1.0)*cj1*x2889)));
evalcond[3]=(((r21*x2895))+(((-1.0)*sj2*x2889))+(((-1.0)*r20*x2883*x2893)));
evalcond[4]=((((-1.0)*r00*x2883*x2893))+(((-1.0)*x2888*x2889))+((r01*x2895))+x2885);
evalcond[5]=(cj2+((r21*x2887))+(((-1.0)*r20*x2891*x2898))+((x2886*x2896))+((cj4*x2892)));
evalcond[6]=(((r01*sj4*x2896))+((r01*x2887))+((cj4*x2894))+(((-1.0)*cj1*x2890))+(((-1.0)*r00*x2891*x2898)));
evalcond[7]=((((-1.0)*x2891*x2892))+((cj4*r21*x2896))+(((-1.0)*x2886*x2893))+((cj3*sj2))+(((-1.0)*r20*x2887*x2897)));
evalcond[8]=((((-1.0)*x2891*x2894))+(((-1.0)*r00*x2887*x2897))+((cj3*x2888))+((sj1*sj3))+(((-1.0)*cj6*r01*x2891))+((cj4*r01*x2896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2900=(r11*sj6);
IkReal x2901=((1.0)*sj6);
IkReal x2902=(cj1*cj3);
IkReal x2903=(cj3*sj1);
IkReal x2904=(cj6*r10);
IkReal x2905=(cj6*r00);
IkReal x2906=(cj1*cj2*sj3);
IkReal x2907=(cj2*sj1*sj3);
CheckValue<IkReal> x2908 = IKatan2WithCheck(IkReal((((r02*x2902))+((r02*x2907))+(((-1.0)*r12*x2906))+((r12*x2903)))),IkReal(((((-1.0)*x2904*x2906))+((x2902*x2905))+((x2905*x2907))+((x2900*x2906))+(((-1.0)*x2900*x2903))+((x2903*x2904))+(((-1.0)*r01*x2901*x2902))+(((-1.0)*r01*x2901*x2907)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2908.valid){
continue;
}
CheckValue<IkReal> x2909=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r21))+(((-1.0)*r20*x2901)))),-1);
if(!x2909.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2908.value)+(((1.5707963267949)*(x2909.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x2910=IKsin(j5);
IkReal x2911=IKcos(j5);
IkReal x2912=(cj3*sj1);
IkReal x2913=(sj4*sj6);
IkReal x2914=(cj4*cj6);
IkReal x2915=(cj1*cj2);
IkReal x2916=((1.0)*sj3);
IkReal x2917=((1.0)*r10);
IkReal x2918=((1.0)*sj4);
IkReal x2919=((1.0)*sj2);
IkReal x2920=((1.0)*r20);
IkReal x2921=((1.0)*cj4);
IkReal x2922=(cj4*sj6);
IkReal x2923=((1.0)*r00);
IkReal x2924=(sj6*x2910);
IkReal x2925=(r21*x2911);
IkReal x2926=(r22*x2910);
IkReal x2927=(cj6*x2911);
IkReal x2928=(cj6*x2910);
IkReal x2929=(r12*x2910);
IkReal x2930=(r02*x2910);
IkReal x2931=(x2911*x2922);
evalcond[0]=((((-1.0)*x2920*x2928))+(((-1.0)*sj2*x2916))+((r21*x2924))+((r22*x2911)));
evalcond[1]=((((-1.0)*x2915*x2916))+(((-1.0)*x2923*x2928))+((r01*x2924))+((r02*x2911))+x2912);
evalcond[2]=((((-1.0)*cj2*sj1*x2916))+((r12*x2911))+(((-1.0)*cj1*cj3))+(((-1.0)*x2917*x2928))+((r11*x2924)));
evalcond[3]=(((x2913*x2925))+cj2+(((-1.0)*x2918*x2926))+(((-1.0)*r20*x2918*x2927))+((r20*x2922))+((r21*x2914)));
evalcond[4]=(((r01*x2914))+(((-1.0)*r00*x2918*x2927))+((r01*x2911*x2913))+(((-1.0)*x2918*x2930))+((r00*x2922))+(((-1.0)*cj1*x2919)));
evalcond[5]=(((r11*x2914))+((r10*x2922))+(((-1.0)*sj1*x2919))+(((-1.0)*x2918*x2929))+((r11*x2911*x2913))+(((-1.0)*sj4*x2917*x2927)));
evalcond[6]=((((-1.0)*x2921*x2926))+(((-1.0)*x2911*x2914*x2920))+(((-1.0)*x2913*x2920))+((x2922*x2925))+((cj3*sj2))+(((-1.0)*cj6*r21*x2918)));
evalcond[7]=((((-1.0)*x2921*x2930))+((cj3*x2915))+((r01*x2931))+((sj1*sj3))+(((-1.0)*x2911*x2914*x2923))+(((-1.0)*x2913*x2923))+(((-1.0)*cj6*r01*x2918)));
evalcond[8]=((((-1.0)*x2913*x2917))+((cj2*x2912))+(((-1.0)*x2921*x2929))+(((-1.0)*cj6*r11*x2918))+(((-1.0)*cj1*x2916))+((r11*x2931))+(((-1.0)*x2911*x2914*x2917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2932=(sj3*sj6);
IkReal x2933=(cj2*sj1);
IkReal x2934=(sj2*sj3);
IkReal x2935=((1.0)*cj6);
IkReal x2936=(cj1*cj3);
IkReal x2937=((1.0)*r22);
CheckValue<IkReal> x2938=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6))+(((-1.0)*r01*x2935)))),-1);
if(!x2938.valid){
continue;
}
CheckValue<IkReal> x2939 = IKatan2WithCheck(IkReal(((((-1.0)*x2936*x2937))+(((-1.0)*sj3*x2933*x2937))+((r12*x2934)))),IkReal((((cj6*r10*x2934))+(((-1.0)*r11*sj2*x2932))+(((-1.0)*r20*sj3*x2933*x2935))+((r21*sj6*x2936))+(((-1.0)*r20*x2935*x2936))+((r21*x2932*x2933)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2939.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2938.value)))+(x2939.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x2940=IKsin(j5);
IkReal x2941=IKcos(j5);
IkReal x2942=(cj3*sj1);
IkReal x2943=(sj4*sj6);
IkReal x2944=(cj4*cj6);
IkReal x2945=(cj1*cj2);
IkReal x2946=((1.0)*sj3);
IkReal x2947=((1.0)*r10);
IkReal x2948=((1.0)*sj4);
IkReal x2949=((1.0)*sj2);
IkReal x2950=((1.0)*r20);
IkReal x2951=((1.0)*cj4);
IkReal x2952=(cj4*sj6);
IkReal x2953=((1.0)*r00);
IkReal x2954=(sj6*x2940);
IkReal x2955=(r21*x2941);
IkReal x2956=(r22*x2940);
IkReal x2957=(cj6*x2941);
IkReal x2958=(cj6*x2940);
IkReal x2959=(r12*x2940);
IkReal x2960=(r02*x2940);
IkReal x2961=(x2941*x2952);
evalcond[0]=(((r21*x2954))+((r22*x2941))+(((-1.0)*x2950*x2958))+(((-1.0)*sj2*x2946)));
evalcond[1]=((((-1.0)*x2953*x2958))+((r02*x2941))+((r01*x2954))+(((-1.0)*x2945*x2946))+x2942);
evalcond[2]=((((-1.0)*x2947*x2958))+(((-1.0)*cj1*cj3))+(((-1.0)*cj2*sj1*x2946))+((r12*x2941))+((r11*x2954)));
evalcond[3]=(((r21*x2944))+(((-1.0)*x2948*x2956))+cj2+((x2943*x2955))+(((-1.0)*r20*x2948*x2957))+((r20*x2952)));
evalcond[4]=((((-1.0)*x2948*x2960))+((r00*x2952))+(((-1.0)*r00*x2948*x2957))+((r01*x2941*x2943))+((r01*x2944))+(((-1.0)*cj1*x2949)));
evalcond[5]=((((-1.0)*x2948*x2959))+((r10*x2952))+(((-1.0)*sj4*x2947*x2957))+((r11*x2944))+((r11*x2941*x2943))+(((-1.0)*sj1*x2949)));
evalcond[6]=((((-1.0)*cj6*r21*x2948))+(((-1.0)*x2941*x2944*x2950))+(((-1.0)*x2943*x2950))+((x2952*x2955))+(((-1.0)*x2951*x2956))+((cj3*sj2)));
evalcond[7]=((((-1.0)*x2941*x2944*x2953))+(((-1.0)*x2943*x2953))+(((-1.0)*x2951*x2960))+((sj1*sj3))+(((-1.0)*cj6*r01*x2948))+((r01*x2961))+((cj3*x2945)));
evalcond[8]=((((-1.0)*x2943*x2947))+((r11*x2961))+(((-1.0)*x2941*x2944*x2947))+(((-1.0)*cj1*x2946))+(((-1.0)*x2951*x2959))+((cj2*x2942))+(((-1.0)*cj6*r11*x2948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2962=((1.0)*sj3);
IkReal x2963=(cj1*cj2);
IkReal x2964=(cj3*sj1);
IkReal x2965=(r21*sj6);
IkReal x2966=(sj2*sj3);
IkReal x2967=(cj6*r20);
CheckValue<IkReal> x2968 = IKatan2WithCheck(IkReal((((r02*x2966))+((r22*x2964))+(((-1.0)*r22*x2962*x2963)))),IkReal((((sj3*x2963*x2965))+(((-1.0)*x2964*x2965))+(((-1.0)*r01*sj2*sj6*x2962))+((cj6*r00*x2966))+(((-1.0)*x2962*x2963*x2967))+((x2964*x2967)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2968.valid){
continue;
}
CheckValue<IkReal> x2969=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x2969.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2968.value)+(((1.5707963267949)*(x2969.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x2970=IKsin(j5);
IkReal x2971=IKcos(j5);
IkReal x2972=(cj3*sj1);
IkReal x2973=(sj4*sj6);
IkReal x2974=(cj4*cj6);
IkReal x2975=(cj1*cj2);
IkReal x2976=((1.0)*sj3);
IkReal x2977=((1.0)*r10);
IkReal x2978=((1.0)*sj4);
IkReal x2979=((1.0)*sj2);
IkReal x2980=((1.0)*r20);
IkReal x2981=((1.0)*cj4);
IkReal x2982=(cj4*sj6);
IkReal x2983=((1.0)*r00);
IkReal x2984=(sj6*x2970);
IkReal x2985=(r21*x2971);
IkReal x2986=(r22*x2970);
IkReal x2987=(cj6*x2971);
IkReal x2988=(cj6*x2970);
IkReal x2989=(r12*x2970);
IkReal x2990=(r02*x2970);
IkReal x2991=(x2971*x2982);
evalcond[0]=(((r22*x2971))+(((-1.0)*x2980*x2988))+(((-1.0)*sj2*x2976))+((r21*x2984)));
evalcond[1]=((((-1.0)*x2975*x2976))+((r02*x2971))+((r01*x2984))+(((-1.0)*x2983*x2988))+x2972);
evalcond[2]=((((-1.0)*x2977*x2988))+((r11*x2984))+((r12*x2971))+(((-1.0)*cj1*cj3))+(((-1.0)*cj2*sj1*x2976)));
evalcond[3]=((((-1.0)*x2978*x2986))+cj2+(((-1.0)*r20*x2978*x2987))+((r20*x2982))+((x2973*x2985))+((r21*x2974)));
evalcond[4]=(((r01*x2974))+((r00*x2982))+(((-1.0)*x2978*x2990))+((r01*x2971*x2973))+(((-1.0)*cj1*x2979))+(((-1.0)*r00*x2978*x2987)));
evalcond[5]=((((-1.0)*x2978*x2989))+(((-1.0)*sj4*x2977*x2987))+((r11*x2974))+((r11*x2971*x2973))+(((-1.0)*sj1*x2979))+((r10*x2982)));
evalcond[6]=((((-1.0)*cj6*r21*x2978))+(((-1.0)*x2981*x2986))+(((-1.0)*x2971*x2974*x2980))+(((-1.0)*x2973*x2980))+((x2982*x2985))+((cj3*sj2)));
evalcond[7]=(((r01*x2991))+(((-1.0)*x2971*x2974*x2983))+((sj1*sj3))+(((-1.0)*cj6*r01*x2978))+(((-1.0)*x2973*x2983))+((cj3*x2975))+(((-1.0)*x2981*x2990)));
evalcond[8]=((((-1.0)*x2981*x2989))+(((-1.0)*cj1*x2976))+((cj2*x2972))+(((-1.0)*cj6*r11*x2978))+(((-1.0)*x2973*x2977))+((r11*x2991))+(((-1.0)*x2971*x2974*x2977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2992=cj6*cj6;
IkReal x2993=r21*r21;
IkReal x2994=r20*r20;
IkReal x2995=(sj4*sj6);
IkReal x2996=(r22*sj2);
IkReal x2997=(cj4*sj3);
IkReal x2998=(r21*sj6);
IkReal x2999=((1.0)*r22);
IkReal x3000=(r21*sj4);
IkReal x3001=((1.0)*cj6);
IkReal x3002=(cj6*r20);
IkReal x3003=(cj3*sj2);
IkReal x3004=(cj4*x2992);
CheckValue<IkReal> x3005=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj4*x2998*x3002))+(((-1.0)*x2993*x3004))+((x2994*x3004))+((cj4*x2993))+((cj4*(r22*r22))))),-1);
if(!x3005.valid){
continue;
}
CheckValue<IkReal> x3006 = IKatan2WithCheck(IkReal((((cj3*x2996))+(((-1.0)*cj6*x2999*x3000))+((sj2*x2997*x2998))+(((-1.0)*r20*x2995*x2999))+(((-1.0)*r20*sj2*x2997*x3001)))),IkReal((((x2996*x2997))+(((-1.0)*x2998*x3003))+(((-1.0)*x2994*x2995*x3001))+((cj6*x2993*x2995))+((r20*x3000))+((x3002*x3003))+(((-2.0)*r20*x2992*x3000)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3006.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3005.value)))+(x3006.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x3007=IKsin(j5);
IkReal x3008=IKcos(j5);
IkReal x3009=((1.0)*cj4);
IkReal x3010=(r21*sj6);
IkReal x3011=(cj6*r20);
IkReal x3012=(cj6*r21);
IkReal x3013=((1.0)*sj4);
IkReal x3014=(r20*sj6);
IkReal x3015=(r22*x3007);
IkReal x3016=(sj4*x3008);
evalcond[0]=(((r22*x3008))+(((-1.0)*sj2*sj3))+((x3007*x3010))+(((-1.0)*x3007*x3011)));
evalcond[1]=(((x3010*x3016))+cj2+((cj4*x3014))+((cj4*x3012))+(((-1.0)*x3008*x3011*x3013))+(((-1.0)*x3013*x3015)));
evalcond[2]=((((-1.0)*x3008*x3009*x3011))+((cj4*x3008*x3010))+(((-1.0)*x3012*x3013))+((cj3*sj2))+(((-1.0)*x3009*x3015))+(((-1.0)*x3013*x3014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
IkReal x3017=cj2*cj2;
IkReal x3018=cj3*cj3;
IkReal x3019=((((-1.0)*x3017*x3018))+x3018+x3017);
j1eval[0]=x3019;
j1eval[1]=IKsign(x3019);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j1eval[0]=cj3;
j1eval[1]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
j1eval[0]=sj2;
j1eval[1]=cj2;
j1eval[2]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3020=((1.0)*cj3);
IkReal x3021=(cj5*r02);
IkReal x3022=(sj3*sj5);
IkReal x3023=(cj6*r00);
IkReal x3024=(cj5*r12);
IkReal x3025=(r11*sj6);
IkReal x3026=(cj3*sj5);
IkReal x3027=(cj6*r10);
IkReal x3028=(r01*sj5*sj6);
if( IKabs((((sj3*x3024))+(((-1.0)*x3022*x3027))+(((-1.0)*x3020*x3021))+(((-1.0)*x3020*x3028))+((x3023*x3026))+((x3022*x3025)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x3020*x3027))+((sj3*x3021))+((r01*sj6*x3022))+((cj3*x3024))+(((-1.0)*x3022*x3023))+((x3025*x3026)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj3*x3024))+(((-1.0)*x3022*x3027))+(((-1.0)*x3020*x3021))+(((-1.0)*x3020*x3028))+((x3023*x3026))+((x3022*x3025))))+IKsqr(((((-1.0)*sj5*x3020*x3027))+((sj3*x3021))+((r01*sj6*x3022))+((cj3*x3024))+(((-1.0)*x3022*x3023))+((x3025*x3026))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((sj3*x3024))+(((-1.0)*x3022*x3027))+(((-1.0)*x3020*x3021))+(((-1.0)*x3020*x3028))+((x3023*x3026))+((x3022*x3025))), ((((-1.0)*sj5*x3020*x3027))+((sj3*x3021))+((r01*sj6*x3022))+((cj3*x3024))+(((-1.0)*x3022*x3023))+((x3025*x3026))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3029=IKcos(j1);
IkReal x3030=IKsin(j1);
IkReal x3031=((1.0)*r10);
IkReal x3032=(cj6*sj5);
IkReal x3033=(sj4*sj6);
IkReal x3034=(r01*sj6);
IkReal x3035=((1.0)*cj6);
IkReal x3036=(r11*sj6);
IkReal x3037=((0.088)*cj6);
IkReal x3038=(cj4*cj5);
IkReal x3039=((1.0)*r00);
IkReal x3040=(cj3*x3030);
IkReal x3041=(cj3*x3029);
IkReal x3042=(sj3*x3030);
IkReal x3043=(sj3*x3029);
IkReal x3044=((1.0)*cj4*sj5);
IkReal x3045=((1.0)*x3043);
evalcond[0]=(x3040+(((-1.0)*x3045))+(((-1.0)*x3032*x3039))+((sj5*x3034))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+(((-1.0)*x3041))+(((-1.0)*x3042))+((sj5*x3036))+(((-1.0)*x3031*x3032)));
evalcond[2]=(x3041+x3042+((x3034*x3038))+(((-1.0)*x3033*x3039))+(((-1.0)*r01*sj4*x3035))+(((-1.0)*r00*x3035*x3038))+(((-1.0)*r02*x3044)));
evalcond[3]=(x3040+(((-1.0)*r12*x3044))+((x3036*x3038))+(((-1.0)*r11*sj4*x3035))+(((-1.0)*x3045))+(((-1.0)*cj6*x3031*x3038))+(((-1.0)*x3031*x3033)));
evalcond[4]=((((-0.088)*x3034))+(((0.316)*x3030))+(((-0.384)*x3043))+(((-1.0)*px))+((r00*x3037))+(((0.384)*x3040))+(((-0.0825)*x3042))+(((-0.0825)*x3041))+(((0.0825)*x3029)));
evalcond[5]=((((-0.088)*x3036))+(((-0.316)*x3029))+(((0.0825)*x3043))+(((-0.384)*x3041))+(((-0.384)*x3042))+(((-1.0)*py))+(((-0.0825)*x3040))+((r10*x3037))+(((0.0825)*x3030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3046=(cj5*r12);
IkReal x3047=(cj3*sj5);
IkReal x3048=(cj6*r10);
IkReal x3049=(cj6*r00);
IkReal x3050=(sj3*sj5);
IkReal x3051=((1.0)*cj5*r02);
IkReal x3052=((1.0)*sj5*sj6);
if( IKabs((((x3048*x3050))+(((-1.0)*sj3*x3046))+(((-1.0)*r01*sj6*x3047))+(((-1.0)*cj3*x3051))+((x3047*x3049))+(((-1.0)*r11*sj6*x3050)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x3051))+((r11*sj6*x3047))+(((-1.0)*x3047*x3048))+((cj3*x3046))+(((-1.0)*r01*sj6*x3050))+((x3049*x3050)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x3048*x3050))+(((-1.0)*sj3*x3046))+(((-1.0)*r01*sj6*x3047))+(((-1.0)*cj3*x3051))+((x3047*x3049))+(((-1.0)*r11*sj6*x3050))))+IKsqr(((((-1.0)*sj3*x3051))+((r11*sj6*x3047))+(((-1.0)*x3047*x3048))+((cj3*x3046))+(((-1.0)*r01*sj6*x3050))+((x3049*x3050))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x3048*x3050))+(((-1.0)*sj3*x3046))+(((-1.0)*r01*sj6*x3047))+(((-1.0)*cj3*x3051))+((x3047*x3049))+(((-1.0)*r11*sj6*x3050))), ((((-1.0)*sj3*x3051))+((r11*sj6*x3047))+(((-1.0)*x3047*x3048))+((cj3*x3046))+(((-1.0)*r01*sj6*x3050))+((x3049*x3050))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3053=IKsin(j1);
IkReal x3054=IKcos(j1);
IkReal x3055=((1.0)*r10);
IkReal x3056=(cj6*sj5);
IkReal x3057=(sj4*sj6);
IkReal x3058=(r01*sj6);
IkReal x3059=((1.0)*cj6);
IkReal x3060=(r11*sj6);
IkReal x3061=((0.088)*cj6);
IkReal x3062=(cj4*cj5);
IkReal x3063=((1.0)*r00);
IkReal x3064=(sj3*x3053);
IkReal x3065=(cj3*x3053);
IkReal x3066=(cj3*x3054);
IkReal x3067=(sj3*x3054);
IkReal x3068=((1.0)*cj4*sj5);
IkReal x3069=((1.0)*x3066);
evalcond[0]=(x3067+x3065+((sj5*x3058))+(((-1.0)*x3056*x3063))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+(((-1.0)*x3055*x3056))+x3064+(((-1.0)*x3069))+((sj5*x3060)));
evalcond[2]=(x3064+((x3058*x3062))+(((-1.0)*x3069))+(((-1.0)*r02*x3068))+(((-1.0)*r01*sj4*x3059))+(((-1.0)*r00*x3059*x3062))+(((-1.0)*x3057*x3063)));
evalcond[3]=((((-1.0)*cj6*x3055*x3062))+(((-1.0)*x3065))+(((-1.0)*x3067))+(((-1.0)*x3055*x3057))+(((-1.0)*r11*sj4*x3059))+(((-1.0)*r12*x3068))+((x3060*x3062)));
evalcond[4]=((((-0.0825)*x3054))+((r00*x3061))+(((-0.088)*x3058))+(((0.0825)*x3066))+(((0.384)*x3065))+(((0.384)*x3067))+(((-1.0)*px))+(((-0.0825)*x3064))+(((0.316)*x3053)));
evalcond[5]=((((-0.0825)*x3053))+(((-0.316)*x3054))+(((0.0825)*x3067))+(((0.0825)*x3065))+(((-0.384)*x3066))+(((-0.088)*x3060))+(((0.384)*x3064))+(((-1.0)*py))+((r10*x3061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x3070=((1.0)*sj5);
j1eval[0]=cj3;
j1eval[1]=IKsign(cj3);
j1eval[2]=((IKabs(((((-1.0)*r01*sj6*x3070))+((cj6*r00*sj5))+(((-1.0)*cj5*r02)))))+(IKabs((((cj5*r12))+(((-1.0)*cj6*r10*x3070))+((r11*sj5*sj6))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j1eval[0]=cj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j1eval[0]=((3.83030303030303)+(((-1.0)*sj3))+(((4.65454545454545)*cj3)));
j1eval[1]=cj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3071=IKPowWithIntegerCheck(((0.316)+(((-0.0825)*sj3))+(((0.384)*cj3))),-1);
if(!x3071.valid){
continue;
}
CheckValue<IkReal> x3072=IKPowWithIntegerCheck(cj3,-1);
if(!x3072.valid){
continue;
}
if( IKabs(((x3071.value)*(((((-0.088)*cj6*r00))+px+(((0.088)*r01*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3072.value)*((((cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3071.value)*(((((-0.088)*cj6*r00))+px+(((0.088)*r01*sj6))))))+IKsqr(((x3072.value)*((((cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3071.value)*(((((-0.088)*cj6*r00))+px+(((0.088)*r01*sj6))))), ((x3072.value)*((((cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3073=IKsin(j1);
IkReal x3074=IKcos(j1);
IkReal x3075=(cj4*r11);
IkReal x3076=((0.088)*sj6);
IkReal x3077=((1.0)*r10);
IkReal x3078=(cj6*sj5);
IkReal x3079=(sj4*sj6);
IkReal x3080=((0.384)*cj3);
IkReal x3081=(cj5*sj6);
IkReal x3082=((1.0)*sj4);
IkReal x3083=(cj6*r01);
IkReal x3084=(sj5*sj6);
IkReal x3085=(r12*sj5);
IkReal x3086=((0.088)*cj6);
IkReal x3087=(r02*sj5);
IkReal x3088=((1.0)*r00);
IkReal x3089=(cj4*sj6);
IkReal x3090=((1.0)*cj4);
IkReal x3091=(cj5*cj6);
IkReal x3092=(sj3*x3073);
IkReal x3093=(cj4*x3091);
IkReal x3094=((1.0)*x3074);
evalcond[0]=((((-1.0)*x3078*x3088))+((cj3*x3073))+((r01*x3084))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+((r11*x3084))+(((-1.0)*cj3*x3094))+(((-1.0)*x3077*x3078)));
evalcond[2]=(((x3073*x3080))+(((-1.0)*r01*x3076))+(((0.316)*x3073))+(((-0.0825)*x3092))+(((-1.0)*px))+((r00*x3086)));
evalcond[3]=((((0.0825)*sj3*x3074))+(((-1.0)*r11*x3076))+(((-0.316)*x3074))+(((-1.0)*py))+(((-1.0)*x3074*x3080))+((r10*x3086)));
evalcond[4]=(((cj5*r01*x3079))+(((-1.0)*x3094))+(((-1.0)*x3082*x3087))+((r00*x3089))+((cj4*x3083))+(((-1.0)*r00*x3082*x3091)));
evalcond[5]=((((-1.0)*x3073))+(((-1.0)*x3082*x3085))+((cj6*x3075))+((cj5*r11*x3079))+(((-1.0)*sj4*x3077*x3091))+((r10*x3089)));
evalcond[6]=((((-1.0)*x3079*x3088))+x3092+(((-1.0)*x3082*x3083))+(((-1.0)*x3088*x3093))+(((-1.0)*x3087*x3090))+((cj4*r01*x3081)));
evalcond[7]=((((-1.0)*x3085*x3090))+(((-1.0)*cj6*r11*x3082))+(((-1.0)*sj3*x3094))+((x3075*x3081))+(((-1.0)*x3077*x3093))+(((-1.0)*x3077*x3079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3095=(r01*sj6);
IkReal x3096=((1.0)*sj5);
IkReal x3097=(cj5*sj4);
IkReal x3098=(cj6*r00);
CheckValue<IkReal> x3099=IKPowWithIntegerCheck(cj3,-1);
if(!x3099.valid){
continue;
}
if( IKabs(((x3099.value)*((((sj5*x3098))+(((-1.0)*x3095*x3096))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*r00*sj6))+(((-1.0)*r02*sj4*x3096))+((cj4*cj6*r01))+(((-1.0)*x3097*x3098))+((x3095*x3097)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3099.value)*((((sj5*x3098))+(((-1.0)*x3095*x3096))+(((-1.0)*cj5*r02))))))+IKsqr((((cj4*r00*sj6))+(((-1.0)*r02*sj4*x3096))+((cj4*cj6*r01))+(((-1.0)*x3097*x3098))+((x3095*x3097))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3099.value)*((((sj5*x3098))+(((-1.0)*x3095*x3096))+(((-1.0)*cj5*r02))))), (((cj4*r00*sj6))+(((-1.0)*r02*sj4*x3096))+((cj4*cj6*r01))+(((-1.0)*x3097*x3098))+((x3095*x3097))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3100=IKsin(j1);
IkReal x3101=IKcos(j1);
IkReal x3102=(cj4*r11);
IkReal x3103=((0.088)*sj6);
IkReal x3104=((1.0)*r10);
IkReal x3105=(cj6*sj5);
IkReal x3106=(sj4*sj6);
IkReal x3107=((0.384)*cj3);
IkReal x3108=(cj5*sj6);
IkReal x3109=((1.0)*sj4);
IkReal x3110=(cj6*r01);
IkReal x3111=(sj5*sj6);
IkReal x3112=(r12*sj5);
IkReal x3113=((0.088)*cj6);
IkReal x3114=(r02*sj5);
IkReal x3115=((1.0)*r00);
IkReal x3116=(cj4*sj6);
IkReal x3117=((1.0)*cj4);
IkReal x3118=(cj5*cj6);
IkReal x3119=(sj3*x3100);
IkReal x3120=(cj4*x3118);
IkReal x3121=((1.0)*x3101);
evalcond[0]=(((cj3*x3100))+(((-1.0)*x3105*x3115))+((r01*x3111))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+(((-1.0)*cj3*x3121))+(((-1.0)*x3104*x3105))+((r11*x3111)));
evalcond[2]=((((-1.0)*r01*x3103))+(((0.316)*x3100))+(((-1.0)*px))+(((-0.0825)*x3119))+((r00*x3113))+((x3100*x3107)));
evalcond[3]=((((-1.0)*r11*x3103))+((r10*x3113))+(((-1.0)*py))+(((-0.316)*x3101))+(((0.0825)*sj3*x3101))+(((-1.0)*x3101*x3107)));
evalcond[4]=((((-1.0)*r00*x3109*x3118))+(((-1.0)*x3109*x3114))+((cj5*r01*x3106))+(((-1.0)*x3121))+((r00*x3116))+((cj4*x3110)));
evalcond[5]=((((-1.0)*sj4*x3104*x3118))+((cj6*x3102))+(((-1.0)*x3100))+((cj5*r11*x3106))+(((-1.0)*x3109*x3112))+((r10*x3116)));
evalcond[6]=(x3119+(((-1.0)*x3114*x3117))+(((-1.0)*x3109*x3110))+(((-1.0)*x3115*x3120))+((cj4*r01*x3108))+(((-1.0)*x3106*x3115)));
evalcond[7]=((((-1.0)*sj3*x3121))+(((-1.0)*x3104*x3120))+((x3102*x3108))+(((-1.0)*x3104*x3106))+(((-1.0)*x3112*x3117))+(((-1.0)*cj6*r11*x3109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3122=((1.0)*sj5);
CheckValue<IkReal> x3123=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x3123.valid){
continue;
}
CheckValue<IkReal> x3124 = IKatan2WithCheck(IkReal((((cj6*r00*sj5))+(((-1.0)*r01*sj6*x3122))+(((-1.0)*cj5*r02)))),IkReal((((cj5*r12))+(((-1.0)*cj6*r10*x3122))+((r11*sj5*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3124.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3123.value)))+(x3124.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3125=IKsin(j1);
IkReal x3126=IKcos(j1);
IkReal x3127=(cj4*r11);
IkReal x3128=((0.088)*sj6);
IkReal x3129=((1.0)*r10);
IkReal x3130=(cj6*sj5);
IkReal x3131=(sj4*sj6);
IkReal x3132=((0.384)*cj3);
IkReal x3133=(cj5*sj6);
IkReal x3134=((1.0)*sj4);
IkReal x3135=(cj6*r01);
IkReal x3136=(sj5*sj6);
IkReal x3137=(r12*sj5);
IkReal x3138=((0.088)*cj6);
IkReal x3139=(r02*sj5);
IkReal x3140=((1.0)*r00);
IkReal x3141=(cj4*sj6);
IkReal x3142=((1.0)*cj4);
IkReal x3143=(cj5*cj6);
IkReal x3144=(sj3*x3125);
IkReal x3145=(cj4*x3143);
IkReal x3146=((1.0)*x3126);
evalcond[0]=(((r01*x3136))+((cj3*x3125))+(((-1.0)*x3130*x3140))+((cj5*r02)));
evalcond[1]=((((-1.0)*cj3*x3146))+((cj5*r12))+((r11*x3136))+(((-1.0)*x3129*x3130)));
evalcond[2]=(((r00*x3138))+(((0.316)*x3125))+(((-0.0825)*x3144))+((x3125*x3132))+(((-1.0)*px))+(((-1.0)*r01*x3128)));
evalcond[3]=((((-1.0)*py))+(((-0.316)*x3126))+(((0.0825)*sj3*x3126))+((r10*x3138))+(((-1.0)*r11*x3128))+(((-1.0)*x3126*x3132)));
evalcond[4]=((((-1.0)*x3146))+((cj5*r01*x3131))+((r00*x3141))+(((-1.0)*x3134*x3139))+(((-1.0)*r00*x3134*x3143))+((cj4*x3135)));
evalcond[5]=(((r10*x3141))+(((-1.0)*sj4*x3129*x3143))+((cj6*x3127))+(((-1.0)*x3125))+((cj5*r11*x3131))+(((-1.0)*x3134*x3137)));
evalcond[6]=(x3144+(((-1.0)*x3140*x3145))+((cj4*r01*x3133))+(((-1.0)*x3134*x3135))+(((-1.0)*x3139*x3142))+(((-1.0)*x3131*x3140)));
evalcond[7]=((((-1.0)*cj6*r11*x3134))+(((-1.0)*x3129*x3145))+((x3127*x3133))+(((-1.0)*x3129*x3131))+(((-1.0)*x3137*x3142))+(((-1.0)*sj3*x3146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x3147=((1.0)*sj5);
j1eval[0]=cj3;
j1eval[1]=IKsign(cj3);
j1eval[2]=((IKabs((((cj5*r12))+(((-1.0)*cj6*r10*x3147))+((r11*sj5*sj6)))))+(IKabs((((cj6*r00*sj5))+(((-1.0)*r01*sj6*x3147))+(((-1.0)*cj5*r02))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j1eval[0]=cj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j1eval[0]=((3.83030303030303)+(((-1.0)*sj3))+(((4.65454545454545)*cj3)));
j1eval[1]=cj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3148=IKPowWithIntegerCheck(((0.316)+(((-0.0825)*sj3))+(((0.384)*cj3))),-1);
if(!x3148.valid){
continue;
}
CheckValue<IkReal> x3149=IKPowWithIntegerCheck(cj3,-1);
if(!x3149.valid){
continue;
}
if( IKabs(((x3148.value)*(((((-0.088)*cj6*r00))+px+(((0.088)*r01*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3149.value)*((((cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3148.value)*(((((-0.088)*cj6*r00))+px+(((0.088)*r01*sj6))))))+IKsqr(((x3149.value)*((((cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3148.value)*(((((-0.088)*cj6*r00))+px+(((0.088)*r01*sj6))))), ((x3149.value)*((((cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3150=IKcos(j1);
IkReal x3151=IKsin(j1);
IkReal x3152=(cj4*cj6);
IkReal x3153=((1.0)*r10);
IkReal x3154=((0.384)*cj3);
IkReal x3155=(cj6*sj5);
IkReal x3156=(sj4*sj6);
IkReal x3157=(r01*sj6);
IkReal x3158=(r11*sj6);
IkReal x3159=(cj4*cj5);
IkReal x3160=((1.0)*sj4);
IkReal x3161=(r12*sj5);
IkReal x3162=((0.088)*cj6);
IkReal x3163=(r02*sj5);
IkReal x3164=((1.0)*r00);
IkReal x3165=(cj4*sj6);
IkReal x3166=((1.0)*cj4);
IkReal x3167=(cj5*cj6);
IkReal x3168=(sj3*x3151);
IkReal x3169=(sj3*x3150);
evalcond[0]=(((sj5*x3157))+((cj3*x3151))+(((-1.0)*x3155*x3164))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+(((-1.0)*x3153*x3155))+((sj5*x3158))+(((-1.0)*cj3*x3150)));
evalcond[2]=(x3150+(((-1.0)*x3160*x3163))+(((-1.0)*r00*x3160*x3167))+((cj5*r01*x3156))+((r00*x3165))+((r01*x3152)));
evalcond[3]=(x3151+(((-1.0)*x3160*x3161))+((cj5*r11*x3156))+((r11*x3152))+((r10*x3165))+(((-1.0)*sj4*x3153*x3167)));
evalcond[4]=(((x3151*x3154))+(((-0.0825)*x3168))+(((-0.088)*x3157))+(((-1.0)*px))+((r00*x3162))+(((0.316)*x3151)));
evalcond[5]=((((-0.316)*x3150))+((r10*x3162))+(((-1.0)*x3150*x3154))+(((-0.088)*x3158))+(((-1.0)*py))+(((0.0825)*x3169)));
evalcond[6]=((((-1.0)*cj5*x3152*x3164))+x3168+(((-1.0)*x3163*x3166))+(((-1.0)*cj6*r01*x3160))+(((-1.0)*x3156*x3164))+((x3157*x3159)));
evalcond[7]=((((-1.0)*x3153*x3156))+(((-1.0)*x3161*x3166))+(((-1.0)*x3169))+(((-1.0)*cj6*r11*x3160))+(((-1.0)*cj5*x3152*x3153))+((x3158*x3159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3170=((1.0)*sj6);
IkReal x3171=(cj5*sj4);
IkReal x3172=(cj6*r00);
CheckValue<IkReal> x3173=IKPowWithIntegerCheck(cj3,-1);
if(!x3173.valid){
continue;
}
if( IKabs(((x3173.value)*(((((-1.0)*r01*sj5*x3170))+((sj5*x3172))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*r00*x3170))+(((-1.0)*r01*x3170*x3171))+(((-1.0)*cj4*cj6*r01))+((x3171*x3172))+((r02*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3173.value)*(((((-1.0)*r01*sj5*x3170))+((sj5*x3172))+(((-1.0)*cj5*r02))))))+IKsqr(((((-1.0)*cj4*r00*x3170))+(((-1.0)*r01*x3170*x3171))+(((-1.0)*cj4*cj6*r01))+((x3171*x3172))+((r02*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3173.value)*(((((-1.0)*r01*sj5*x3170))+((sj5*x3172))+(((-1.0)*cj5*r02))))), ((((-1.0)*cj4*r00*x3170))+(((-1.0)*r01*x3170*x3171))+(((-1.0)*cj4*cj6*r01))+((x3171*x3172))+((r02*sj4*sj5))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3174=IKcos(j1);
IkReal x3175=IKsin(j1);
IkReal x3176=(cj4*cj6);
IkReal x3177=((1.0)*r10);
IkReal x3178=((0.384)*cj3);
IkReal x3179=(cj6*sj5);
IkReal x3180=(sj4*sj6);
IkReal x3181=(r01*sj6);
IkReal x3182=(r11*sj6);
IkReal x3183=(cj4*cj5);
IkReal x3184=((1.0)*sj4);
IkReal x3185=(r12*sj5);
IkReal x3186=((0.088)*cj6);
IkReal x3187=(r02*sj5);
IkReal x3188=((1.0)*r00);
IkReal x3189=(cj4*sj6);
IkReal x3190=((1.0)*cj4);
IkReal x3191=(cj5*cj6);
IkReal x3192=(sj3*x3175);
IkReal x3193=(sj3*x3174);
evalcond[0]=((((-1.0)*x3179*x3188))+((cj3*x3175))+((sj5*x3181))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+(((-1.0)*cj3*x3174))+(((-1.0)*x3177*x3179))+((sj5*x3182)));
evalcond[2]=((((-1.0)*x3184*x3187))+x3174+((r00*x3189))+((cj5*r01*x3180))+(((-1.0)*r00*x3184*x3191))+((r01*x3176)));
evalcond[3]=(((cj5*r11*x3180))+((r11*x3176))+(((-1.0)*x3184*x3185))+x3175+(((-1.0)*sj4*x3177*x3191))+((r10*x3189)));
evalcond[4]=((((-0.0825)*x3192))+((r00*x3186))+(((0.316)*x3175))+(((-1.0)*px))+(((-0.088)*x3181))+((x3175*x3178)));
evalcond[5]=((((-1.0)*x3174*x3178))+(((-1.0)*py))+(((-0.088)*x3182))+(((-0.316)*x3174))+(((0.0825)*x3193))+((r10*x3186)));
evalcond[6]=((((-1.0)*cj5*x3176*x3188))+x3192+(((-1.0)*x3180*x3188))+(((-1.0)*x3187*x3190))+(((-1.0)*cj6*r01*x3184))+((x3181*x3183)));
evalcond[7]=((((-1.0)*x3185*x3190))+(((-1.0)*x3177*x3180))+(((-1.0)*cj6*r11*x3184))+((x3182*x3183))+(((-1.0)*cj5*x3176*x3177))+(((-1.0)*x3193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3194=((1.0)*sj5);
CheckValue<IkReal> x3195 = IKatan2WithCheck(IkReal((((cj6*r00*sj5))+(((-1.0)*r01*sj6*x3194))+(((-1.0)*cj5*r02)))),IkReal((((cj5*r12))+(((-1.0)*cj6*r10*x3194))+((r11*sj5*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3195.valid){
continue;
}
CheckValue<IkReal> x3196=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x3196.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3195.value)+(((1.5707963267949)*(x3196.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3197=IKcos(j1);
IkReal x3198=IKsin(j1);
IkReal x3199=(cj4*cj6);
IkReal x3200=((1.0)*r10);
IkReal x3201=((0.384)*cj3);
IkReal x3202=(cj6*sj5);
IkReal x3203=(sj4*sj6);
IkReal x3204=(r01*sj6);
IkReal x3205=(r11*sj6);
IkReal x3206=(cj4*cj5);
IkReal x3207=((1.0)*sj4);
IkReal x3208=(r12*sj5);
IkReal x3209=((0.088)*cj6);
IkReal x3210=(r02*sj5);
IkReal x3211=((1.0)*r00);
IkReal x3212=(cj4*sj6);
IkReal x3213=((1.0)*cj4);
IkReal x3214=(cj5*cj6);
IkReal x3215=(sj3*x3198);
IkReal x3216=(sj3*x3197);
evalcond[0]=((((-1.0)*x3202*x3211))+((sj5*x3204))+((cj3*x3198))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+(((-1.0)*x3200*x3202))+(((-1.0)*cj3*x3197))+((sj5*x3205)));
evalcond[2]=(x3197+(((-1.0)*r00*x3207*x3214))+((r00*x3212))+((r01*x3199))+((cj5*r01*x3203))+(((-1.0)*x3207*x3210)));
evalcond[3]=((((-1.0)*x3207*x3208))+x3198+((r11*x3199))+((cj5*r11*x3203))+(((-1.0)*sj4*x3200*x3214))+((r10*x3212)));
evalcond[4]=((((0.316)*x3198))+((x3198*x3201))+(((-0.0825)*x3215))+((r00*x3209))+(((-1.0)*px))+(((-0.088)*x3204)));
evalcond[5]=((((0.0825)*x3216))+(((-0.316)*x3197))+(((-1.0)*py))+(((-1.0)*x3197*x3201))+(((-0.088)*x3205))+((r10*x3209)));
evalcond[6]=(((x3204*x3206))+(((-1.0)*cj6*r01*x3207))+x3215+(((-1.0)*x3203*x3211))+(((-1.0)*x3210*x3213))+(((-1.0)*cj5*x3199*x3211)));
evalcond[7]=((((-1.0)*cj6*r11*x3207))+(((-1.0)*x3200*x3203))+((x3205*x3206))+(((-1.0)*x3216))+(((-1.0)*x3208*x3213))+(((-1.0)*cj5*x3199*x3200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.125714285714286)*r11*sj6))+(((-1.42857142857143)*py))+(((0.125714285714286)*cj6*r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+(((-1.0)*cj5*r02))))+IKsqr(((((-0.125714285714286)*r11*sj6))+(((-1.42857142857143)*py))+(((0.125714285714286)*cj6*r10))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+(((-1.0)*cj5*r02))), ((((-0.125714285714286)*r11*sj6))+(((-1.42857142857143)*py))+(((0.125714285714286)*cj6*r10))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3217=IKsin(j1);
IkReal x3218=IKcos(j1);
IkReal x3219=(cj4*r11);
IkReal x3220=((1.0)*r10);
IkReal x3221=(cj6*sj5);
IkReal x3222=(sj4*sj6);
IkReal x3223=(r01*sj6);
IkReal x3224=((1.0)*sj4);
IkReal x3225=(cj6*r01);
IkReal x3226=(r11*sj6);
IkReal x3227=(r12*sj5);
IkReal x3228=((0.088)*cj6);
IkReal x3229=(r02*sj5);
IkReal x3230=((1.0)*r00);
IkReal x3231=(cj4*sj6);
IkReal x3232=((1.0)*cj4);
IkReal x3233=(cj5*cj6);
IkReal x3234=((1.0)*x3218);
IkReal x3235=(cj4*x3233);
evalcond[0]=(x3217+(((-1.0)*x3221*x3230))+((sj5*x3223))+((cj5*r02)));
evalcond[1]=((((-1.0)*px))+((r00*x3228))+(((-0.088)*x3223))+(((0.7)*x3217)));
evalcond[2]=(((r10*x3228))+(((-0.7)*x3218))+(((-1.0)*py))+(((-0.088)*x3226)));
evalcond[3]=(((cj5*r12))+(((-1.0)*x3234))+(((-1.0)*x3220*x3221))+((sj5*x3226)));
evalcond[4]=(((cj5*r01*x3222))+(((-1.0)*x3224*x3229))+((r00*x3231))+(((-1.0)*r00*x3224*x3233))+(((-1.0)*sj2*x3234))+((cj4*x3225)));
evalcond[5]=(((cj5*r11*x3222))+(((-1.0)*sj4*x3220*x3233))+((cj6*x3219))+(((-1.0)*x3224*x3227))+(((-1.0)*sj2*x3217))+((r10*x3231)));
evalcond[6]=((((-1.0)*x3229*x3232))+(((-1.0)*x3230*x3235))+(((-1.0)*x3224*x3225))+((cj2*x3218))+((cj4*cj5*x3223))+(((-1.0)*x3222*x3230)));
evalcond[7]=((((-1.0)*x3220*x3235))+(((-1.0)*cj6*r11*x3224))+((cj2*x3217))+(((-1.0)*x3227*x3232))+(((-1.0)*x3220*x3222))+((cj5*sj6*x3219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3236=((1.0)*sj5);
if( IKabs((((r01*sj5*sj6))+(((-1.0)*cj6*r00*x3236))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x3236)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj5*sj6))+(((-1.0)*cj6*r00*x3236))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x3236))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r01*sj5*sj6))+(((-1.0)*cj6*r00*x3236))+((cj5*r02))), ((((-1.0)*cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x3236))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3237=IKcos(j1);
IkReal x3238=IKsin(j1);
IkReal x3239=(cj4*r11);
IkReal x3240=((1.0)*r10);
IkReal x3241=(cj6*sj5);
IkReal x3242=(sj4*sj6);
IkReal x3243=(r01*sj6);
IkReal x3244=((1.0)*sj4);
IkReal x3245=(cj6*r01);
IkReal x3246=(r11*sj6);
IkReal x3247=(r12*sj5);
IkReal x3248=((0.165)*cj2);
IkReal x3249=((0.088)*cj6);
IkReal x3250=(r02*sj5);
IkReal x3251=((1.0)*r00);
IkReal x3252=(cj4*sj6);
IkReal x3253=((1.0)*cj4);
IkReal x3254=(cj5*cj6);
IkReal x3255=((1.0)*x3237);
IkReal x3256=(cj4*x3254);
IkReal x3257=((1.0)*x3238);
evalcond[0]=(((cj5*r12))+((sj5*x3246))+(((-1.0)*x3240*x3241))+x3237);
evalcond[1]=((((-1.0)*x3241*x3251))+((sj5*x3243))+(((-1.0)*x3257))+((cj5*r02)));
evalcond[2]=((((-0.088)*x3243))+((r00*x3249))+(((-0.068)*x3238))+((x3237*x3248))+(((-1.0)*px)));
evalcond[3]=((((-0.088)*x3246))+(((0.068)*x3237))+(((-1.0)*py))+((x3238*x3248))+((r10*x3249)));
evalcond[4]=((((-1.0)*sj2*x3255))+(((-1.0)*x3244*x3250))+((cj4*x3245))+((r00*x3252))+((cj5*r01*x3242))+(((-1.0)*r00*x3244*x3254)));
evalcond[5]=(((r10*x3252))+(((-1.0)*sj2*x3257))+((cj6*x3239))+(((-1.0)*x3244*x3247))+((cj5*r11*x3242))+(((-1.0)*sj4*x3240*x3254)));
evalcond[6]=((((-1.0)*cj2*x3255))+(((-1.0)*x3242*x3251))+((cj4*cj5*x3243))+(((-1.0)*x3244*x3245))+(((-1.0)*x3251*x3256))+(((-1.0)*x3250*x3253)));
evalcond[7]=((((-1.0)*cj2*x3257))+(((-1.0)*x3247*x3253))+(((-1.0)*x3240*x3242))+(((-1.0)*cj6*r11*x3244))+((cj5*sj6*x3239))+(((-1.0)*x3240*x3256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x3258=(sj5*sj6);
IkReal x3259=((1.0)*cj6*sj5);
j1eval[0]=cj2;
j1eval[1]=((IKabs((((r01*x3258))+((cj5*r02))+(((-1.0)*r00*x3259)))))+(IKabs((((cj5*r12))+((r11*x3258))+(((-1.0)*r10*x3259))))));
j1eval[2]=IKsign(cj2);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1eval[0]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3260=(cj5*r02);
IkReal x3261=(cj6*r00);
IkReal x3262=((1.29122055674518)*sj5);
IkReal x3263=(r01*sj6);
CheckValue<IkReal> x3264=IKPowWithIntegerCheck(cj2,-1);
if(!x3264.valid){
continue;
}
if( IKabs(((((-0.376873661670236)*x3261))+(((-1.0)*x3261*x3262))+((x3262*x3263))+(((1.29122055674518)*x3260))+(((4.28265524625268)*px))+(((0.376873661670236)*x3263)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3264.value)*((x3260+((sj5*x3263))+(((-1.0)*sj5*x3261)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.376873661670236)*x3261))+(((-1.0)*x3261*x3262))+((x3262*x3263))+(((1.29122055674518)*x3260))+(((4.28265524625268)*px))+(((0.376873661670236)*x3263))))+IKsqr(((x3264.value)*((x3260+((sj5*x3263))+(((-1.0)*sj5*x3261))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-0.376873661670236)*x3261))+(((-1.0)*x3261*x3262))+((x3262*x3263))+(((1.29122055674518)*x3260))+(((4.28265524625268)*px))+(((0.376873661670236)*x3263))), ((x3264.value)*((x3260+((sj5*x3263))+(((-1.0)*sj5*x3261))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3265=IKsin(j1);
IkReal x3266=IKcos(j1);
IkReal x3267=(cj4*r11);
IkReal x3268=(cj5*sj6);
IkReal x3269=((1.0)*r10);
IkReal x3270=(cj6*sj5);
IkReal x3271=(sj4*sj6);
IkReal x3272=(r01*sj6);
IkReal x3273=((1.0)*sj4);
IkReal x3274=(cj6*r01);
IkReal x3275=(r11*sj6);
IkReal x3276=((0.088)*cj6);
IkReal x3277=(r02*sj5);
IkReal x3278=((1.0)*r00);
IkReal x3279=(r12*sj5);
IkReal x3280=(cj4*sj6);
IkReal x3281=((1.0)*cj4);
IkReal x3282=(cj5*cj6);
IkReal x3283=((1.0)*x3266);
IkReal x3284=(cj2*x3265);
IkReal x3285=(cj4*x3282);
evalcond[0]=(((sj5*x3272))+(((-1.0)*x3270*x3278))+(((-1.0)*cj2*x3283))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+((sj5*x3275))+(((-1.0)*x3269*x3270))+(((-1.0)*x3284)));
evalcond[2]=(((r00*x3276))+(((0.2335)*x3265))+(((-1.0)*px))+(((-0.3015)*cj2*x3266))+(((-0.088)*x3272)));
evalcond[3]=((((-0.3015)*x3284))+(((-1.0)*py))+((r10*x3276))+(((-0.088)*x3275))+(((-0.2335)*x3266)));
evalcond[4]=(((cj4*r01*x3268))+(((-1.0)*x3273*x3274))+x3265+(((-1.0)*x3277*x3281))+(((-1.0)*x3271*x3278))+(((-1.0)*x3278*x3285)));
evalcond[5]=((((-1.0)*sj2*x3283))+(((-1.0)*r00*x3273*x3282))+((r00*x3280))+(((-1.0)*x3273*x3277))+((cj4*x3274))+((r01*sj4*x3268)));
evalcond[6]=((((-1.0)*x3273*x3279))+(((-1.0)*sj2*x3265))+((r10*x3280))+((cj6*x3267))+((r11*sj4*x3268))+(((-1.0)*sj4*x3269*x3282)));
evalcond[7]=((((-1.0)*x3283))+(((-1.0)*x3279*x3281))+((x3267*x3268))+(((-1.0)*x3269*x3285))+(((-1.0)*x3269*x3271))+(((-1.0)*cj6*r11*x3273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3286=(sj5*sj6);
IkReal x3287=((1.0)*cj6*sj5);
CheckValue<IkReal> x3288=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x3288.valid){
continue;
}
CheckValue<IkReal> x3289 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3287))+((cj5*r12))+((r11*x3286)))),IkReal(((((-1.0)*r00*x3287))+((r01*x3286))+((cj5*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3289.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3288.value)))+(x3289.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3290=IKsin(j1);
IkReal x3291=IKcos(j1);
IkReal x3292=(cj4*r11);
IkReal x3293=(cj5*sj6);
IkReal x3294=((1.0)*r10);
IkReal x3295=(cj6*sj5);
IkReal x3296=(sj4*sj6);
IkReal x3297=(r01*sj6);
IkReal x3298=((1.0)*sj4);
IkReal x3299=(cj6*r01);
IkReal x3300=(r11*sj6);
IkReal x3301=((0.088)*cj6);
IkReal x3302=(r02*sj5);
IkReal x3303=((1.0)*r00);
IkReal x3304=(r12*sj5);
IkReal x3305=(cj4*sj6);
IkReal x3306=((1.0)*cj4);
IkReal x3307=(cj5*cj6);
IkReal x3308=((1.0)*x3291);
IkReal x3309=(cj2*x3290);
IkReal x3310=(cj4*x3307);
evalcond[0]=(((sj5*x3297))+(((-1.0)*cj2*x3308))+(((-1.0)*x3295*x3303))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+(((-1.0)*x3309))+((sj5*x3300))+(((-1.0)*x3294*x3295)));
evalcond[2]=((((-0.088)*x3297))+(((-1.0)*px))+(((-0.3015)*cj2*x3291))+((r00*x3301))+(((0.2335)*x3290)));
evalcond[3]=(((r10*x3301))+(((-0.2335)*x3291))+(((-1.0)*py))+(((-0.088)*x3300))+(((-0.3015)*x3309)));
evalcond[4]=(x3290+(((-1.0)*x3298*x3299))+((cj4*r01*x3293))+(((-1.0)*x3302*x3306))+(((-1.0)*x3296*x3303))+(((-1.0)*x3303*x3310)));
evalcond[5]=((((-1.0)*r00*x3298*x3307))+((cj4*x3299))+(((-1.0)*x3298*x3302))+((r01*sj4*x3293))+(((-1.0)*sj2*x3308))+((r00*x3305)));
evalcond[6]=(((cj6*x3292))+(((-1.0)*sj4*x3294*x3307))+((r10*x3305))+(((-1.0)*x3298*x3304))+((r11*sj4*x3293))+(((-1.0)*sj2*x3290)));
evalcond[7]=((((-1.0)*x3304*x3306))+((x3292*x3293))+(((-1.0)*x3294*x3310))+(((-1.0)*x3308))+(((-1.0)*cj6*r11*x3298))+(((-1.0)*x3294*x3296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3311=((1.0)*cj5);
IkReal x3312=(cj6*sj5);
IkReal x3313=((1.0)*sj5*sj6);
j1eval[0]=cj2;
j1eval[1]=((IKabs(((((-1.0)*r02*x3311))+(((-1.0)*r01*x3313))+((r00*x3312)))))+(IKabs((((r10*x3312))+(((-1.0)*r11*x3313))+(((-1.0)*r12*x3311))))));
j1eval[2]=IKsign(cj2);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1eval[0]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3314=(r01*sj6);
IkReal x3315=((1.17063989962359)*sj5);
IkReal x3316=(cj6*r00);
IkReal x3317=(cj5*r02);
CheckValue<IkReal> x3318=IKPowWithIntegerCheck(cj2,-1);
if(!x3318.valid){
continue;
}
if( IKabs(((((-0.220828105395232)*x3316))+(((-1.0)*x3315*x3316))+(((0.220828105395232)*x3314))+((x3314*x3315))+(((2.50941028858218)*px))+(((1.17063989962359)*x3317)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3318.value)*(((((-1.0)*sj5*x3314))+((sj5*x3316))+(((-1.0)*x3317)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.220828105395232)*x3316))+(((-1.0)*x3315*x3316))+(((0.220828105395232)*x3314))+((x3314*x3315))+(((2.50941028858218)*px))+(((1.17063989962359)*x3317))))+IKsqr(((x3318.value)*(((((-1.0)*sj5*x3314))+((sj5*x3316))+(((-1.0)*x3317))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-0.220828105395232)*x3316))+(((-1.0)*x3315*x3316))+(((0.220828105395232)*x3314))+((x3314*x3315))+(((2.50941028858218)*px))+(((1.17063989962359)*x3317))), ((x3318.value)*(((((-1.0)*sj5*x3314))+((sj5*x3316))+(((-1.0)*x3317))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3319=IKcos(j1);
IkReal x3320=IKsin(j1);
IkReal x3321=(cj4*cj6);
IkReal x3322=((1.0)*r10);
IkReal x3323=(cj6*sj5);
IkReal x3324=((1.0)*sj2);
IkReal x3325=(sj4*sj6);
IkReal x3326=(r01*sj6);
IkReal x3327=((0.4665)*cj2);
IkReal x3328=((1.0)*sj4);
IkReal x3329=(r11*sj6);
IkReal x3330=(r12*sj5);
IkReal x3331=(cj5*cj6);
IkReal x3332=((0.088)*cj6);
IkReal x3333=(r02*sj5);
IkReal x3334=((1.0)*r00);
IkReal x3335=(cj4*sj6);
IkReal x3336=(cj4*cj5);
IkReal x3337=((1.0)*cj4);
evalcond[0]=((((-1.0)*x3323*x3334))+((cj2*x3319))+((sj5*x3326))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+((cj2*x3320))+(((-1.0)*x3322*x3323))+((sj5*x3329)));
evalcond[2]=((((0.3985)*x3320))+(((-0.088)*x3326))+(((-1.0)*px))+((r00*x3332))+((x3319*x3327)));
evalcond[3]=((((-0.088)*x3329))+((r10*x3332))+(((-0.3985)*x3319))+(((-1.0)*py))+((x3320*x3327)));
evalcond[4]=((((-1.0)*x3330*x3337))+x3319+((x3329*x3336))+(((-1.0)*x3322*x3325))+(((-1.0)*cj5*x3321*x3322))+(((-1.0)*cj6*r11*x3328)));
evalcond[5]=(((r01*x3321))+(((-1.0)*x3319*x3324))+((cj5*r01*x3325))+((r00*x3335))+(((-1.0)*r00*x3328*x3331))+(((-1.0)*x3328*x3333)));
evalcond[6]=(((r11*x3321))+((r10*x3335))+(((-1.0)*sj4*x3322*x3331))+((cj5*r11*x3325))+(((-1.0)*x3320*x3324))+(((-1.0)*x3328*x3330)));
evalcond[7]=((((-1.0)*x3320))+(((-1.0)*cj6*r01*x3328))+((x3326*x3336))+(((-1.0)*cj5*x3321*x3334))+(((-1.0)*x3325*x3334))+(((-1.0)*x3333*x3337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3338=((1.0)*cj5);
IkReal x3339=(cj6*sj5);
IkReal x3340=((1.0)*sj5*sj6);
CheckValue<IkReal> x3341 = IKatan2WithCheck(IkReal((((r10*x3339))+(((-1.0)*r11*x3340))+(((-1.0)*r12*x3338)))),IkReal(((((-1.0)*r02*x3338))+((r00*x3339))+(((-1.0)*r01*x3340)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3341.valid){
continue;
}
CheckValue<IkReal> x3342=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x3342.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3341.value)+(((1.5707963267949)*(x3342.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3343=IKcos(j1);
IkReal x3344=IKsin(j1);
IkReal x3345=(cj4*cj6);
IkReal x3346=((1.0)*r10);
IkReal x3347=(cj6*sj5);
IkReal x3348=((1.0)*sj2);
IkReal x3349=(sj4*sj6);
IkReal x3350=(r01*sj6);
IkReal x3351=((0.4665)*cj2);
IkReal x3352=((1.0)*sj4);
IkReal x3353=(r11*sj6);
IkReal x3354=(r12*sj5);
IkReal x3355=(cj5*cj6);
IkReal x3356=((0.088)*cj6);
IkReal x3357=(r02*sj5);
IkReal x3358=((1.0)*r00);
IkReal x3359=(cj4*sj6);
IkReal x3360=(cj4*cj5);
IkReal x3361=((1.0)*cj4);
evalcond[0]=((((-1.0)*x3347*x3358))+((cj2*x3343))+((sj5*x3350))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+(((-1.0)*x3346*x3347))+((cj2*x3344))+((sj5*x3353)));
evalcond[2]=(((x3343*x3351))+((r00*x3356))+(((-0.088)*x3350))+(((-1.0)*px))+(((0.3985)*x3344)));
evalcond[3]=((((-0.3985)*x3343))+((x3344*x3351))+(((-0.088)*x3353))+(((-1.0)*py))+((r10*x3356)));
evalcond[4]=(((x3353*x3360))+x3343+(((-1.0)*x3346*x3349))+(((-1.0)*x3354*x3361))+(((-1.0)*cj5*x3345*x3346))+(((-1.0)*cj6*r11*x3352)));
evalcond[5]=((((-1.0)*x3352*x3357))+((cj5*r01*x3349))+(((-1.0)*x3343*x3348))+((r00*x3359))+(((-1.0)*r00*x3352*x3355))+((r01*x3345)));
evalcond[6]=(((cj5*r11*x3349))+(((-1.0)*x3352*x3354))+(((-1.0)*sj4*x3346*x3355))+((r11*x3345))+((r10*x3359))+(((-1.0)*x3344*x3348)));
evalcond[7]=((((-1.0)*x3344))+((x3350*x3360))+(((-1.0)*cj5*x3345*x3358))+(((-1.0)*x3349*x3358))+(((-1.0)*x3357*x3361))+(((-1.0)*cj6*r01*x3352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3371=IKPowWithIntegerCheck(sj2,-1);
if(!x3371.valid){
continue;
}
IkReal x3362=x3371.value;
IkReal x3363=(cj3*r10);
IkReal x3364=((1.0)*cj6);
IkReal x3365=(cj5*sj4);
IkReal x3366=(cj4*sj6);
IkReal x3367=(sj2*sj5);
IkReal x3368=(r11*sj6);
IkReal x3369=(cj4*cj6*r11);
IkReal x3370=((1.0)*r12*sj4*sj5);
CheckValue<IkReal> x3372=IKPowWithIntegerCheck(cj2,-1);
if(!x3372.valid){
continue;
}
CheckValue<IkReal> x3373=IKPowWithIntegerCheck(sj3,-1);
if(!x3373.valid){
continue;
}
if( IKabs((x3362*((((x3365*x3368))+x3369+((r10*x3366))+(((-1.0)*r10*x3364*x3365))+(((-1.0)*x3370)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x3362*(x3372.value)*(x3373.value)*((((x3363*x3366))+((cj3*x3369))+(((-1.0)*cj3*x3370))+((r01*sj6*x3367))+((cj3*x3365*x3368))+((cj5*r02*sj2))+(((-1.0)*r00*x3364*x3367))+(((-1.0)*x3363*x3364*x3365)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3362*((((x3365*x3368))+x3369+((r10*x3366))+(((-1.0)*r10*x3364*x3365))+(((-1.0)*x3370))))))+IKsqr((x3362*(x3372.value)*(x3373.value)*((((x3363*x3366))+((cj3*x3369))+(((-1.0)*cj3*x3370))+((r01*sj6*x3367))+((cj3*x3365*x3368))+((cj5*r02*sj2))+(((-1.0)*r00*x3364*x3367))+(((-1.0)*x3363*x3364*x3365))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x3362*((((x3365*x3368))+x3369+((r10*x3366))+(((-1.0)*r10*x3364*x3365))+(((-1.0)*x3370))))), (x3362*(x3372.value)*(x3373.value)*((((x3363*x3366))+((cj3*x3369))+(((-1.0)*cj3*x3370))+((r01*sj6*x3367))+((cj3*x3365*x3368))+((cj5*r02*sj2))+(((-1.0)*r00*x3364*x3367))+(((-1.0)*x3363*x3364*x3365))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3374=IKsin(j1);
IkReal x3375=IKcos(j1);
IkReal x3376=(cj4*cj6);
IkReal x3377=((1.0)*r10);
IkReal x3378=((0.0825)*sj3);
IkReal x3379=((0.0825)*cj2);
IkReal x3380=((0.088)*sj6);
IkReal x3381=(cj6*sj5);
IkReal x3382=(sj4*sj6);
IkReal x3383=(r11*sj6);
IkReal x3384=(cj4*cj5);
IkReal x3385=((1.0)*sj4);
IkReal x3386=(r12*sj5);
IkReal x3387=((0.088)*cj6);
IkReal x3388=(r02*sj5);
IkReal x3389=((1.0)*r00);
IkReal x3390=(cj4*sj6);
IkReal x3391=(r01*sj6);
IkReal x3392=(cj2*sj3);
IkReal x3393=((1.0)*cj4);
IkReal x3394=(cj5*cj6);
IkReal x3395=(cj3*x3374);
IkReal x3396=(cj3*x3375);
IkReal x3397=((1.0)*x3375);
IkReal x3398=(sj3*x3374);
evalcond[0]=(((sj5*x3391))+(((-1.0)*x3392*x3397))+x3395+(((-1.0)*x3381*x3389))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+(((-1.0)*x3377*x3381))+(((-1.0)*x3396))+(((-1.0)*x3374*x3392))+((sj5*x3383)));
evalcond[2]=((((-1.0)*sj2*x3397))+((r01*x3376))+((r00*x3390))+(((-1.0)*x3385*x3388))+((cj5*r01*x3382))+(((-1.0)*r00*x3385*x3394)));
evalcond[3]=((((-1.0)*sj4*x3377*x3394))+((cj5*r11*x3382))+(((-1.0)*x3385*x3386))+((r10*x3390))+(((-1.0)*sj2*x3374))+((r11*x3376)));
evalcond[4]=((((-1.0)*cj6*r01*x3385))+(((-1.0)*x3382*x3389))+x3398+(((-1.0)*cj5*x3376*x3389))+((cj2*x3396))+((x3384*x3391))+(((-1.0)*x3388*x3393)));
evalcond[5]=((((-1.0)*x3377*x3382))+(((-1.0)*cj6*r11*x3385))+(((-1.0)*x3386*x3393))+((cj2*x3395))+(((-1.0)*cj5*x3376*x3377))+((x3383*x3384))+(((-1.0)*sj3*x3397)));
evalcond[6]=((((-1.0)*x3374*x3378))+((x3375*x3379))+(((-0.384)*x3375*x3392))+(((-1.0)*x3379*x3396))+(((0.384)*x3395))+(((-1.0)*px))+(((0.316)*x3374))+(((-1.0)*r01*x3380))+((r00*x3387)));
evalcond[7]=(((x3375*x3378))+(((-0.384)*x3396))+((r10*x3387))+(((-0.316)*x3375))+(((-1.0)*x3379*x3395))+(((-0.384)*x3374*x3392))+((x3374*x3379))+(((-1.0)*py))+(((-1.0)*r11*x3380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3409=IKPowWithIntegerCheck(sj2,-1);
if(!x3409.valid){
continue;
}
IkReal x3399=x3409.value;
IkReal x3400=(r01*sj6);
IkReal x3401=(sj2*sj5);
IkReal x3402=(cj2*sj3);
IkReal x3403=(cj5*sj4);
IkReal x3404=(cj6*r00);
IkReal x3405=((1.0)*r02);
IkReal x3406=(sj4*sj5);
IkReal x3407=(cj4*cj6*r01);
IkReal x3408=(cj4*r00*sj6);
CheckValue<IkReal> x3410=IKPowWithIntegerCheck(cj3,-1);
if(!x3410.valid){
continue;
}
if( IKabs((x3399*(x3410.value)*(((((-1.0)*x3402*x3403*x3404))+(((-1.0)*x3402*x3405*x3406))+(((-1.0)*x3400*x3401))+((x3401*x3404))+((x3400*x3402*x3403))+((x3402*x3408))+((x3402*x3407))+(((-1.0)*cj5*sj2*x3405)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x3399*(((((-1.0)*x3405*x3406))+x3407+x3408+(((-1.0)*x3403*x3404))+((x3400*x3403)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3399*(x3410.value)*(((((-1.0)*x3402*x3403*x3404))+(((-1.0)*x3402*x3405*x3406))+(((-1.0)*x3400*x3401))+((x3401*x3404))+((x3400*x3402*x3403))+((x3402*x3408))+((x3402*x3407))+(((-1.0)*cj5*sj2*x3405))))))+IKsqr((x3399*(((((-1.0)*x3405*x3406))+x3407+x3408+(((-1.0)*x3403*x3404))+((x3400*x3403))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x3399*(x3410.value)*(((((-1.0)*x3402*x3403*x3404))+(((-1.0)*x3402*x3405*x3406))+(((-1.0)*x3400*x3401))+((x3401*x3404))+((x3400*x3402*x3403))+((x3402*x3408))+((x3402*x3407))+(((-1.0)*cj5*sj2*x3405))))), (x3399*(((((-1.0)*x3405*x3406))+x3407+x3408+(((-1.0)*x3403*x3404))+((x3400*x3403))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3411=IKsin(j1);
IkReal x3412=IKcos(j1);
IkReal x3413=(cj4*cj6);
IkReal x3414=((1.0)*r10);
IkReal x3415=((0.0825)*sj3);
IkReal x3416=((0.0825)*cj2);
IkReal x3417=((0.088)*sj6);
IkReal x3418=(cj6*sj5);
IkReal x3419=(sj4*sj6);
IkReal x3420=(r11*sj6);
IkReal x3421=(cj4*cj5);
IkReal x3422=((1.0)*sj4);
IkReal x3423=(r12*sj5);
IkReal x3424=((0.088)*cj6);
IkReal x3425=(r02*sj5);
IkReal x3426=((1.0)*r00);
IkReal x3427=(cj4*sj6);
IkReal x3428=(r01*sj6);
IkReal x3429=(cj2*sj3);
IkReal x3430=((1.0)*cj4);
IkReal x3431=(cj5*cj6);
IkReal x3432=(cj3*x3411);
IkReal x3433=(cj3*x3412);
IkReal x3434=((1.0)*x3412);
IkReal x3435=(sj3*x3411);
evalcond[0]=(((sj5*x3428))+x3432+(((-1.0)*x3418*x3426))+(((-1.0)*x3429*x3434))+((cj5*r02)));
evalcond[1]=(((sj5*x3420))+((cj5*r12))+(((-1.0)*x3414*x3418))+(((-1.0)*x3433))+(((-1.0)*x3411*x3429)));
evalcond[2]=(((r00*x3427))+(((-1.0)*r00*x3422*x3431))+((r01*x3413))+(((-1.0)*x3422*x3425))+(((-1.0)*sj2*x3434))+((cj5*r01*x3419)));
evalcond[3]=(((r10*x3427))+(((-1.0)*sj4*x3414*x3431))+((r11*x3413))+((cj5*r11*x3419))+(((-1.0)*sj2*x3411))+(((-1.0)*x3422*x3423)));
evalcond[4]=((((-1.0)*x3425*x3430))+x3435+((x3421*x3428))+(((-1.0)*x3419*x3426))+(((-1.0)*cj5*x3413*x3426))+(((-1.0)*cj6*r01*x3422))+((cj2*x3433)));
evalcond[5]=((((-1.0)*cj5*x3413*x3414))+((x3420*x3421))+(((-1.0)*x3414*x3419))+(((-1.0)*sj3*x3434))+(((-1.0)*x3423*x3430))+((cj2*x3432))+(((-1.0)*cj6*r11*x3422)));
evalcond[6]=(((r00*x3424))+(((0.384)*x3432))+(((-1.0)*x3411*x3415))+(((-0.384)*x3412*x3429))+(((-1.0)*x3416*x3433))+(((-1.0)*px))+(((0.316)*x3411))+((x3412*x3416))+(((-1.0)*r01*x3417)));
evalcond[7]=((((-0.316)*x3412))+((r10*x3424))+((x3411*x3416))+(((-1.0)*x3416*x3432))+(((-1.0)*py))+(((-1.0)*r11*x3417))+(((-0.384)*x3433))+((x3412*x3415))+(((-0.384)*x3411*x3429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3436=cj2*cj2;
IkReal x3437=cj3*cj3;
IkReal x3438=(cj5*r02);
IkReal x3439=((1.0)*cj3);
IkReal x3440=(cj2*sj3);
IkReal x3441=(cj5*r12);
IkReal x3442=(cj6*sj5);
IkReal x3443=(r11*sj5*sj6);
IkReal x3444=((1.0)*x3442);
IkReal x3445=(r01*sj5*sj6);
CheckValue<IkReal> x3446=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3436*x3437))+x3436+x3437)),-1);
if(!x3446.valid){
continue;
}
CheckValue<IkReal> x3447 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3440*x3444))+(((-1.0)*x3439*x3445))+(((-1.0)*x3438*x3439))+((cj3*r00*x3442))+((x3440*x3443))+((x3440*x3441)))),IkReal((((x3438*x3440))+((cj3*x3441))+((cj3*x3443))+(((-1.0)*r00*x3440*x3444))+(((-1.0)*r10*x3439*x3442))+((x3440*x3445)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3447.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3446.value)))+(x3447.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3448=IKsin(j1);
IkReal x3449=IKcos(j1);
IkReal x3450=(cj4*cj6);
IkReal x3451=((1.0)*r10);
IkReal x3452=((0.0825)*sj3);
IkReal x3453=((0.0825)*cj2);
IkReal x3454=((0.088)*sj6);
IkReal x3455=(cj6*sj5);
IkReal x3456=(sj4*sj6);
IkReal x3457=(r11*sj6);
IkReal x3458=(cj4*cj5);
IkReal x3459=((1.0)*sj4);
IkReal x3460=(r12*sj5);
IkReal x3461=((0.088)*cj6);
IkReal x3462=(r02*sj5);
IkReal x3463=((1.0)*r00);
IkReal x3464=(cj4*sj6);
IkReal x3465=(r01*sj6);
IkReal x3466=(cj2*sj3);
IkReal x3467=((1.0)*cj4);
IkReal x3468=(cj5*cj6);
IkReal x3469=(cj3*x3448);
IkReal x3470=(cj3*x3449);
IkReal x3471=((1.0)*x3449);
IkReal x3472=(sj3*x3448);
evalcond[0]=(((sj5*x3465))+x3469+(((-1.0)*x3455*x3463))+((cj5*r02))+(((-1.0)*x3466*x3471)));
evalcond[1]=((((-1.0)*x3451*x3455))+((cj5*r12))+(((-1.0)*x3470))+((sj5*x3457))+(((-1.0)*x3448*x3466)));
evalcond[2]=((((-1.0)*r00*x3459*x3468))+((r00*x3464))+(((-1.0)*x3459*x3462))+((cj5*r01*x3456))+(((-1.0)*sj2*x3471))+((r01*x3450)));
evalcond[3]=((((-1.0)*sj2*x3448))+(((-1.0)*sj4*x3451*x3468))+(((-1.0)*x3459*x3460))+((r10*x3464))+((cj5*r11*x3456))+((r11*x3450)));
evalcond[4]=((((-1.0)*cj5*x3450*x3463))+(((-1.0)*x3462*x3467))+x3472+(((-1.0)*x3456*x3463))+((cj2*x3470))+((x3458*x3465))+(((-1.0)*cj6*r01*x3459)));
evalcond[5]=(((x3457*x3458))+(((-1.0)*x3451*x3456))+(((-1.0)*cj5*x3450*x3451))+(((-1.0)*x3460*x3467))+((cj2*x3469))+(((-1.0)*cj6*r11*x3459))+(((-1.0)*sj3*x3471)));
evalcond[6]=((((-1.0)*r01*x3454))+(((0.384)*x3469))+(((-1.0)*x3453*x3470))+((r00*x3461))+(((0.316)*x3448))+(((-1.0)*px))+(((-1.0)*x3448*x3452))+(((-0.384)*x3449*x3466))+((x3449*x3453)));
evalcond[7]=((((-0.316)*x3449))+(((-1.0)*x3453*x3469))+((x3448*x3453))+(((-1.0)*py))+(((-0.384)*x3470))+((r10*x3461))+(((-1.0)*r11*x3454))+((x3449*x3452))+(((-0.384)*x3448*x3466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3473=r21*r21;
IkReal x3474=cj6*cj6;
IkReal x3475=r20*r20;
IkReal x3476=((1.0)*r20);
IkReal x3477=(cj6*sj4);
IkReal x3478=(sj2*sj3);
IkReal x3479=(cj4*r21);
IkReal x3480=((2.0)*r20);
IkReal x3481=(cj4*sj6);
IkReal x3482=(r21*sj6);
IkReal x3483=((1.0)*x3473);
IkReal x3484=(sj4*x3474);
CheckValue<IkReal> x3485=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3483*x3484))+((sj4*x3473))+((x3475*x3484))+((sj4*(r22*r22)))+(((-1.0)*x3477*x3480*x3482)))),-1);
if(!x3485.valid){
continue;
}
CheckValue<IkReal> x3486 = IKatan2WithCheck(IkReal(((((-1.0)*x3476*x3477*x3478))+((r20*r22*x3481))+((cj2*r22))+((cj6*r22*x3479))+((sj4*x3478*x3482)))),IkReal((((cj6*x3475*x3481))+((cj2*cj6*r20))+(((-1.0)*cj6*x3481*x3483))+((r22*sj4*x3478))+((x3474*x3479*x3480))+(((-1.0)*x3476*x3479))+(((-1.0)*cj2*x3482)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3486.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3485.value)))+(x3486.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x3487=IKsin(j5);
IkReal x3488=IKcos(j5);
IkReal x3489=((1.0)*cj4);
IkReal x3490=(r21*sj6);
IkReal x3491=(cj6*r20);
IkReal x3492=(cj6*r21);
IkReal x3493=((1.0)*sj4);
IkReal x3494=(r20*sj6);
IkReal x3495=(r22*x3487);
IkReal x3496=(sj4*x3488);
evalcond[0]=((((-1.0)*x3487*x3491))+(((-1.0)*sj2*sj3))+((x3487*x3490))+((r22*x3488)));
evalcond[1]=(cj2+((cj4*x3492))+((cj4*x3494))+(((-1.0)*x3488*x3491*x3493))+(((-1.0)*x3493*x3495))+((x3490*x3496)));
evalcond[2]=(((cj4*x3488*x3490))+(((-1.0)*x3489*x3495))+(((-1.0)*x3493*x3494))+(((-1.0)*x3492*x3493))+(((-1.0)*x3488*x3489*x3491))+((cj3*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
IkReal x3497=cj2*cj2;
IkReal x3498=cj3*cj3;
IkReal x3499=(x3498+x3497+(((-1.0)*x3497*x3498)));
j1eval[0]=x3499;
j1eval[1]=IKsign(x3499);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j1eval[0]=cj3;
j1eval[1]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
j1eval[0]=sj2;
j1eval[1]=cj2;
j1eval[2]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3500=((1.0)*cj3);
IkReal x3501=(cj5*r02);
IkReal x3502=(sj3*sj5);
IkReal x3503=(cj6*r00);
IkReal x3504=(cj5*r12);
IkReal x3505=(r11*sj6);
IkReal x3506=(cj3*sj5);
IkReal x3507=(cj6*r10);
IkReal x3508=(r01*sj5*sj6);
if( IKabs((((sj3*x3504))+(((-1.0)*x3502*x3507))+((x3502*x3505))+((x3503*x3506))+(((-1.0)*x3500*x3508))+(((-1.0)*x3500*x3501)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj3*x3501))+((cj3*x3504))+(((-1.0)*x3502*x3503))+(((-1.0)*sj5*x3500*x3507))+((r01*sj6*x3502))+((x3505*x3506)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj3*x3504))+(((-1.0)*x3502*x3507))+((x3502*x3505))+((x3503*x3506))+(((-1.0)*x3500*x3508))+(((-1.0)*x3500*x3501))))+IKsqr((((sj3*x3501))+((cj3*x3504))+(((-1.0)*x3502*x3503))+(((-1.0)*sj5*x3500*x3507))+((r01*sj6*x3502))+((x3505*x3506))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((sj3*x3504))+(((-1.0)*x3502*x3507))+((x3502*x3505))+((x3503*x3506))+(((-1.0)*x3500*x3508))+(((-1.0)*x3500*x3501))), (((sj3*x3501))+((cj3*x3504))+(((-1.0)*x3502*x3503))+(((-1.0)*sj5*x3500*x3507))+((r01*sj6*x3502))+((x3505*x3506))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3509=IKcos(j1);
IkReal x3510=IKsin(j1);
IkReal x3511=((1.0)*r10);
IkReal x3512=(cj6*sj5);
IkReal x3513=(sj4*sj6);
IkReal x3514=(r01*sj6);
IkReal x3515=((1.0)*cj6);
IkReal x3516=(r11*sj6);
IkReal x3517=((0.088)*cj6);
IkReal x3518=(cj4*cj5);
IkReal x3519=((1.0)*r00);
IkReal x3520=(cj3*x3510);
IkReal x3521=(cj3*x3509);
IkReal x3522=(sj3*x3510);
IkReal x3523=(sj3*x3509);
IkReal x3524=((1.0)*cj4*sj5);
IkReal x3525=((1.0)*x3523);
evalcond[0]=((((-1.0)*x3512*x3519))+((sj5*x3514))+(((-1.0)*x3525))+x3520+((cj5*r02)));
evalcond[1]=((((-1.0)*x3521))+(((-1.0)*x3522))+((cj5*r12))+((sj5*x3516))+(((-1.0)*x3511*x3512)));
evalcond[2]=((((-1.0)*r02*x3524))+(((-1.0)*x3513*x3519))+x3522+x3521+((x3514*x3518))+(((-1.0)*r01*sj4*x3515))+(((-1.0)*r00*x3515*x3518)));
evalcond[3]=((((-1.0)*cj6*x3511*x3518))+(((-1.0)*x3525))+(((-1.0)*x3511*x3513))+x3520+(((-1.0)*r12*x3524))+((x3516*x3518))+(((-1.0)*r11*sj4*x3515)));
evalcond[4]=((((0.384)*x3520))+(((-0.384)*x3523))+((r00*x3517))+(((0.0825)*x3509))+(((-1.0)*px))+(((-0.0825)*x3522))+(((-0.0825)*x3521))+(((-0.088)*x3514))+(((0.316)*x3510)));
evalcond[5]=(((r10*x3517))+(((-0.316)*x3509))+(((-0.384)*x3521))+(((-0.384)*x3522))+(((0.0825)*x3523))+(((-1.0)*py))+(((0.0825)*x3510))+(((-0.0825)*x3520))+(((-0.088)*x3516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3526=(cj5*r12);
IkReal x3527=(cj3*sj5);
IkReal x3528=(cj6*r10);
IkReal x3529=(cj6*r00);
IkReal x3530=(sj3*sj5);
IkReal x3531=((1.0)*cj5*r02);
IkReal x3532=((1.0)*sj5*sj6);
if( IKabs((((x3527*x3529))+(((-1.0)*r11*sj6*x3530))+(((-1.0)*cj3*x3531))+(((-1.0)*r01*sj6*x3527))+((x3528*x3530))+(((-1.0)*sj3*x3526)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*sj6*x3530))+(((-1.0)*sj3*x3531))+((r11*sj6*x3527))+(((-1.0)*x3527*x3528))+((x3529*x3530))+((cj3*x3526)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x3527*x3529))+(((-1.0)*r11*sj6*x3530))+(((-1.0)*cj3*x3531))+(((-1.0)*r01*sj6*x3527))+((x3528*x3530))+(((-1.0)*sj3*x3526))))+IKsqr(((((-1.0)*r01*sj6*x3530))+(((-1.0)*sj3*x3531))+((r11*sj6*x3527))+(((-1.0)*x3527*x3528))+((x3529*x3530))+((cj3*x3526))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x3527*x3529))+(((-1.0)*r11*sj6*x3530))+(((-1.0)*cj3*x3531))+(((-1.0)*r01*sj6*x3527))+((x3528*x3530))+(((-1.0)*sj3*x3526))), ((((-1.0)*r01*sj6*x3530))+(((-1.0)*sj3*x3531))+((r11*sj6*x3527))+(((-1.0)*x3527*x3528))+((x3529*x3530))+((cj3*x3526))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3533=IKsin(j1);
IkReal x3534=IKcos(j1);
IkReal x3535=((1.0)*r10);
IkReal x3536=(cj6*sj5);
IkReal x3537=(sj4*sj6);
IkReal x3538=(r01*sj6);
IkReal x3539=((1.0)*cj6);
IkReal x3540=(r11*sj6);
IkReal x3541=((0.088)*cj6);
IkReal x3542=(cj4*cj5);
IkReal x3543=((1.0)*r00);
IkReal x3544=(sj3*x3533);
IkReal x3545=(cj3*x3533);
IkReal x3546=(cj3*x3534);
IkReal x3547=(sj3*x3534);
IkReal x3548=((1.0)*cj4*sj5);
IkReal x3549=((1.0)*x3546);
evalcond[0]=(x3545+x3547+((sj5*x3538))+(((-1.0)*x3536*x3543))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+(((-1.0)*x3535*x3536))+x3544+(((-1.0)*x3549))+((sj5*x3540)));
evalcond[2]=((((-1.0)*r02*x3548))+(((-1.0)*r00*x3539*x3542))+x3544+((x3538*x3542))+(((-1.0)*x3549))+(((-1.0)*x3537*x3543))+(((-1.0)*r01*sj4*x3539)));
evalcond[3]=((((-1.0)*x3535*x3537))+(((-1.0)*r11*sj4*x3539))+(((-1.0)*x3547))+(((-1.0)*x3545))+((x3540*x3542))+(((-1.0)*r12*x3548))+(((-1.0)*cj6*x3535*x3542)));
evalcond[4]=((((-0.0825)*x3534))+(((-0.088)*x3538))+(((-0.0825)*x3544))+(((0.384)*x3547))+(((0.384)*x3545))+((r00*x3541))+(((0.316)*x3533))+(((-1.0)*px))+(((0.0825)*x3546)));
evalcond[5]=((((-0.0825)*x3533))+(((0.384)*x3544))+(((-1.0)*py))+(((-0.384)*x3546))+(((0.0825)*x3545))+(((0.0825)*x3547))+(((-0.316)*x3534))+(((-0.088)*x3540))+((r10*x3541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x3550=((1.0)*sj5);
j1eval[0]=cj3;
j1eval[1]=IKsign(cj3);
j1eval[2]=((IKabs(((((-1.0)*r01*sj6*x3550))+((cj6*r00*sj5))+(((-1.0)*cj5*r02)))))+(IKabs((((cj5*r12))+(((-1.0)*cj6*r10*x3550))+((r11*sj5*sj6))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j1eval[0]=cj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j1eval[0]=((3.83030303030303)+(((-1.0)*sj3))+(((4.65454545454545)*cj3)));
j1eval[1]=cj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3551=IKPowWithIntegerCheck(((0.316)+(((-0.0825)*sj3))+(((0.384)*cj3))),-1);
if(!x3551.valid){
continue;
}
CheckValue<IkReal> x3552=IKPowWithIntegerCheck(cj3,-1);
if(!x3552.valid){
continue;
}
if( IKabs(((x3551.value)*(((((-0.088)*cj6*r00))+px+(((0.088)*r01*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3552.value)*((((cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3551.value)*(((((-0.088)*cj6*r00))+px+(((0.088)*r01*sj6))))))+IKsqr(((x3552.value)*((((cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3551.value)*(((((-0.088)*cj6*r00))+px+(((0.088)*r01*sj6))))), ((x3552.value)*((((cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3553=IKsin(j1);
IkReal x3554=IKcos(j1);
IkReal x3555=(cj4*r11);
IkReal x3556=((0.088)*sj6);
IkReal x3557=((1.0)*r10);
IkReal x3558=(cj6*sj5);
IkReal x3559=(sj4*sj6);
IkReal x3560=((0.384)*cj3);
IkReal x3561=(cj5*sj6);
IkReal x3562=((1.0)*sj4);
IkReal x3563=(cj6*r01);
IkReal x3564=(sj5*sj6);
IkReal x3565=(r12*sj5);
IkReal x3566=((0.088)*cj6);
IkReal x3567=(r02*sj5);
IkReal x3568=((1.0)*r00);
IkReal x3569=(cj4*sj6);
IkReal x3570=((1.0)*cj4);
IkReal x3571=(cj5*cj6);
IkReal x3572=(sj3*x3553);
IkReal x3573=(cj4*x3571);
IkReal x3574=((1.0)*x3554);
evalcond[0]=(((r01*x3564))+(((-1.0)*x3558*x3568))+((cj5*r02))+((cj3*x3553)));
evalcond[1]=(((cj5*r12))+(((-1.0)*x3557*x3558))+(((-1.0)*cj3*x3574))+((r11*x3564)));
evalcond[2]=((((-1.0)*r01*x3556))+((r00*x3566))+(((-1.0)*px))+(((0.316)*x3553))+(((-0.0825)*x3572))+((x3553*x3560)));
evalcond[3]=(((r10*x3566))+(((0.0825)*sj3*x3554))+(((-1.0)*x3554*x3560))+(((-1.0)*py))+(((-1.0)*r11*x3556))+(((-0.316)*x3554)));
evalcond[4]=(((cj4*x3563))+(((-1.0)*r00*x3562*x3571))+(((-1.0)*x3574))+((r00*x3569))+(((-1.0)*x3562*x3567))+((cj5*r01*x3559)));
evalcond[5]=(((r10*x3569))+(((-1.0)*sj4*x3557*x3571))+((cj5*r11*x3559))+(((-1.0)*x3553))+(((-1.0)*x3562*x3565))+((cj6*x3555)));
evalcond[6]=((((-1.0)*x3568*x3573))+((cj4*r01*x3561))+x3572+(((-1.0)*x3559*x3568))+(((-1.0)*x3562*x3563))+(((-1.0)*x3567*x3570)));
evalcond[7]=((((-1.0)*x3557*x3559))+(((-1.0)*x3557*x3573))+(((-1.0)*x3565*x3570))+(((-1.0)*sj3*x3574))+((x3555*x3561))+(((-1.0)*cj6*r11*x3562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3575=(r01*sj6);
IkReal x3576=((1.0)*sj5);
IkReal x3577=(cj5*sj4);
IkReal x3578=(cj6*r00);
CheckValue<IkReal> x3579=IKPowWithIntegerCheck(cj3,-1);
if(!x3579.valid){
continue;
}
if( IKabs(((x3579.value)*(((((-1.0)*x3575*x3576))+((sj5*x3578))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*r00*sj6))+((x3575*x3577))+(((-1.0)*x3577*x3578))+((cj4*cj6*r01))+(((-1.0)*r02*sj4*x3576)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3579.value)*(((((-1.0)*x3575*x3576))+((sj5*x3578))+(((-1.0)*cj5*r02))))))+IKsqr((((cj4*r00*sj6))+((x3575*x3577))+(((-1.0)*x3577*x3578))+((cj4*cj6*r01))+(((-1.0)*r02*sj4*x3576))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3579.value)*(((((-1.0)*x3575*x3576))+((sj5*x3578))+(((-1.0)*cj5*r02))))), (((cj4*r00*sj6))+((x3575*x3577))+(((-1.0)*x3577*x3578))+((cj4*cj6*r01))+(((-1.0)*r02*sj4*x3576))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3580=IKsin(j1);
IkReal x3581=IKcos(j1);
IkReal x3582=(cj4*r11);
IkReal x3583=((0.088)*sj6);
IkReal x3584=((1.0)*r10);
IkReal x3585=(cj6*sj5);
IkReal x3586=(sj4*sj6);
IkReal x3587=((0.384)*cj3);
IkReal x3588=(cj5*sj6);
IkReal x3589=((1.0)*sj4);
IkReal x3590=(cj6*r01);
IkReal x3591=(sj5*sj6);
IkReal x3592=(r12*sj5);
IkReal x3593=((0.088)*cj6);
IkReal x3594=(r02*sj5);
IkReal x3595=((1.0)*r00);
IkReal x3596=(cj4*sj6);
IkReal x3597=((1.0)*cj4);
IkReal x3598=(cj5*cj6);
IkReal x3599=(sj3*x3580);
IkReal x3600=(cj4*x3598);
IkReal x3601=((1.0)*x3581);
evalcond[0]=((((-1.0)*x3585*x3595))+((cj3*x3580))+((r01*x3591))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+((r11*x3591))+(((-1.0)*cj3*x3601))+(((-1.0)*x3584*x3585)));
evalcond[2]=((((-0.0825)*x3599))+(((0.316)*x3580))+(((-1.0)*px))+((r00*x3593))+((x3580*x3587))+(((-1.0)*r01*x3583)));
evalcond[3]=(((r10*x3593))+(((-1.0)*x3581*x3587))+(((-1.0)*py))+(((-0.316)*x3581))+(((-1.0)*r11*x3583))+(((0.0825)*sj3*x3581)));
evalcond[4]=((((-1.0)*x3589*x3594))+(((-1.0)*r00*x3589*x3598))+((cj4*x3590))+((cj5*r01*x3586))+((r00*x3596))+(((-1.0)*x3601)));
evalcond[5]=((((-1.0)*x3589*x3592))+(((-1.0)*sj4*x3584*x3598))+((r10*x3596))+((cj6*x3582))+((cj5*r11*x3586))+(((-1.0)*x3580)));
evalcond[6]=((((-1.0)*x3594*x3597))+(((-1.0)*x3589*x3590))+x3599+(((-1.0)*x3586*x3595))+((cj4*r01*x3588))+(((-1.0)*x3595*x3600)));
evalcond[7]=((((-1.0)*cj6*r11*x3589))+(((-1.0)*x3584*x3586))+(((-1.0)*x3584*x3600))+(((-1.0)*x3592*x3597))+((x3582*x3588))+(((-1.0)*sj3*x3601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3602=((1.0)*sj5);
CheckValue<IkReal> x3603=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x3603.valid){
continue;
}
CheckValue<IkReal> x3604 = IKatan2WithCheck(IkReal((((cj6*r00*sj5))+(((-1.0)*r01*sj6*x3602))+(((-1.0)*cj5*r02)))),IkReal((((cj5*r12))+(((-1.0)*cj6*r10*x3602))+((r11*sj5*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3604.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3603.value)))+(x3604.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3605=IKsin(j1);
IkReal x3606=IKcos(j1);
IkReal x3607=(cj4*r11);
IkReal x3608=((0.088)*sj6);
IkReal x3609=((1.0)*r10);
IkReal x3610=(cj6*sj5);
IkReal x3611=(sj4*sj6);
IkReal x3612=((0.384)*cj3);
IkReal x3613=(cj5*sj6);
IkReal x3614=((1.0)*sj4);
IkReal x3615=(cj6*r01);
IkReal x3616=(sj5*sj6);
IkReal x3617=(r12*sj5);
IkReal x3618=((0.088)*cj6);
IkReal x3619=(r02*sj5);
IkReal x3620=((1.0)*r00);
IkReal x3621=(cj4*sj6);
IkReal x3622=((1.0)*cj4);
IkReal x3623=(cj5*cj6);
IkReal x3624=(sj3*x3605);
IkReal x3625=(cj4*x3623);
IkReal x3626=((1.0)*x3606);
evalcond[0]=((((-1.0)*x3610*x3620))+((r01*x3616))+((cj3*x3605))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+((r11*x3616))+(((-1.0)*cj3*x3626))+(((-1.0)*x3609*x3610)));
evalcond[2]=((((-1.0)*r01*x3608))+((x3605*x3612))+(((-0.0825)*x3624))+(((-1.0)*px))+((r00*x3618))+(((0.316)*x3605)));
evalcond[3]=((((-1.0)*r11*x3608))+(((0.0825)*sj3*x3606))+(((-1.0)*py))+((r10*x3618))+(((-1.0)*x3606*x3612))+(((-0.316)*x3606)));
evalcond[4]=((((-1.0)*x3626))+((cj4*x3615))+((r00*x3621))+(((-1.0)*x3614*x3619))+((cj5*r01*x3611))+(((-1.0)*r00*x3614*x3623)));
evalcond[5]=(((r10*x3621))+(((-1.0)*x3605))+((cj6*x3607))+(((-1.0)*x3614*x3617))+((cj5*r11*x3611))+(((-1.0)*sj4*x3609*x3623)));
evalcond[6]=(x3624+(((-1.0)*x3614*x3615))+(((-1.0)*x3611*x3620))+(((-1.0)*x3619*x3622))+((cj4*r01*x3613))+(((-1.0)*x3620*x3625)));
evalcond[7]=((((-1.0)*cj6*r11*x3614))+((x3607*x3613))+(((-1.0)*sj3*x3626))+(((-1.0)*x3609*x3611))+(((-1.0)*x3617*x3622))+(((-1.0)*x3609*x3625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x3627=((1.0)*sj5);
j1eval[0]=cj3;
j1eval[1]=IKsign(cj3);
j1eval[2]=((IKabs((((cj5*r12))+(((-1.0)*cj6*r10*x3627))+((r11*sj5*sj6)))))+(IKabs(((((-1.0)*r01*sj6*x3627))+((cj6*r00*sj5))+(((-1.0)*cj5*r02))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j1eval[0]=cj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j1eval[0]=((3.83030303030303)+(((-1.0)*sj3))+(((4.65454545454545)*cj3)));
j1eval[1]=cj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3628=IKPowWithIntegerCheck(((0.316)+(((-0.0825)*sj3))+(((0.384)*cj3))),-1);
if(!x3628.valid){
continue;
}
CheckValue<IkReal> x3629=IKPowWithIntegerCheck(cj3,-1);
if(!x3629.valid){
continue;
}
if( IKabs(((x3628.value)*(((((-0.088)*cj6*r00))+px+(((0.088)*r01*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3629.value)*((((cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3628.value)*(((((-0.088)*cj6*r00))+px+(((0.088)*r01*sj6))))))+IKsqr(((x3629.value)*((((cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3628.value)*(((((-0.088)*cj6*r00))+px+(((0.088)*r01*sj6))))), ((x3629.value)*((((cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3630=IKcos(j1);
IkReal x3631=IKsin(j1);
IkReal x3632=(cj4*cj6);
IkReal x3633=((1.0)*r10);
IkReal x3634=((0.384)*cj3);
IkReal x3635=(cj6*sj5);
IkReal x3636=(sj4*sj6);
IkReal x3637=(r01*sj6);
IkReal x3638=(r11*sj6);
IkReal x3639=(cj4*cj5);
IkReal x3640=((1.0)*sj4);
IkReal x3641=(r12*sj5);
IkReal x3642=((0.088)*cj6);
IkReal x3643=(r02*sj5);
IkReal x3644=((1.0)*r00);
IkReal x3645=(cj4*sj6);
IkReal x3646=((1.0)*cj4);
IkReal x3647=(cj5*cj6);
IkReal x3648=(sj3*x3631);
IkReal x3649=(sj3*x3630);
evalcond[0]=(((sj5*x3637))+(((-1.0)*x3635*x3644))+((cj3*x3631))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+((sj5*x3638))+(((-1.0)*x3633*x3635))+(((-1.0)*cj3*x3630)));
evalcond[2]=((((-1.0)*r00*x3640*x3647))+((r00*x3645))+(((-1.0)*x3640*x3643))+x3630+((cj5*r01*x3636))+((r01*x3632)));
evalcond[3]=(((r11*x3632))+(((-1.0)*x3640*x3641))+x3631+((r10*x3645))+(((-1.0)*sj4*x3633*x3647))+((cj5*r11*x3636)));
evalcond[4]=((((-0.088)*x3637))+((r00*x3642))+(((-0.0825)*x3648))+(((-1.0)*px))+((x3631*x3634))+(((0.316)*x3631)));
evalcond[5]=((((-0.088)*x3638))+(((-0.316)*x3630))+(((-1.0)*x3630*x3634))+(((-1.0)*py))+((r10*x3642))+(((0.0825)*x3649)));
evalcond[6]=((((-1.0)*cj5*x3632*x3644))+(((-1.0)*x3643*x3646))+(((-1.0)*cj6*r01*x3640))+(((-1.0)*x3636*x3644))+x3648+((x3637*x3639)));
evalcond[7]=((((-1.0)*x3633*x3636))+((x3638*x3639))+(((-1.0)*x3649))+(((-1.0)*cj5*x3632*x3633))+(((-1.0)*cj6*r11*x3640))+(((-1.0)*x3641*x3646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3650=((1.0)*sj6);
IkReal x3651=(cj5*sj4);
IkReal x3652=(cj6*r00);
CheckValue<IkReal> x3653=IKPowWithIntegerCheck(cj3,-1);
if(!x3653.valid){
continue;
}
if( IKabs(((x3653.value)*((((sj5*x3652))+(((-1.0)*r01*sj5*x3650))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*r00*x3650))+((x3651*x3652))+(((-1.0)*cj4*cj6*r01))+(((-1.0)*r01*x3650*x3651))+((r02*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3653.value)*((((sj5*x3652))+(((-1.0)*r01*sj5*x3650))+(((-1.0)*cj5*r02))))))+IKsqr(((((-1.0)*cj4*r00*x3650))+((x3651*x3652))+(((-1.0)*cj4*cj6*r01))+(((-1.0)*r01*x3650*x3651))+((r02*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3653.value)*((((sj5*x3652))+(((-1.0)*r01*sj5*x3650))+(((-1.0)*cj5*r02))))), ((((-1.0)*cj4*r00*x3650))+((x3651*x3652))+(((-1.0)*cj4*cj6*r01))+(((-1.0)*r01*x3650*x3651))+((r02*sj4*sj5))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3654=IKcos(j1);
IkReal x3655=IKsin(j1);
IkReal x3656=(cj4*cj6);
IkReal x3657=((1.0)*r10);
IkReal x3658=((0.384)*cj3);
IkReal x3659=(cj6*sj5);
IkReal x3660=(sj4*sj6);
IkReal x3661=(r01*sj6);
IkReal x3662=(r11*sj6);
IkReal x3663=(cj4*cj5);
IkReal x3664=((1.0)*sj4);
IkReal x3665=(r12*sj5);
IkReal x3666=((0.088)*cj6);
IkReal x3667=(r02*sj5);
IkReal x3668=((1.0)*r00);
IkReal x3669=(cj4*sj6);
IkReal x3670=((1.0)*cj4);
IkReal x3671=(cj5*cj6);
IkReal x3672=(sj3*x3655);
IkReal x3673=(sj3*x3654);
evalcond[0]=(((cj3*x3655))+(((-1.0)*x3659*x3668))+((sj5*x3661))+((cj5*r02)));
evalcond[1]=((((-1.0)*cj3*x3654))+((cj5*r12))+(((-1.0)*x3657*x3659))+((sj5*x3662)));
evalcond[2]=(((cj5*r01*x3660))+((r00*x3669))+x3654+(((-1.0)*x3664*x3667))+(((-1.0)*r00*x3664*x3671))+((r01*x3656)));
evalcond[3]=((((-1.0)*sj4*x3657*x3671))+((r11*x3656))+((r10*x3669))+x3655+((cj5*r11*x3660))+(((-1.0)*x3664*x3665)));
evalcond[4]=((((-0.0825)*x3672))+(((-0.088)*x3661))+((r00*x3666))+(((-1.0)*px))+(((0.316)*x3655))+((x3655*x3658)));
evalcond[5]=((((-0.088)*x3662))+((r10*x3666))+(((-1.0)*py))+(((-1.0)*x3654*x3658))+(((0.0825)*x3673))+(((-0.316)*x3654)));
evalcond[6]=((((-1.0)*cj6*r01*x3664))+(((-1.0)*x3660*x3668))+(((-1.0)*cj5*x3656*x3668))+x3672+(((-1.0)*x3667*x3670))+((x3661*x3663)));
evalcond[7]=(((x3662*x3663))+(((-1.0)*cj6*r11*x3664))+(((-1.0)*x3665*x3670))+(((-1.0)*cj5*x3656*x3657))+(((-1.0)*x3673))+(((-1.0)*x3657*x3660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3674=((1.0)*sj5);
CheckValue<IkReal> x3675=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x3675.valid){
continue;
}
CheckValue<IkReal> x3676 = IKatan2WithCheck(IkReal((((cj6*r00*sj5))+(((-1.0)*r01*sj6*x3674))+(((-1.0)*cj5*r02)))),IkReal((((cj5*r12))+(((-1.0)*cj6*r10*x3674))+((r11*sj5*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3676.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3675.value)))+(x3676.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3677=IKcos(j1);
IkReal x3678=IKsin(j1);
IkReal x3679=(cj4*cj6);
IkReal x3680=((1.0)*r10);
IkReal x3681=((0.384)*cj3);
IkReal x3682=(cj6*sj5);
IkReal x3683=(sj4*sj6);
IkReal x3684=(r01*sj6);
IkReal x3685=(r11*sj6);
IkReal x3686=(cj4*cj5);
IkReal x3687=((1.0)*sj4);
IkReal x3688=(r12*sj5);
IkReal x3689=((0.088)*cj6);
IkReal x3690=(r02*sj5);
IkReal x3691=((1.0)*r00);
IkReal x3692=(cj4*sj6);
IkReal x3693=((1.0)*cj4);
IkReal x3694=(cj5*cj6);
IkReal x3695=(sj3*x3678);
IkReal x3696=(sj3*x3677);
evalcond[0]=(((cj3*x3678))+((sj5*x3684))+(((-1.0)*x3682*x3691))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+((sj5*x3685))+(((-1.0)*x3680*x3682))+(((-1.0)*cj3*x3677)));
evalcond[2]=(((r00*x3692))+((r01*x3679))+((cj5*r01*x3683))+(((-1.0)*x3687*x3690))+x3677+(((-1.0)*r00*x3687*x3694)));
evalcond[3]=(((cj5*r11*x3683))+((r11*x3679))+x3678+(((-1.0)*sj4*x3680*x3694))+(((-1.0)*x3687*x3688))+((r10*x3692)));
evalcond[4]=(((r00*x3689))+((x3678*x3681))+(((-1.0)*px))+(((0.316)*x3678))+(((-0.088)*x3684))+(((-0.0825)*x3695)));
evalcond[5]=(((r10*x3689))+(((-1.0)*x3677*x3681))+(((-1.0)*py))+(((0.0825)*x3696))+(((-0.088)*x3685))+(((-0.316)*x3677)));
evalcond[6]=((((-1.0)*cj5*x3679*x3691))+(((-1.0)*cj6*r01*x3687))+x3695+((x3684*x3686))+(((-1.0)*x3683*x3691))+(((-1.0)*x3690*x3693)));
evalcond[7]=((((-1.0)*x3688*x3693))+((x3685*x3686))+(((-1.0)*x3680*x3683))+(((-1.0)*x3696))+(((-1.0)*cj6*r11*x3687))+(((-1.0)*cj5*x3679*x3680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.125714285714286)*r11*sj6))+(((-1.42857142857143)*py))+(((0.125714285714286)*cj6*r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+(((-1.0)*cj5*r02))))+IKsqr(((((-0.125714285714286)*r11*sj6))+(((-1.42857142857143)*py))+(((0.125714285714286)*cj6*r10))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+(((-1.0)*cj5*r02))), ((((-0.125714285714286)*r11*sj6))+(((-1.42857142857143)*py))+(((0.125714285714286)*cj6*r10))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3697=IKsin(j1);
IkReal x3698=IKcos(j1);
IkReal x3699=(cj4*r11);
IkReal x3700=((1.0)*r10);
IkReal x3701=(cj6*sj5);
IkReal x3702=(sj4*sj6);
IkReal x3703=(r01*sj6);
IkReal x3704=((1.0)*sj4);
IkReal x3705=(cj6*r01);
IkReal x3706=(r11*sj6);
IkReal x3707=(r12*sj5);
IkReal x3708=((0.088)*cj6);
IkReal x3709=(r02*sj5);
IkReal x3710=((1.0)*r00);
IkReal x3711=(cj4*sj6);
IkReal x3712=((1.0)*cj4);
IkReal x3713=(cj5*cj6);
IkReal x3714=((1.0)*x3698);
IkReal x3715=(cj4*x3713);
evalcond[0]=(x3697+(((-1.0)*x3701*x3710))+((sj5*x3703))+((cj5*r02)));
evalcond[1]=(((r00*x3708))+(((0.7)*x3697))+(((-1.0)*px))+(((-0.088)*x3703)));
evalcond[2]=((((-0.7)*x3698))+(((-1.0)*py))+(((-0.088)*x3706))+((r10*x3708)));
evalcond[3]=(((cj5*r12))+(((-1.0)*x3700*x3701))+(((-1.0)*x3714))+((sj5*x3706)));
evalcond[4]=((((-1.0)*r00*x3704*x3713))+(((-1.0)*x3704*x3709))+((cj4*x3705))+((r00*x3711))+(((-1.0)*sj2*x3714))+((cj5*r01*x3702)));
evalcond[5]=((((-1.0)*sj4*x3700*x3713))+(((-1.0)*x3704*x3707))+((cj6*x3699))+(((-1.0)*sj2*x3697))+((r10*x3711))+((cj5*r11*x3702)));
evalcond[6]=(((cj4*cj5*x3703))+(((-1.0)*x3704*x3705))+(((-1.0)*x3710*x3715))+((cj2*x3698))+(((-1.0)*x3709*x3712))+(((-1.0)*x3702*x3710)));
evalcond[7]=((((-1.0)*x3700*x3715))+(((-1.0)*x3707*x3712))+(((-1.0)*x3700*x3702))+((cj2*x3697))+(((-1.0)*cj6*r11*x3704))+((cj5*sj6*x3699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3716=((1.0)*sj5);
if( IKabs((((r01*sj5*sj6))+(((-1.0)*cj6*r00*x3716))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x3716)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj5*sj6))+(((-1.0)*cj6*r00*x3716))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x3716))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r01*sj5*sj6))+(((-1.0)*cj6*r00*x3716))+((cj5*r02))), ((((-1.0)*cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x3716))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3717=IKcos(j1);
IkReal x3718=IKsin(j1);
IkReal x3719=(cj4*r11);
IkReal x3720=((1.0)*r10);
IkReal x3721=(cj6*sj5);
IkReal x3722=(sj4*sj6);
IkReal x3723=(r01*sj6);
IkReal x3724=((1.0)*sj4);
IkReal x3725=(cj6*r01);
IkReal x3726=(r11*sj6);
IkReal x3727=(r12*sj5);
IkReal x3728=((0.165)*cj2);
IkReal x3729=((0.088)*cj6);
IkReal x3730=(r02*sj5);
IkReal x3731=((1.0)*r00);
IkReal x3732=(cj4*sj6);
IkReal x3733=((1.0)*cj4);
IkReal x3734=(cj5*cj6);
IkReal x3735=((1.0)*x3717);
IkReal x3736=(cj4*x3734);
IkReal x3737=((1.0)*x3718);
evalcond[0]=(((cj5*r12))+x3717+((sj5*x3726))+(((-1.0)*x3720*x3721)));
evalcond[1]=((((-1.0)*x3737))+(((-1.0)*x3721*x3731))+((sj5*x3723))+((cj5*r02)));
evalcond[2]=(((r00*x3729))+(((-0.068)*x3718))+((x3717*x3728))+(((-1.0)*px))+(((-0.088)*x3723)));
evalcond[3]=(((x3718*x3728))+(((0.068)*x3717))+(((-1.0)*py))+((r10*x3729))+(((-0.088)*x3726)));
evalcond[4]=(((r00*x3732))+(((-1.0)*x3724*x3730))+((cj4*x3725))+(((-1.0)*sj2*x3735))+((cj5*r01*x3722))+(((-1.0)*r00*x3724*x3734)));
evalcond[5]=((((-1.0)*x3724*x3727))+(((-1.0)*sj4*x3720*x3734))+(((-1.0)*sj2*x3737))+((r10*x3732))+((cj5*r11*x3722))+((cj6*x3719)));
evalcond[6]=((((-1.0)*cj2*x3735))+(((-1.0)*x3724*x3725))+(((-1.0)*x3730*x3733))+(((-1.0)*x3731*x3736))+(((-1.0)*x3722*x3731))+((cj4*cj5*x3723)));
evalcond[7]=((((-1.0)*cj2*x3737))+(((-1.0)*x3727*x3733))+((cj5*sj6*x3719))+(((-1.0)*cj6*r11*x3724))+(((-1.0)*x3720*x3736))+(((-1.0)*x3720*x3722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x3738=(sj5*sj6);
IkReal x3739=((1.0)*cj6*sj5);
j1eval[0]=cj2;
j1eval[1]=((IKabs((((r01*x3738))+(((-1.0)*r00*x3739))+((cj5*r02)))))+(IKabs((((cj5*r12))+((r11*x3738))+(((-1.0)*r10*x3739))))));
j1eval[2]=IKsign(cj2);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1eval[0]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3740=(cj5*r02);
IkReal x3741=(cj6*r00);
IkReal x3742=((1.29122055674518)*sj5);
IkReal x3743=(r01*sj6);
CheckValue<IkReal> x3744=IKPowWithIntegerCheck(cj2,-1);
if(!x3744.valid){
continue;
}
if( IKabs((((x3742*x3743))+(((-0.376873661670236)*x3741))+(((1.29122055674518)*x3740))+(((-1.0)*x3741*x3742))+(((0.376873661670236)*x3743))+(((4.28265524625268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3744.value)*((((sj5*x3743))+x3740+(((-1.0)*sj5*x3741)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x3742*x3743))+(((-0.376873661670236)*x3741))+(((1.29122055674518)*x3740))+(((-1.0)*x3741*x3742))+(((0.376873661670236)*x3743))+(((4.28265524625268)*px))))+IKsqr(((x3744.value)*((((sj5*x3743))+x3740+(((-1.0)*sj5*x3741))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x3742*x3743))+(((-0.376873661670236)*x3741))+(((1.29122055674518)*x3740))+(((-1.0)*x3741*x3742))+(((0.376873661670236)*x3743))+(((4.28265524625268)*px))), ((x3744.value)*((((sj5*x3743))+x3740+(((-1.0)*sj5*x3741))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3745=IKsin(j1);
IkReal x3746=IKcos(j1);
IkReal x3747=(cj4*r11);
IkReal x3748=(cj5*sj6);
IkReal x3749=((1.0)*r10);
IkReal x3750=(cj6*sj5);
IkReal x3751=(sj4*sj6);
IkReal x3752=(r01*sj6);
IkReal x3753=((1.0)*sj4);
IkReal x3754=(cj6*r01);
IkReal x3755=(r11*sj6);
IkReal x3756=((0.088)*cj6);
IkReal x3757=(r02*sj5);
IkReal x3758=((1.0)*r00);
IkReal x3759=(r12*sj5);
IkReal x3760=(cj4*sj6);
IkReal x3761=((1.0)*cj4);
IkReal x3762=(cj5*cj6);
IkReal x3763=((1.0)*x3746);
IkReal x3764=(cj2*x3745);
IkReal x3765=(cj4*x3762);
evalcond[0]=((((-1.0)*x3750*x3758))+(((-1.0)*cj2*x3763))+((sj5*x3752))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+(((-1.0)*x3749*x3750))+(((-1.0)*x3764))+((sj5*x3755)));
evalcond[2]=((((-0.3015)*cj2*x3746))+((r00*x3756))+(((0.2335)*x3745))+(((-1.0)*px))+(((-0.088)*x3752)));
evalcond[3]=((((-0.3015)*x3764))+((r10*x3756))+(((-1.0)*py))+(((-0.2335)*x3746))+(((-0.088)*x3755)));
evalcond[4]=((((-1.0)*x3757*x3761))+(((-1.0)*x3753*x3754))+x3745+(((-1.0)*x3751*x3758))+((cj4*r01*x3748))+(((-1.0)*x3758*x3765)));
evalcond[5]=((((-1.0)*sj2*x3763))+(((-1.0)*x3753*x3757))+(((-1.0)*r00*x3753*x3762))+((cj4*x3754))+((r00*x3760))+((r01*sj4*x3748)));
evalcond[6]=((((-1.0)*sj2*x3745))+(((-1.0)*x3753*x3759))+((r10*x3760))+(((-1.0)*sj4*x3749*x3762))+((r11*sj4*x3748))+((cj6*x3747)));
evalcond[7]=((((-1.0)*x3749*x3751))+(((-1.0)*cj6*r11*x3753))+(((-1.0)*x3759*x3761))+(((-1.0)*x3749*x3765))+((x3747*x3748))+(((-1.0)*x3763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3766=(sj5*sj6);
IkReal x3767=((1.0)*cj6*sj5);
CheckValue<IkReal> x3768=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x3768.valid){
continue;
}
CheckValue<IkReal> x3769 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3767))+((cj5*r12))+((r11*x3766)))),IkReal(((((-1.0)*r00*x3767))+((cj5*r02))+((r01*x3766)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3769.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3768.value)))+(x3769.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3770=IKsin(j1);
IkReal x3771=IKcos(j1);
IkReal x3772=(cj4*r11);
IkReal x3773=(cj5*sj6);
IkReal x3774=((1.0)*r10);
IkReal x3775=(cj6*sj5);
IkReal x3776=(sj4*sj6);
IkReal x3777=(r01*sj6);
IkReal x3778=((1.0)*sj4);
IkReal x3779=(cj6*r01);
IkReal x3780=(r11*sj6);
IkReal x3781=((0.088)*cj6);
IkReal x3782=(r02*sj5);
IkReal x3783=((1.0)*r00);
IkReal x3784=(r12*sj5);
IkReal x3785=(cj4*sj6);
IkReal x3786=((1.0)*cj4);
IkReal x3787=(cj5*cj6);
IkReal x3788=((1.0)*x3771);
IkReal x3789=(cj2*x3770);
IkReal x3790=(cj4*x3787);
evalcond[0]=(((sj5*x3777))+(((-1.0)*cj2*x3788))+(((-1.0)*x3775*x3783))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+((sj5*x3780))+(((-1.0)*x3789))+(((-1.0)*x3774*x3775)));
evalcond[2]=((((0.2335)*x3770))+(((-1.0)*px))+(((-0.3015)*cj2*x3771))+((r00*x3781))+(((-0.088)*x3777)));
evalcond[3]=((((-0.2335)*x3771))+(((-0.088)*x3780))+(((-1.0)*py))+(((-0.3015)*x3789))+((r10*x3781)));
evalcond[4]=((((-1.0)*x3783*x3790))+(((-1.0)*x3782*x3786))+(((-1.0)*x3778*x3779))+((cj4*r01*x3773))+x3770+(((-1.0)*x3776*x3783)));
evalcond[5]=((((-1.0)*r00*x3778*x3787))+(((-1.0)*x3778*x3782))+(((-1.0)*sj2*x3788))+((r01*sj4*x3773))+((r00*x3785))+((cj4*x3779)));
evalcond[6]=(((r11*sj4*x3773))+(((-1.0)*x3778*x3784))+(((-1.0)*sj2*x3770))+(((-1.0)*sj4*x3774*x3787))+((cj6*x3772))+((r10*x3785)));
evalcond[7]=((((-1.0)*x3784*x3786))+(((-1.0)*cj6*r11*x3778))+(((-1.0)*x3788))+(((-1.0)*x3774*x3776))+((x3772*x3773))+(((-1.0)*x3774*x3790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3791=((1.0)*cj5);
IkReal x3792=(cj6*sj5);
IkReal x3793=((1.0)*sj5*sj6);
j1eval[0]=cj2;
j1eval[1]=((IKabs(((((-1.0)*r12*x3791))+(((-1.0)*r11*x3793))+((r10*x3792)))))+(IKabs(((((-1.0)*r01*x3793))+(((-1.0)*r02*x3791))+((r00*x3792))))));
j1eval[2]=IKsign(cj2);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1eval[0]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3794=(r01*sj6);
IkReal x3795=((1.17063989962359)*sj5);
IkReal x3796=(cj6*r00);
IkReal x3797=(cj5*r02);
CheckValue<IkReal> x3798=IKPowWithIntegerCheck(cj2,-1);
if(!x3798.valid){
continue;
}
if( IKabs(((((1.17063989962359)*x3797))+(((-1.0)*x3795*x3796))+(((-0.220828105395232)*x3796))+(((0.220828105395232)*x3794))+(((2.50941028858218)*px))+((x3794*x3795)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3798.value)*(((((-1.0)*x3797))+((sj5*x3796))+(((-1.0)*sj5*x3794)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17063989962359)*x3797))+(((-1.0)*x3795*x3796))+(((-0.220828105395232)*x3796))+(((0.220828105395232)*x3794))+(((2.50941028858218)*px))+((x3794*x3795))))+IKsqr(((x3798.value)*(((((-1.0)*x3797))+((sj5*x3796))+(((-1.0)*sj5*x3794))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17063989962359)*x3797))+(((-1.0)*x3795*x3796))+(((-0.220828105395232)*x3796))+(((0.220828105395232)*x3794))+(((2.50941028858218)*px))+((x3794*x3795))), ((x3798.value)*(((((-1.0)*x3797))+((sj5*x3796))+(((-1.0)*sj5*x3794))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3799=IKcos(j1);
IkReal x3800=IKsin(j1);
IkReal x3801=(cj4*cj6);
IkReal x3802=((1.0)*r10);
IkReal x3803=(cj6*sj5);
IkReal x3804=((1.0)*sj2);
IkReal x3805=(sj4*sj6);
IkReal x3806=(r01*sj6);
IkReal x3807=((0.4665)*cj2);
IkReal x3808=((1.0)*sj4);
IkReal x3809=(r11*sj6);
IkReal x3810=(r12*sj5);
IkReal x3811=(cj5*cj6);
IkReal x3812=((0.088)*cj6);
IkReal x3813=(r02*sj5);
IkReal x3814=((1.0)*r00);
IkReal x3815=(cj4*sj6);
IkReal x3816=(cj4*cj5);
IkReal x3817=((1.0)*cj4);
evalcond[0]=((((-1.0)*x3803*x3814))+((cj2*x3799))+((sj5*x3806))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+(((-1.0)*x3802*x3803))+((sj5*x3809))+((cj2*x3800)));
evalcond[2]=(((x3799*x3807))+(((-0.088)*x3806))+(((0.3985)*x3800))+(((-1.0)*px))+((r00*x3812)));
evalcond[3]=((((-0.3985)*x3799))+(((-0.088)*x3809))+((x3800*x3807))+(((-1.0)*py))+((r10*x3812)));
evalcond[4]=((((-1.0)*cj6*r11*x3808))+(((-1.0)*x3810*x3817))+(((-1.0)*x3802*x3805))+((x3809*x3816))+x3799+(((-1.0)*cj5*x3801*x3802)));
evalcond[5]=(((r01*x3801))+(((-1.0)*x3808*x3813))+((cj5*r01*x3805))+(((-1.0)*x3799*x3804))+(((-1.0)*r00*x3808*x3811))+((r00*x3815)));
evalcond[6]=(((r11*x3801))+(((-1.0)*x3800*x3804))+(((-1.0)*x3808*x3810))+((r10*x3815))+((cj5*r11*x3805))+(((-1.0)*sj4*x3802*x3811)));
evalcond[7]=(((x3806*x3816))+(((-1.0)*cj6*r01*x3808))+(((-1.0)*x3813*x3817))+(((-1.0)*x3800))+(((-1.0)*cj5*x3801*x3814))+(((-1.0)*x3805*x3814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3818=((1.0)*cj5);
IkReal x3819=(cj6*sj5);
IkReal x3820=((1.0)*sj5*sj6);
CheckValue<IkReal> x3821=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x3821.valid){
continue;
}
CheckValue<IkReal> x3822 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3818))+((r10*x3819))+(((-1.0)*r11*x3820)))),IkReal(((((-1.0)*r01*x3820))+(((-1.0)*r02*x3818))+((r00*x3819)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3822.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3821.value)))+(x3822.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3823=IKcos(j1);
IkReal x3824=IKsin(j1);
IkReal x3825=(cj4*cj6);
IkReal x3826=((1.0)*r10);
IkReal x3827=(cj6*sj5);
IkReal x3828=((1.0)*sj2);
IkReal x3829=(sj4*sj6);
IkReal x3830=(r01*sj6);
IkReal x3831=((0.4665)*cj2);
IkReal x3832=((1.0)*sj4);
IkReal x3833=(r11*sj6);
IkReal x3834=(r12*sj5);
IkReal x3835=(cj5*cj6);
IkReal x3836=((0.088)*cj6);
IkReal x3837=(r02*sj5);
IkReal x3838=((1.0)*r00);
IkReal x3839=(cj4*sj6);
IkReal x3840=(cj4*cj5);
IkReal x3841=((1.0)*cj4);
evalcond[0]=(((sj5*x3830))+((cj2*x3823))+(((-1.0)*x3827*x3838))+((cj5*r02)));
evalcond[1]=(((sj5*x3833))+((cj5*r12))+((cj2*x3824))+(((-1.0)*x3826*x3827)));
evalcond[2]=(((x3823*x3831))+((r00*x3836))+(((-1.0)*px))+(((0.3985)*x3824))+(((-0.088)*x3830)));
evalcond[3]=(((x3824*x3831))+(((-0.3985)*x3823))+(((-1.0)*py))+((r10*x3836))+(((-0.088)*x3833)));
evalcond[4]=((((-1.0)*x3826*x3829))+(((-1.0)*x3834*x3841))+x3823+(((-1.0)*cj6*r11*x3832))+((x3833*x3840))+(((-1.0)*cj5*x3825*x3826)));
evalcond[5]=((((-1.0)*x3832*x3837))+((r00*x3839))+(((-1.0)*x3823*x3828))+((cj5*r01*x3829))+(((-1.0)*r00*x3832*x3835))+((r01*x3825)));
evalcond[6]=((((-1.0)*sj4*x3826*x3835))+(((-1.0)*x3832*x3834))+(((-1.0)*x3824*x3828))+((r11*x3825))+((cj5*r11*x3829))+((r10*x3839)));
evalcond[7]=((((-1.0)*x3829*x3838))+((x3830*x3840))+(((-1.0)*x3824))+(((-1.0)*cj5*x3825*x3838))+(((-1.0)*cj6*r01*x3832))+(((-1.0)*x3837*x3841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3851=IKPowWithIntegerCheck(sj2,-1);
if(!x3851.valid){
continue;
}
IkReal x3842=x3851.value;
IkReal x3843=(cj3*r10);
IkReal x3844=((1.0)*cj6);
IkReal x3845=(cj5*sj4);
IkReal x3846=(cj4*sj6);
IkReal x3847=(sj2*sj5);
IkReal x3848=(r11*sj6);
IkReal x3849=(cj4*cj6*r11);
IkReal x3850=((1.0)*r12*sj4*sj5);
CheckValue<IkReal> x3852=IKPowWithIntegerCheck(cj2,-1);
if(!x3852.valid){
continue;
}
CheckValue<IkReal> x3853=IKPowWithIntegerCheck(sj3,-1);
if(!x3853.valid){
continue;
}
if( IKabs((x3842*(((((-1.0)*x3850))+(((-1.0)*r10*x3844*x3845))+((x3845*x3848))+x3849+((r10*x3846)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x3842*(x3852.value)*(x3853.value)*(((((-1.0)*cj3*x3850))+((cj3*x3845*x3848))+((cj3*x3849))+(((-1.0)*r00*x3844*x3847))+((cj5*r02*sj2))+((x3843*x3846))+(((-1.0)*x3843*x3844*x3845))+((r01*sj6*x3847)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3842*(((((-1.0)*x3850))+(((-1.0)*r10*x3844*x3845))+((x3845*x3848))+x3849+((r10*x3846))))))+IKsqr((x3842*(x3852.value)*(x3853.value)*(((((-1.0)*cj3*x3850))+((cj3*x3845*x3848))+((cj3*x3849))+(((-1.0)*r00*x3844*x3847))+((cj5*r02*sj2))+((x3843*x3846))+(((-1.0)*x3843*x3844*x3845))+((r01*sj6*x3847))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x3842*(((((-1.0)*x3850))+(((-1.0)*r10*x3844*x3845))+((x3845*x3848))+x3849+((r10*x3846))))), (x3842*(x3852.value)*(x3853.value)*(((((-1.0)*cj3*x3850))+((cj3*x3845*x3848))+((cj3*x3849))+(((-1.0)*r00*x3844*x3847))+((cj5*r02*sj2))+((x3843*x3846))+(((-1.0)*x3843*x3844*x3845))+((r01*sj6*x3847))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3854=IKsin(j1);
IkReal x3855=IKcos(j1);
IkReal x3856=(cj4*cj6);
IkReal x3857=((1.0)*r10);
IkReal x3858=((0.0825)*sj3);
IkReal x3859=((0.0825)*cj2);
IkReal x3860=((0.088)*sj6);
IkReal x3861=(cj6*sj5);
IkReal x3862=(sj4*sj6);
IkReal x3863=(r11*sj6);
IkReal x3864=(cj4*cj5);
IkReal x3865=((1.0)*sj4);
IkReal x3866=(r12*sj5);
IkReal x3867=((0.088)*cj6);
IkReal x3868=(r02*sj5);
IkReal x3869=((1.0)*r00);
IkReal x3870=(cj4*sj6);
IkReal x3871=(r01*sj6);
IkReal x3872=(cj2*sj3);
IkReal x3873=((1.0)*cj4);
IkReal x3874=(cj5*cj6);
IkReal x3875=(cj3*x3854);
IkReal x3876=(cj3*x3855);
IkReal x3877=((1.0)*x3855);
IkReal x3878=(sj3*x3854);
evalcond[0]=((((-1.0)*x3861*x3869))+x3875+((sj5*x3871))+(((-1.0)*x3872*x3877))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+((sj5*x3863))+(((-1.0)*x3854*x3872))+(((-1.0)*x3857*x3861))+(((-1.0)*x3876)));
evalcond[2]=((((-1.0)*x3865*x3868))+((r00*x3870))+(((-1.0)*r00*x3865*x3874))+((r01*x3856))+(((-1.0)*sj2*x3877))+((cj5*r01*x3862)));
evalcond[3]=(((r11*x3856))+(((-1.0)*x3865*x3866))+((cj5*r11*x3862))+((r10*x3870))+(((-1.0)*sj2*x3854))+(((-1.0)*sj4*x3857*x3874)));
evalcond[4]=(((x3864*x3871))+x3878+(((-1.0)*cj5*x3856*x3869))+(((-1.0)*x3868*x3873))+(((-1.0)*cj6*r01*x3865))+(((-1.0)*x3862*x3869))+((cj2*x3876)));
evalcond[5]=((((-1.0)*x3866*x3873))+(((-1.0)*x3857*x3862))+(((-1.0)*sj3*x3877))+((x3863*x3864))+(((-1.0)*cj6*r11*x3865))+(((-1.0)*cj5*x3856*x3857))+((cj2*x3875)));
evalcond[6]=((((0.384)*x3875))+(((0.316)*x3854))+(((-1.0)*x3859*x3876))+(((-1.0)*x3854*x3858))+((x3855*x3859))+((r00*x3867))+(((-1.0)*px))+(((-1.0)*r01*x3860))+(((-0.384)*x3855*x3872)));
evalcond[7]=(((x3854*x3859))+(((-0.316)*x3855))+(((-1.0)*x3859*x3875))+(((-0.384)*x3876))+((x3855*x3858))+(((-1.0)*py))+((r10*x3867))+(((-1.0)*r11*x3860))+(((-0.384)*x3854*x3872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3889=IKPowWithIntegerCheck(sj2,-1);
if(!x3889.valid){
continue;
}
IkReal x3879=x3889.value;
IkReal x3880=(r01*sj6);
IkReal x3881=(sj2*sj5);
IkReal x3882=(cj2*sj3);
IkReal x3883=(cj5*sj4);
IkReal x3884=(cj6*r00);
IkReal x3885=((1.0)*r02);
IkReal x3886=(sj4*sj5);
IkReal x3887=(cj4*cj6*r01);
IkReal x3888=(cj4*r00*sj6);
CheckValue<IkReal> x3890=IKPowWithIntegerCheck(cj3,-1);
if(!x3890.valid){
continue;
}
if( IKabs((x3879*(x3890.value)*((((x3882*x3887))+((x3882*x3888))+((x3881*x3884))+(((-1.0)*cj5*sj2*x3885))+(((-1.0)*x3882*x3885*x3886))+(((-1.0)*x3882*x3883*x3884))+((x3880*x3882*x3883))+(((-1.0)*x3880*x3881)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x3879*((((x3880*x3883))+(((-1.0)*x3883*x3884))+(((-1.0)*x3885*x3886))+x3887+x3888)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3879*(x3890.value)*((((x3882*x3887))+((x3882*x3888))+((x3881*x3884))+(((-1.0)*cj5*sj2*x3885))+(((-1.0)*x3882*x3885*x3886))+(((-1.0)*x3882*x3883*x3884))+((x3880*x3882*x3883))+(((-1.0)*x3880*x3881))))))+IKsqr((x3879*((((x3880*x3883))+(((-1.0)*x3883*x3884))+(((-1.0)*x3885*x3886))+x3887+x3888))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x3879*(x3890.value)*((((x3882*x3887))+((x3882*x3888))+((x3881*x3884))+(((-1.0)*cj5*sj2*x3885))+(((-1.0)*x3882*x3885*x3886))+(((-1.0)*x3882*x3883*x3884))+((x3880*x3882*x3883))+(((-1.0)*x3880*x3881))))), (x3879*((((x3880*x3883))+(((-1.0)*x3883*x3884))+(((-1.0)*x3885*x3886))+x3887+x3888))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3891=IKsin(j1);
IkReal x3892=IKcos(j1);
IkReal x3893=(cj4*cj6);
IkReal x3894=((1.0)*r10);
IkReal x3895=((0.0825)*sj3);
IkReal x3896=((0.0825)*cj2);
IkReal x3897=((0.088)*sj6);
IkReal x3898=(cj6*sj5);
IkReal x3899=(sj4*sj6);
IkReal x3900=(r11*sj6);
IkReal x3901=(cj4*cj5);
IkReal x3902=((1.0)*sj4);
IkReal x3903=(r12*sj5);
IkReal x3904=((0.088)*cj6);
IkReal x3905=(r02*sj5);
IkReal x3906=((1.0)*r00);
IkReal x3907=(cj4*sj6);
IkReal x3908=(r01*sj6);
IkReal x3909=(cj2*sj3);
IkReal x3910=((1.0)*cj4);
IkReal x3911=(cj5*cj6);
IkReal x3912=(cj3*x3891);
IkReal x3913=(cj3*x3892);
IkReal x3914=((1.0)*x3892);
IkReal x3915=(sj3*x3891);
evalcond[0]=((((-1.0)*x3909*x3914))+x3912+(((-1.0)*x3898*x3906))+((sj5*x3908))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+(((-1.0)*x3913))+(((-1.0)*x3894*x3898))+((sj5*x3900))+(((-1.0)*x3891*x3909)));
evalcond[2]=((((-1.0)*sj2*x3914))+(((-1.0)*x3902*x3905))+((r01*x3893))+(((-1.0)*r00*x3902*x3911))+((r00*x3907))+((cj5*r01*x3899)));
evalcond[3]=(((cj5*r11*x3899))+((r10*x3907))+(((-1.0)*x3902*x3903))+(((-1.0)*sj4*x3894*x3911))+((r11*x3893))+(((-1.0)*sj2*x3891)));
evalcond[4]=((((-1.0)*x3905*x3910))+((x3901*x3908))+(((-1.0)*cj6*r01*x3902))+x3915+(((-1.0)*x3899*x3906))+((cj2*x3913))+(((-1.0)*cj5*x3893*x3906)));
evalcond[5]=(((x3900*x3901))+(((-1.0)*x3903*x3910))+(((-1.0)*sj3*x3914))+(((-1.0)*x3894*x3899))+(((-1.0)*cj5*x3893*x3894))+(((-1.0)*cj6*r11*x3902))+((cj2*x3912)));
evalcond[6]=((((0.384)*x3912))+(((0.316)*x3891))+(((-1.0)*px))+(((-1.0)*x3891*x3895))+((r00*x3904))+((x3892*x3896))+(((-1.0)*x3896*x3913))+(((-1.0)*r01*x3897))+(((-0.384)*x3892*x3909)));
evalcond[7]=((((-0.384)*x3913))+((r10*x3904))+(((-1.0)*r11*x3897))+(((-1.0)*py))+((x3891*x3896))+(((-0.384)*x3891*x3909))+((x3892*x3895))+(((-0.316)*x3892))+(((-1.0)*x3896*x3912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3916=cj2*cj2;
IkReal x3917=cj3*cj3;
IkReal x3918=(cj5*r02);
IkReal x3919=((1.0)*cj3);
IkReal x3920=(cj2*sj3);
IkReal x3921=(cj5*r12);
IkReal x3922=(cj6*sj5);
IkReal x3923=(r11*sj5*sj6);
IkReal x3924=((1.0)*x3922);
IkReal x3925=(r01*sj5*sj6);
CheckValue<IkReal> x3926 = IKatan2WithCheck(IkReal((((x3920*x3923))+((x3920*x3921))+((cj3*r00*x3922))+(((-1.0)*x3919*x3925))+(((-1.0)*r10*x3920*x3924))+(((-1.0)*x3918*x3919)))),IkReal(((((-1.0)*r00*x3920*x3924))+((x3918*x3920))+((cj3*x3923))+((cj3*x3921))+((x3920*x3925))+(((-1.0)*r10*x3919*x3922)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3926.valid){
continue;
}
CheckValue<IkReal> x3927=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3916*x3917))+x3917+x3916)),-1);
if(!x3927.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3926.value)+(((1.5707963267949)*(x3927.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3928=IKsin(j1);
IkReal x3929=IKcos(j1);
IkReal x3930=(cj4*cj6);
IkReal x3931=((1.0)*r10);
IkReal x3932=((0.0825)*sj3);
IkReal x3933=((0.0825)*cj2);
IkReal x3934=((0.088)*sj6);
IkReal x3935=(cj6*sj5);
IkReal x3936=(sj4*sj6);
IkReal x3937=(r11*sj6);
IkReal x3938=(cj4*cj5);
IkReal x3939=((1.0)*sj4);
IkReal x3940=(r12*sj5);
IkReal x3941=((0.088)*cj6);
IkReal x3942=(r02*sj5);
IkReal x3943=((1.0)*r00);
IkReal x3944=(cj4*sj6);
IkReal x3945=(r01*sj6);
IkReal x3946=(cj2*sj3);
IkReal x3947=((1.0)*cj4);
IkReal x3948=(cj5*cj6);
IkReal x3949=(cj3*x3928);
IkReal x3950=(cj3*x3929);
IkReal x3951=((1.0)*x3929);
IkReal x3952=(sj3*x3928);
evalcond[0]=((((-1.0)*x3946*x3951))+x3949+((sj5*x3945))+(((-1.0)*x3935*x3943))+((cj5*r02)));
evalcond[1]=(((cj5*r12))+(((-1.0)*x3950))+(((-1.0)*x3928*x3946))+(((-1.0)*x3931*x3935))+((sj5*x3937)));
evalcond[2]=((((-1.0)*sj2*x3951))+((r00*x3944))+(((-1.0)*r00*x3939*x3948))+((r01*x3930))+((cj5*r01*x3936))+(((-1.0)*x3939*x3942)));
evalcond[3]=((((-1.0)*sj4*x3931*x3948))+(((-1.0)*x3939*x3940))+((r10*x3944))+(((-1.0)*sj2*x3928))+((r11*x3930))+((cj5*r11*x3936)));
evalcond[4]=((((-1.0)*cj5*x3930*x3943))+(((-1.0)*cj6*r01*x3939))+(((-1.0)*x3942*x3947))+((x3938*x3945))+x3952+(((-1.0)*x3936*x3943))+((cj2*x3950)));
evalcond[5]=(((cj2*x3949))+(((-1.0)*sj3*x3951))+(((-1.0)*cj6*r11*x3939))+(((-1.0)*x3931*x3936))+(((-1.0)*x3940*x3947))+((x3937*x3938))+(((-1.0)*cj5*x3930*x3931)));
evalcond[6]=(((r00*x3941))+(((-1.0)*x3933*x3950))+(((0.384)*x3949))+((x3929*x3933))+(((-1.0)*r01*x3934))+(((0.316)*x3928))+(((-1.0)*px))+(((-0.384)*x3929*x3946))+(((-1.0)*x3928*x3932)));
evalcond[7]=((((-0.384)*x3950))+(((-1.0)*x3933*x3949))+((x3929*x3932))+(((-1.0)*py))+(((-0.316)*x3929))+((x3928*x3933))+((r10*x3941))+(((-0.384)*x3928*x3946))+(((-1.0)*r11*x3934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - converted_robot (db26758938dca39343fbf47c4ee1908b)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
